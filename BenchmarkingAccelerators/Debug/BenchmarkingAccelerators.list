
BenchmarkingAccelerators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037fc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039e4  080039e4  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  080039e4  080039e4  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039e4  080039e4  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039e8  080039e8  000139e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080039ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000238  08003c24  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08003c24  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f79a  00000000  00000000  000202ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002381  00000000  00000000  0002fa45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00031dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267dc  00000000  00000000  00032cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e77  00000000  00000000  000594d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa483  00000000  00000000  0006a34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000b9e  00000000  00000000  001647ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f5c  00000000  00000000  0016536c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001692c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000238 	.word	0x20000238
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080039bc 	.word	0x080039bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000023c 	.word	0x2000023c
 8000214:	080039bc 	.word	0x080039bc

08000218 <fmac_config>:
		uint8_t ipBufferSize, uint32_t ipThreshold, uint8_t coeffBaseAddress,
		uint8_t CoeffBufferSize, uint8_t opBaseAddress, uint8_t opBufferSize,
		uint32_t opThreshold, int16_t *pCoeffA, uint8_t coeffASize,
		int16_t *pCoeffB, uint8_t coeffBSize, uint8_t ipAccess,
		uint8_t opAccess, uint32_t clip, uint32_t filter, uint8_t P, uint8_t Q,
		uint8_t R) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	460b      	mov	r3, r1
 8000224:	72fb      	strb	r3, [r7, #11]
 8000226:	4613      	mov	r3, r2
 8000228:	72bb      	strb	r3, [r7, #10]

	/* Set the coefficient buffer base address */
	sFmacConfig->CoeffBaseAddress = coeffBaseAddress;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	7e3a      	ldrb	r2, [r7, #24]
 800022e:	721a      	strb	r2, [r3, #8]
	/* Set the coefficient buffer size to the number of coeffs */
	sFmacConfig->CoeffBufferSize = CoeffBufferSize;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	7f3a      	ldrb	r2, [r7, #28]
 8000234:	725a      	strb	r2, [r3, #9]
	/* Set the Input buffer base address to the next free address */
	sFmacConfig->InputBaseAddress = ipBaseAddr;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	7afa      	ldrb	r2, [r7, #11]
 800023a:	701a      	strb	r2, [r3, #0]
	/* Set the input buffer size greater than the number of coeffs */
	sFmacConfig->InputBufferSize = ipBufferSize;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	7aba      	ldrb	r2, [r7, #10]
 8000240:	705a      	strb	r2, [r3, #1]
	/* Set the input watermark to zero since we are using DMA */
	sFmacConfig->InputThreshold = ipThreshold;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	687a      	ldr	r2, [r7, #4]
 8000246:	605a      	str	r2, [r3, #4]
	/* Set the Output buffer base address to the next free address */
	sFmacConfig->OutputBaseAddress = opBaseAddress;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800024e:	729a      	strb	r2, [r3, #10]
	/* Set the output buffer size */
	sFmacConfig->OutputBufferSize = opBufferSize;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000256:	72da      	strb	r2, [r3, #11]
	/* Set the output watermark to zero since we are using DMA */
	sFmacConfig->OutputThreshold = opThreshold;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800025c:	60da      	str	r2, [r3, #12]
	/* No A coefficients since FIR. To be used in IIR filter */
	sFmacConfig->pCoeffA = pCoeffA;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000262:	611a      	str	r2, [r3, #16]
	sFmacConfig->CoeffASize = coeffASize;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800026a:	751a      	strb	r2, [r3, #20]
	/* Pointer to the coefficients in memory */
	sFmacConfig->pCoeffB = pCoeffB;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000270:	619a      	str	r2, [r3, #24]
	/* Number of coefficients */
	sFmacConfig->CoeffBSize = coeffBSize;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000278:	771a      	strb	r2, [r3, #28]
	/* Select FIR filter function */
	sFmacConfig->Filter = filter;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800027e:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enable DMA input transfer */
	sFmacConfig->InputAccess = ipAccess;
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000286:	775a      	strb	r2, [r3, #29]
	/* Enable DMA output transfer */
	sFmacConfig->OutputAccess = opAccess;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800028e:	779a      	strb	r2, [r3, #30]
	/* Enable clipping of the output at 0x7FFF and 0x8000 */
	sFmacConfig->Clip = clip;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000294:	621a      	str	r2, [r3, #32]
	/* P parameter contains number of coefficients */
	sFmacConfig->P = P; //Number of taps[FIR]
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800029c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	/* Q parameter is not used */
	sFmacConfig->Q = Q; //Don't care [FIR]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80002a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	/* R parameter contains the post-shift value (none. To be used in IIR filters */
	sFmacConfig->R = R; //Gain[FIR]
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80002b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 80002b4:	bf00      	nop
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <fmac_StartWithTimerIRQ>:

void fmac_StartWithTimerIRQ(FMAC_HandleTypeDef *hfmac,
		FMAC_FilterConfigTypeDef *sFmacConfig, TIM_HandleTypeDef *htim6,
		DAC_HandleTypeDef *hdac1) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af02      	add	r7, sp, #8
 80002c6:	60f8      	str	r0, [r7, #12]
 80002c8:	60b9      	str	r1, [r7, #8]
 80002ca:	607a      	str	r2, [r7, #4]
 80002cc:	603b      	str	r3, [r7, #0]
	//	/* Configure the FMAC */
	if (HAL_FMAC_FilterConfig(hfmac, sFmacConfig) != HAL_OK)
 80002ce:	68b9      	ldr	r1, [r7, #8]
 80002d0:	68f8      	ldr	r0, [r7, #12]
 80002d2:	f001 fa82 	bl	80017da <HAL_FMAC_FilterConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <fmac_StartWithTimerIRQ+0x20>
		/* Configuration Error */
		Error_Handler();
 80002dc:	f000 fa2e 	bl	800073c <Error_Handler>
	HAL_FMAC_FilterPreload(hfmac, &lut[0], 1, NULL, 0);
 80002e0:	2300      	movs	r3, #0
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	2300      	movs	r3, #0
 80002e6:	2201      	movs	r2, #1
 80002e8:	490c      	ldr	r1, [pc, #48]	; (800031c <fmac_StartWithTimerIRQ+0x5c>)
 80002ea:	68f8      	ldr	r0, [r7, #12]
 80002ec:	f001 fa84 	bl	80017f8 <HAL_FMAC_FilterPreload>
	HAL_StatusTypeDef startStatus;
	startStatus = HAL_FMAC_FilterStart(hfmac, NULL, 100);
 80002f0:	2264      	movs	r2, #100	; 0x64
 80002f2:	2100      	movs	r1, #0
 80002f4:	68f8      	ldr	r0, [r7, #12]
 80002f6:	f001 fa96 	bl	8001826 <HAL_FMAC_FilterStart>
 80002fa:	4603      	mov	r3, r0
 80002fc:	75fb      	strb	r3, [r7, #23]
	if (startStatus == HAL_OK) {
 80002fe:	7dfb      	ldrb	r3, [r7, #23]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d106      	bne.n	8000312 <fmac_StartWithTimerIRQ+0x52>
		HAL_DAC_Start(hdac1, DAC_CHANNEL_1);
 8000304:	2100      	movs	r1, #0
 8000306:	6838      	ldr	r0, [r7, #0]
 8000308:	f000 fd62 	bl	8000dd0 <HAL_DAC_Start>
		HAL_TIM_Base_Start_IT(htim6);
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f003 f967 	bl	80035e0 <HAL_TIM_Base_Start_IT>
	} else {

	}
}
 8000312:	bf00      	nop
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	2000002c 	.word	0x2000002c

08000320 <fmac_FilterSetDAC_TimerISR>:
void fmac_FilterSetDAC_TimerISR(FMAC_HandleTypeDef *hfmac,
		DAC_HandleTypeDef *hdac1, uint8_t *lutIndex) {
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
	//	For FMAC implementation [polling]
	if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_YEMPTY) != FMAC_FLAG_YEMPTY) {
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	2b01      	cmp	r3, #1
 8000338:	d010      	beq.n	800035c <fmac_FilterSetDAC_TimerISR+0x3c>
		int16_t result = hfmac->Instance->RDATA;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	69db      	ldr	r3, [r3, #28]
 8000340:	82fb      	strh	r3, [r7, #22]
		uint32_t dacVal = (uint32_t) (((int32_t) result + 32768) >> 4); // scale to 12-bit
 8000342:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000346:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800034a:	111b      	asrs	r3, r3, #4
 800034c:	613b      	str	r3, [r7, #16]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacVal);
 800034e:	f107 0008 	add.w	r0, r7, #8
 8000352:	693b      	ldr	r3, [r7, #16]
 8000354:	2200      	movs	r2, #0
 8000356:	2100      	movs	r1, #0
 8000358:	f000 fda6 	bl	8000ea8 <HAL_DAC_SetValue>
	}
	if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_X1FULL) != FMAC_FLAG_X1FULL) {
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	695b      	ldr	r3, [r3, #20]
		hfmac->Instance->WDATA = lut[(*lutIndex)++];
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	1c5a      	adds	r2, r3, #1
 8000368:	b2d1      	uxtb	r1, r2
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	7011      	strb	r1, [r2, #0]
 800036e:	461a      	mov	r2, r3
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <fmac_FilterSetDAC_TimerISR+0x64>)
 8000372:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	619a      	str	r2, [r3, #24]
	}
}
 800037c:	bf00      	nop
 800037e:	3718      	adds	r7, #24
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	2000002c 	.word	0x2000002c

08000388 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b09c      	sub	sp, #112	; 0x70
 800038c:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800038e:	f000 fb7c 	bl	8000a8a <HAL_Init>
//	q15_t *cmsis_firStateq15 = &firStateQ15;
//	cmsis_fir_q15_init(&A, NUMTAPS, cmsis_firCoeffs, cmsis_firStateq15, BLOCK_SIZE);
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000392:	f000 f841 	bl	8000418 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000396:	f000 f943 	bl	8000620 <MX_GPIO_Init>
	MX_DMA_Init();
 800039a:	f000 f917 	bl	80005cc <MX_DMA_Init>
	MX_FMAC_Init();
 800039e:	f000 f8cb 	bl	8000538 <MX_FMAC_Init>
	MX_DAC1_Init();
 80003a2:	f000 f885 	bl	80004b0 <MX_DAC1_Init>
	MX_TIM6_Init();
 80003a6:	f000 f8db 	bl	8000560 <MX_TIM6_Init>

	/* USER CODE BEGIN 2 */
	/* declare a filter configuration structure */
	FMAC_FilterConfigTypeDef sFmacConfig;
	fmac_config(&sFmacConfig, 51, 100, 1, 0, 21, 151, 100, 1, NULL, 0,
 80003aa:	1d38      	adds	r0, r7, #4
 80003ac:	2300      	movs	r3, #0
 80003ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80003b0:	2300      	movs	r3, #0
 80003b2:	930e      	str	r3, [sp, #56]	; 0x38
 80003b4:	2315      	movs	r3, #21
 80003b6:	930d      	str	r3, [sp, #52]	; 0x34
 80003b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003bc:	930c      	str	r3, [sp, #48]	; 0x30
 80003be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80003c4:	2302      	movs	r3, #2
 80003c6:	930a      	str	r3, [sp, #40]	; 0x28
 80003c8:	2302      	movs	r3, #2
 80003ca:	9309      	str	r3, [sp, #36]	; 0x24
 80003cc:	2315      	movs	r3, #21
 80003ce:	9308      	str	r3, [sp, #32]
 80003d0:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <main+0x80>)
 80003d2:	9307      	str	r3, [sp, #28]
 80003d4:	2300      	movs	r3, #0
 80003d6:	9306      	str	r3, [sp, #24]
 80003d8:	2300      	movs	r3, #0
 80003da:	9305      	str	r3, [sp, #20]
 80003dc:	2301      	movs	r3, #1
 80003de:	9304      	str	r3, [sp, #16]
 80003e0:	2364      	movs	r3, #100	; 0x64
 80003e2:	9303      	str	r3, [sp, #12]
 80003e4:	2397      	movs	r3, #151	; 0x97
 80003e6:	9302      	str	r3, [sp, #8]
 80003e8:	2315      	movs	r3, #21
 80003ea:	9301      	str	r3, [sp, #4]
 80003ec:	2300      	movs	r3, #0
 80003ee:	9300      	str	r3, [sp, #0]
 80003f0:	2301      	movs	r3, #1
 80003f2:	2264      	movs	r2, #100	; 0x64
 80003f4:	2133      	movs	r1, #51	; 0x33
 80003f6:	f7ff ff0f 	bl	8000218 <fmac_config>
			fir_coeffs, 21, FMAC_BUFFER_ACCESS_POLLING,
			FMAC_BUFFER_ACCESS_POLLING, FMAC_CLIP_ENABLED, FMAC_FUNC_CONVO_FIR,
			21, 0, 0);
	/* Configure the FMAC */
	fmac_StartWithTimerIRQ(&hfmac,&sFmacConfig,&htim6,&hdac1);
 80003fa:	1d39      	adds	r1, r7, #4
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <main+0x84>)
 80003fe:	4a04      	ldr	r2, [pc, #16]	; (8000410 <main+0x88>)
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <main+0x8c>)
 8000402:	f7ff ff5d 	bl	80002c0 <fmac_StartWithTimerIRQ>
//	HAL_TIM_Base_Start_IT(&htim6);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000406:	e7fe      	b.n	8000406 <main+0x7e>
 8000408:	20000000 	.word	0x20000000
 800040c:	20000254 	.word	0x20000254
 8000410:	20000300 	.word	0x20000300
 8000414:	20000268 	.word	0x20000268

08000418 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b094      	sub	sp, #80	; 0x50
 800041c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800041e:	f107 0318 	add.w	r3, r7, #24
 8000422:	2238      	movs	r2, #56	; 0x38
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f003 fa9c 	bl	8003964 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800043a:	2000      	movs	r0, #0
 800043c:	f002 fac2 	bl	80029c4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000440:	2302      	movs	r3, #2
 8000442:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000448:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044a:	2340      	movs	r3, #64	; 0x40
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044e:	2302      	movs	r3, #2
 8000450:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000452:	2302      	movs	r3, #2
 8000454:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000456:	2304      	movs	r3, #4
 8000458:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800045a:	2355      	movs	r3, #85	; 0x55
 800045c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800045e:	2302      	movs	r3, #2
 8000460:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000462:	2302      	movs	r3, #2
 8000464:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000466:	2302      	movs	r3, #2
 8000468:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	4618      	mov	r0, r3
 8000470:	f002 fb5c 	bl	8002b2c <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x66>
		Error_Handler();
 800047a:	f000 f95f 	bl	800073c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2303      	movs	r3, #3
 8000484:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2104      	movs	r1, #4
 8000496:	4618      	mov	r0, r3
 8000498:	f002 fe5a 	bl	8003150 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x8e>
		Error_Handler();
 80004a2:	f000 f94b 	bl	800073c <Error_Handler>
	}
}
 80004a6:	bf00      	nop
 80004a8:	3750      	adds	r7, #80	; 0x50
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08c      	sub	sp, #48	; 0x30
 80004b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80004b6:	463b      	mov	r3, r7
 80004b8:	2230      	movs	r2, #48	; 0x30
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f003 fa51 	bl	8003964 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80004c2:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <MX_DAC1_Init+0x80>)
 80004c4:	4a1b      	ldr	r2, [pc, #108]	; (8000534 <MX_DAC1_Init+0x84>)
 80004c6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80004c8:	4819      	ldr	r0, [pc, #100]	; (8000530 <MX_DAC1_Init+0x80>)
 80004ca:	f000 fc5e 	bl	8000d8a <HAL_DAC_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_DAC1_Init+0x28>
		Error_Handler();
 80004d4:	f000 f932 	bl	800073c <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80004d8:	2302      	movs	r3, #2
 80004da:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 80004dc:	2300      	movs	r3, #0
 80004de:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80004f4:	2301      	movs	r3, #1
 80004f6:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80004fc:	463b      	mov	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	480b      	ldr	r0, [pc, #44]	; (8000530 <MX_DAC1_Init+0x80>)
 8000504:	f000 fcfe 	bl	8000f04 <HAL_DAC_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_DAC1_Init+0x62>
		Error_Handler();
 800050e:	f000 f915 	bl	800073c <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8000512:	463b      	mov	r3, r7
 8000514:	2210      	movs	r2, #16
 8000516:	4619      	mov	r1, r3
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_DAC1_Init+0x80>)
 800051a:	f000 fcf3 	bl	8000f04 <HAL_DAC_ConfigChannel>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_DAC1_Init+0x78>
		Error_Handler();
 8000524:	f000 f90a 	bl	800073c <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	3730      	adds	r7, #48	; 0x30
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000254 	.word	0x20000254
 8000534:	50000800 	.word	0x50000800

08000538 <MX_FMAC_Init>:
/**
 * @brief FMAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_FMAC_Init(void) {
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	/* USER CODE END FMAC_Init 0 */

	/* USER CODE BEGIN FMAC_Init 1 */

	/* USER CODE END FMAC_Init 1 */
	hfmac.Instance = FMAC;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_FMAC_Init+0x20>)
 800053e:	4a07      	ldr	r2, [pc, #28]	; (800055c <MX_FMAC_Init+0x24>)
 8000540:	601a      	str	r2, [r3, #0]
	if (HAL_FMAC_Init(&hfmac) != HAL_OK) {
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <MX_FMAC_Init+0x20>)
 8000544:	f001 f908 	bl	8001758 <HAL_FMAC_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_FMAC_Init+0x1a>
		Error_Handler();
 800054e:	f000 f8f5 	bl	800073c <Error_Handler>
	}
	/* USER CODE BEGIN FMAC_Init 2 */

	/* USER CODE END FMAC_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000268 	.word	0x20000268
 800055c:	40021400 	.word	0x40021400

08000560 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_TIM6_Init+0x64>)
 8000572:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <MX_TIM6_Init+0x68>)
 8000574:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 169;
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <MX_TIM6_Init+0x64>)
 8000578:	22a9      	movs	r2, #169	; 0xa9
 800057a:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_TIM6_Init+0x64>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 20;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <MX_TIM6_Init+0x64>)
 8000584:	2214      	movs	r2, #20
 8000586:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000588:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_TIM6_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <MX_TIM6_Init+0x64>)
 8000590:	f002 ffce 	bl	8003530 <HAL_TIM_Base_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM6_Init+0x3e>
		Error_Handler();
 800059a:	f000 f8cf 	bl	800073c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800059e:	2320      	movs	r3, #32
 80005a0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	4619      	mov	r1, r3
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <MX_TIM6_Init+0x64>)
 80005ac:	f003 f944 	bl	8003838 <HAL_TIMEx_MasterConfigSynchronization>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 80005b6:	f000 f8c1 	bl	800073c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000300 	.word	0x20000300
 80005c8:	40001000 	.word	0x40001000

080005cc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_DMA_Init+0x50>)
 80005d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <MX_DMA_Init+0x50>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	6493      	str	r3, [r2, #72]	; 0x48
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_DMA_Init+0x50>)
 80005e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <MX_DMA_Init+0x50>)
 80005ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005ee:	4a0b      	ldr	r2, [pc, #44]	; (800061c <MX_DMA_Init+0x50>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6493      	str	r3, [r2, #72]	; 0x48
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_DMA_Init+0x50>)
 80005f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	200b      	movs	r0, #11
 8000608:	f000 fb8b 	bl	8000d22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800060c:	200b      	movs	r0, #11
 800060e:	f000 fba2 	bl	8000d56 <HAL_NVIC_EnableIRQ>

}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000

08000620 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b3e      	ldr	r3, [pc, #248]	; (8000730 <MX_GPIO_Init+0x110>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a3d      	ldr	r2, [pc, #244]	; (8000730 <MX_GPIO_Init+0x110>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <MX_GPIO_Init+0x110>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <MX_GPIO_Init+0x110>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a37      	ldr	r2, [pc, #220]	; (8000730 <MX_GPIO_Init+0x110>)
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b35      	ldr	r3, [pc, #212]	; (8000730 <MX_GPIO_Init+0x110>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0320 	and.w	r3, r3, #32
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	4b32      	ldr	r3, [pc, #200]	; (8000730 <MX_GPIO_Init+0x110>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a31      	ldr	r2, [pc, #196]	; (8000730 <MX_GPIO_Init+0x110>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <MX_GPIO_Init+0x110>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <MX_GPIO_Init+0x110>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <MX_GPIO_Init+0x110>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <MX_GPIO_Init+0x110>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_GPIO_Init+0x110>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <MX_GPIO_Init+0x110>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_GPIO_Init+0x110>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b4:	481f      	ldr	r0, [pc, #124]	; (8000734 <MX_GPIO_Init+0x114>)
 80006b6:	f002 f949 	bl	800294c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80006ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006c4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4819      	ldr	r0, [pc, #100]	; (8000738 <MX_GPIO_Init+0x118>)
 80006d2:	f001 ffb9 	bl	8002648 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80006d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	4811      	ldr	r0, [pc, #68]	; (8000734 <MX_GPIO_Init+0x114>)
 80006f0:	f001 ffaa 	bl	8002648 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
	GPIO_InitStruct.Pin = LPUART1_TX_Pin | LPUART1_RX_Pin;
 80006f4:	230c      	movs	r3, #12
 80006f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000704:	230c      	movs	r3, #12
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000712:	f001 ff99 	bl	8002648 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2028      	movs	r0, #40	; 0x28
 800071c:	f000 fb01 	bl	8000d22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000720:	2028      	movs	r0, #40	; 0x28
 8000722:	f000 fb18 	bl	8000d56 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	48001800 	.word	0x48001800
 8000738:	48000800 	.word	0x48000800

0800073c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000740:	b672      	cpsid	i
}
 8000742:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000744:	e7fe      	b.n	8000744 <Error_Handler+0x8>
	...

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_MspInit+0x44>)
 8000750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000752:	4a0e      	ldr	r2, [pc, #56]	; (800078c <HAL_MspInit+0x44>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6613      	str	r3, [r2, #96]	; 0x60
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <HAL_MspInit+0x44>)
 800075c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_MspInit+0x44>)
 8000768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_MspInit+0x44>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	6593      	str	r3, [r2, #88]	; 0x58
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_MspInit+0x44>)
 8000774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800077e:	f002 f9c5 	bl	8002b0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a19      	ldr	r2, [pc, #100]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d12c      	bne.n	800080c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_DAC_MspInit+0x88>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a18      	ldr	r2, [pc, #96]	; (8000818 <HAL_DAC_MspInit+0x88>)
 80007b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_DAC_MspInit+0x88>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <HAL_DAC_MspInit+0x88>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <HAL_DAC_MspInit+0x88>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_DAC_MspInit+0x88>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007e2:	2330      	movs	r3, #48	; 0x30
 80007e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e6:	2303      	movs	r3, #3
 80007e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f001 ff26 	bl	8002648 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2036      	movs	r0, #54	; 0x36
 8000802:	f000 fa8e 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000806:	2036      	movs	r0, #54	; 0x36
 8000808:	f000 faa5 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	; 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	50000800 	.word	0x50000800
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <HAL_FMAC_MspInit+0x98>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d13e      	bne.n	80008ac <HAL_FMAC_MspInit+0x90>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800082e:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <HAL_FMAC_MspInit+0x9c>)
 8000830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000832:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <HAL_FMAC_MspInit+0x9c>)
 8000834:	f043 0310 	orr.w	r3, r3, #16
 8000838:	6493      	str	r3, [r2, #72]	; 0x48
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <HAL_FMAC_MspInit+0x9c>)
 800083c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800083e:	f003 0310 	and.w	r3, r3, #16
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]

    /* FMAC DMA Init */
    /* FMAC_WRITE Init */
    hdma_fmac_write.Instance = DMA1_Channel1;
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 8000848:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <HAL_FMAC_MspInit+0xa4>)
 800084a:	601a      	str	r2, [r3, #0]
    hdma_fmac_write.Init.Request = DMA_REQUEST_FMAC_WRITE;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 800084e:	226f      	movs	r2, #111	; 0x6f
 8000850:	605a      	str	r2, [r3, #4]
    hdma_fmac_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 8000854:	2210      	movs	r2, #16
 8000856:	609a      	str	r2, [r3, #8]
    hdma_fmac_write.Init.PeriphInc = DMA_PINC_DISABLE;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    hdma_fmac_write.Init.MemInc = DMA_MINC_ENABLE;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	611a      	str	r2, [r3, #16]
    hdma_fmac_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 8000866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086a:	615a      	str	r2, [r3, #20]
    hdma_fmac_write.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 800086e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000872:	619a      	str	r2, [r3, #24]
    hdma_fmac_write.Init.Mode = DMA_NORMAL;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
    hdma_fmac_write.Init.Priority = DMA_PRIORITY_LOW;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_fmac_write) != HAL_OK)
 8000880:	480e      	ldr	r0, [pc, #56]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 8000882:	f000 fcf7 	bl	8001274 <HAL_DMA_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <HAL_FMAC_MspInit+0x74>
    {
      Error_Handler();
 800088c:	f7ff ff56 	bl	800073c <Error_Handler>
    }

    __HAL_LINKDMA(hfmac,hdmaIn,hdma_fmac_write);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
 8000896:	4a09      	ldr	r2, [pc, #36]	; (80008bc <HAL_FMAC_MspInit+0xa0>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6293      	str	r3, [r2, #40]	; 0x28

    /* FMAC interrupt Init */
    HAL_NVIC_SetPriority(FMAC_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2065      	movs	r0, #101	; 0x65
 80008a2:	f000 fa3e 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMAC_IRQn);
 80008a6:	2065      	movs	r0, #101	; 0x65
 80008a8:	f000 fa55 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021400 	.word	0x40021400
 80008b8:	40021000 	.word	0x40021000
 80008bc:	200002a0 	.word	0x200002a0
 80008c0:	40020008 	.word	0x40020008

080008c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <HAL_TIM_Base_MspInit+0x44>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d113      	bne.n	80008fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_TIM_Base_MspInit+0x48>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	4a0c      	ldr	r2, [pc, #48]	; (800090c <HAL_TIM_Base_MspInit+0x48>)
 80008dc:	f043 0310 	orr.w	r3, r3, #16
 80008e0:	6593      	str	r3, [r2, #88]	; 0x58
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_TIM_Base_MspInit+0x48>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	f003 0310 	and.w	r3, r3, #16
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2036      	movs	r0, #54	; 0x36
 80008f4:	f000 fa15 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008f8:	2036      	movs	r0, #54	; 0x36
 80008fa:	f000 fa2c 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40001000 	.word	0x40001000
 800090c:	40021000 	.word	0x40021000

08000910 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000920:	e7fe      	b.n	8000920 <MemManage_Handler+0x4>

08000922 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000926:	e7fe      	b.n	8000926 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800092c:	e7fe      	b.n	800092c <UsageFault_Handler+0x4>

0800092e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800095c:	f000 f8e8 	bl	8000b30 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}

08000964 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_fmac_write);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <DMA1_Channel1_IRQHandler+0x10>)
 800096a:	f000 fda6 	bl	80014ba <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200002a0 	.word	0x200002a0

08000978 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800097c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000980:	f001 fffc 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}

08000988 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	static uint8_t lutIndex = 0;
//	For FMAC implementation [polling]
	if (__HAL_FMAC_GET_FLAG(&hfmac, FMAC_FLAG_YEMPTY) != FMAC_FLAG_YEMPTY) {
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <TIM6_DAC_IRQHandler+0x68>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	2b01      	cmp	r3, #1
 800099a:	d00f      	beq.n	80009bc <TIM6_DAC_IRQHandler+0x34>
		int16_t result = hfmac.Instance->RDATA;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <TIM6_DAC_IRQHandler+0x68>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	80fb      	strh	r3, [r7, #6]
		uint32_t dacVal = (uint32_t) (((int32_t) result + 32768) >> 4); // scale to 12-bit
 80009a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80009ac:	111b      	asrs	r3, r3, #4
 80009ae:	603b      	str	r3, [r7, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacVal);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	480f      	ldr	r0, [pc, #60]	; (80009f4 <TIM6_DAC_IRQHandler+0x6c>)
 80009b8:	f000 fa76 	bl	8000ea8 <HAL_DAC_SetValue>
	}
	HAL_StatusTypeDef status;
	if (__HAL_FMAC_GET_FLAG(&hfmac, FMAC_FLAG_X1FULL) != FMAC_FLAG_X1FULL) {
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <TIM6_DAC_IRQHandler+0x68>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	695b      	ldr	r3, [r3, #20]
		hfmac.Instance->WDATA = lut[lutIndex++];
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <TIM6_DAC_IRQHandler+0x70>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	b2d1      	uxtb	r1, r2
 80009ca:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <TIM6_DAC_IRQHandler+0x70>)
 80009cc:	7011      	strb	r1, [r2, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <TIM6_DAC_IRQHandler+0x74>)
 80009d2:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <TIM6_DAC_IRQHandler+0x68>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	619a      	str	r2, [r3, #24]
	}
	fmac_FilterSetDAC_TimerISR(&hfmac, &hdac1, &lutIndex);
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <TIM6_DAC_IRQHandler+0x70>)
 80009de:	4905      	ldr	r1, [pc, #20]	; (80009f4 <TIM6_DAC_IRQHandler+0x6c>)
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <TIM6_DAC_IRQHandler+0x68>)
 80009e2:	f7ff fc9d 	bl	8000320 <fmac_FilterSetDAC_TimerISR>
	/* USER CODE END TIM6_DAC_IRQn 0 */

	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000268 	.word	0x20000268
 80009f4:	20000254 	.word	0x20000254
 80009f8:	2000034c 	.word	0x2000034c
 80009fc:	2000002c 	.word	0x2000002c

08000a00 <FMAC_IRQHandler>:

/**
 * @brief This function handles FMAC interrupt.
 */
void FMAC_IRQHandler(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN FMAC_IRQn 0 */

	/* USER CODE END FMAC_IRQn 0 */
	HAL_FMAC_IRQHandler(&hfmac);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <FMAC_IRQHandler+0x10>)
 8000a06:	f000 ffb2 	bl	800196e <HAL_FMAC_IRQHandler>
	/* USER CODE BEGIN FMAC_IRQn 1 */

	/* USER CODE END FMAC_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000268 	.word	0x20000268

08000a14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a3c:	f7ff ffea 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	; (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	; (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a66:	f002 ff85 	bl	8003974 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6a:	f7ff fc8d 	bl	8000388 <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8000a7c:	080039ec 	.word	0x080039ec
  ldr r2, =_sbss
 8000a80:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8000a84:	20000354 	.word	0x20000354

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>

08000a8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f939 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 f80e 	bl	8000abc <HAL_InitTick>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	e001      	b.n	8000ab0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aac:	f7ff fe4c 	bl	8000748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_InitTick+0x68>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d022      	beq.n	8000b16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_InitTick+0x6c>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_InitTick+0x68>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f944 	bl	8000d72 <HAL_SYSTICK_Config>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10f      	bne.n	8000b10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	d809      	bhi.n	8000b0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af6:	2200      	movs	r2, #0
 8000af8:	6879      	ldr	r1, [r7, #4]
 8000afa:	f04f 30ff 	mov.w	r0, #4294967295
 8000afe:	f000 f910 	bl	8000d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_InitTick+0x70>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e007      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e004      	b.n	8000b1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e001      	b.n	8000b1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000234 	.word	0x20000234
 8000b28:	2000022c 	.word	0x2000022c
 8000b2c:	20000230 	.word	0x20000230

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x20>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	20000350 	.word	0x20000350
 8000b50:	20000234 	.word	0x20000234

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000350 	.word	0x20000350

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff29 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff40 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff33 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa4 	bl	8000cc8 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e014      	b.n	8000dc6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	791b      	ldrb	r3, [r3, #4]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d105      	bne.n	8000db2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fcef 	bl	8000790 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2202      	movs	r2, #2
 8000db6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e056      	b.n	8000e92 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	795b      	ldrb	r3, [r3, #5]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <HAL_DAC_Start+0x20>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e050      	b.n	8000e92 <HAL_DAC_Start+0xc2>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2201      	movs	r2, #1
 8000df4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2202      	movs	r2, #2
 8000dfa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	2201      	movs	r2, #1
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <HAL_DAC_Start+0xd0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	099b      	lsrs	r3, r3, #6
 8000e1a:	4a22      	ldr	r2, [pc, #136]	; (8000ea4 <HAL_DAC_Start+0xd4>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	099b      	lsrs	r3, r3, #6
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8000e26:	e002      	b.n	8000e2e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f9      	bne.n	8000e28 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10f      	bne.n	8000e5a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d11d      	bne.n	8000e84 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0201 	orr.w	r2, r2, #1
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	e014      	b.n	8000e84 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d107      	bne.n	8000e84 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0202 	orr.w	r2, r2, #2
 8000e82:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	2000022c 	.word	0x2000022c
 8000ea4:	053e2d63 	.word	0x053e2d63

08000ea8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e018      	b.n	8000ef6 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d105      	bne.n	8000ee2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	3308      	adds	r3, #8
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	e004      	b.n	8000eec <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3314      	adds	r3, #20
 8000eea:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d002      	beq.n	8000f20 <HAL_DAC_ConfigChannel+0x1c>
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e19e      	b.n	8001262 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	795b      	ldrb	r3, [r3, #5]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <HAL_DAC_ConfigChannel+0x2c>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e198      	b.n	8001262 <HAL_DAC_ConfigChannel+0x35e>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2201      	movs	r2, #1
 8000f34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2202      	movs	r2, #2
 8000f3a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d17a      	bne.n	800103a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000f44:	f7ff fe06 	bl	8000b54 <HAL_GetTick>
 8000f48:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d13d      	bne.n	8000fcc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f50:	e018      	b.n	8000f84 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f52:	f7ff fdff 	bl	8000b54 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d911      	bls.n	8000f84 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00a      	beq.n	8000f84 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	f043 0208 	orr.w	r2, r3, #8
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e16e      	b.n	8001262 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1df      	bne.n	8000f52 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9c:	e020      	b.n	8000fe0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f9e:	f7ff fdd9 	bl	8000b54 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d90f      	bls.n	8000fcc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	da0a      	bge.n	8000fcc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	f043 0208 	orr.w	r2, r3, #8
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e14a      	b.n	8001262 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	dbe3      	blt.n	8000f9e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fde:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	ea02 0103 	and.w	r1, r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	409a      	lsls	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	21ff      	movs	r1, #255	; 0xff
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	ea02 0103 	and.w	r1, r2, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	409a      	lsls	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d11d      	bne.n	800107e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	221f      	movs	r2, #31
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105a:	4013      	ands	r3, r2
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001072:	4313      	orrs	r3, r2
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2207      	movs	r2, #7
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001096:	4013      	ands	r3, r2
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d102      	bne.n	80010a8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
 80010a6:	e00f      	b.n	80010c8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d102      	bne.n	80010b6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
 80010b4:	e008      	b.n	80010c8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80010be:	2301      	movs	r3, #1
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	e001      	b.n	80010c8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	6a3a      	ldr	r2, [r7, #32]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ea:	4013      	ands	r3, r2
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	791b      	ldrb	r3, [r3, #4]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d102      	bne.n	80010fc <HAL_DAC_ConfigChannel+0x1f8>
 80010f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fa:	e000      	b.n	80010fe <HAL_DAC_ConfigChannel+0x1fa>
 80010fc:	2300      	movs	r3, #0
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4313      	orrs	r3, r2
 8001102:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001116:	4013      	ands	r3, r2
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	795b      	ldrb	r3, [r3, #5]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d102      	bne.n	8001128 <HAL_DAC_ConfigChannel+0x224>
 8001122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001126:	e000      	b.n	800112a <HAL_DAC_ConfigChannel+0x226>
 8001128:	2300      	movs	r3, #0
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4313      	orrs	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d114      	bne.n	800116a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001140:	f002 f9a4 	bl	800348c <HAL_RCC_GetHCLKFreq>
 8001144:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4a48      	ldr	r2, [pc, #288]	; (800126c <HAL_DAC_ConfigChannel+0x368>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d904      	bls.n	8001158 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
 8001156:	e00f      	b.n	8001178 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4a45      	ldr	r2, [pc, #276]	; (8001270 <HAL_DAC_ConfigChannel+0x36c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d90a      	bls.n	8001176 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
 8001168:	e006      	b.n	8001178 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001170:	4313      	orrs	r3, r2
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
 8001174:	e000      	b.n	8001178 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001176:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001186:	4313      	orrs	r3, r2
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	400a      	ands	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	f640 72fe 	movw	r2, #4094	; 0xffe
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ca:	4013      	ands	r3, r2
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e2:	4313      	orrs	r3, r2
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6819      	ldr	r1, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	22c0      	movs	r2, #192	; 0xc0
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43da      	mvns	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	400a      	ands	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	f003 030f 	and.w	r3, r3, #15
 8001214:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	ea02 0103 	and.w	r1, r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2201      	movs	r2, #1
 8001258:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001260:	7ffb      	ldrb	r3, [r7, #31]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	09896800 	.word	0x09896800
 8001270:	04c4b400 	.word	0x04c4b400

08001274 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e08d      	b.n	80013a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_DMA_Init+0x138>)
 800128e:	429a      	cmp	r2, r3
 8001290:	d80f      	bhi.n	80012b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	4b45      	ldr	r3, [pc, #276]	; (80013b0 <HAL_DMA_Init+0x13c>)
 800129a:	4413      	add	r3, r2
 800129c:	4a45      	ldr	r2, [pc, #276]	; (80013b4 <HAL_DMA_Init+0x140>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	009a      	lsls	r2, r3, #2
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a42      	ldr	r2, [pc, #264]	; (80013b8 <HAL_DMA_Init+0x144>)
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
 80012b0:	e00e      	b.n	80012d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b40      	ldr	r3, [pc, #256]	; (80013bc <HAL_DMA_Init+0x148>)
 80012ba:	4413      	add	r3, r2
 80012bc:	4a3d      	ldr	r2, [pc, #244]	; (80013b4 <HAL_DMA_Init+0x140>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	009a      	lsls	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a3c      	ldr	r2, [pc, #240]	; (80013c0 <HAL_DMA_Init+0x14c>)
 80012ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2202      	movs	r2, #2
 80012d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800130c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f9b6 	bl	8001694 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001330:	d102      	bne.n	8001338 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800134c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d010      	beq.n	8001378 <HAL_DMA_Init+0x104>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b04      	cmp	r3, #4
 800135c:	d80c      	bhi.n	8001378 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f9d6 	bl	8001710 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	e008      	b.n	800138a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40020407 	.word	0x40020407
 80013b0:	bffdfff8 	.word	0xbffdfff8
 80013b4:	cccccccd 	.word	0xcccccccd
 80013b8:	40020000 	.word	0x40020000
 80013bc:	bffdfbf8 	.word	0xbffdfbf8
 80013c0:	40020400 	.word	0x40020400

080013c4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
 80013d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d101      	bne.n	80013e4 <HAL_DMA_Start_IT+0x20>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e066      	b.n	80014b2 <HAL_DMA_Start_IT+0xee>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d155      	bne.n	80014a4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0201 	bic.w	r2, r2, #1
 8001414:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 f8fb 	bl	8001618 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	2b00      	cmp	r3, #0
 8001428:	d008      	beq.n	800143c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 020e 	orr.w	r2, r2, #14
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e00f      	b.n	800145c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0204 	bic.w	r2, r2, #4
 800144a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 020a 	orr.w	r2, r2, #10
 800145a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d007      	beq.n	800147a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001478:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001490:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e005      	b.n	80014b0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014ac:	2302      	movs	r3, #2
 80014ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f003 031f 	and.w	r3, r3, #31
 80014da:	2204      	movs	r2, #4
 80014dc:	409a      	lsls	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d026      	beq.n	8001534 <HAL_DMA_IRQHandler+0x7a>
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d021      	beq.n	8001534 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0320 	and.w	r3, r3, #32
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d107      	bne.n	800150e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0204 	bic.w	r2, r2, #4
 800150c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f003 021f 	and.w	r2, r3, #31
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	2104      	movs	r1, #4
 800151c:	fa01 f202 	lsl.w	r2, r1, r2
 8001520:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	2b00      	cmp	r3, #0
 8001528:	d071      	beq.n	800160e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001532:	e06c      	b.n	800160e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2202      	movs	r2, #2
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d02e      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d029      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0320 	and.w	r3, r3, #32
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10b      	bne.n	8001578 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 020a 	bic.w	r2, r2, #10
 800156e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	2102      	movs	r1, #2
 8001586:	fa01 f202 	lsl.w	r2, r1, r2
 800158a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	2b00      	cmp	r3, #0
 800159a:	d038      	beq.n	800160e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015a4:	e033      	b.n	800160e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	2208      	movs	r2, #8
 80015b0:	409a      	lsls	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d02a      	beq.n	8001610 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d025      	beq.n	8001610 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 020e 	bic.w	r2, r2, #14
 80015d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	2101      	movs	r1, #1
 80015e2:	fa01 f202 	lsl.w	r2, r1, r2
 80015e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001602:	2b00      	cmp	r3, #0
 8001604:	d004      	beq.n	8001610 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800160e:	bf00      	nop
 8001610:	bf00      	nop
}
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800162e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001640:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f003 021f 	and.w	r2, r3, #31
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b10      	cmp	r3, #16
 8001664:	d108      	bne.n	8001678 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001676:	e007      	b.n	8001688 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	60da      	str	r2, [r3, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d802      	bhi.n	80016ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e001      	b.n	80016b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	3b08      	subs	r3, #8
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	009a      	lsls	r2, r3, #2
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4413      	add	r3, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a0b      	ldr	r2, [pc, #44]	; (800170c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016de:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	2201      	movs	r2, #1
 80016e8:	409a      	lsls	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80016ee:	bf00      	nop
 80016f0:	371c      	adds	r7, #28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40020407 	.word	0x40020407
 8001700:	40020800 	.word	0x40020800
 8001704:	40020820 	.word	0x40020820
 8001708:	cccccccd 	.word	0xcccccccd
 800170c:	40020880 	.word	0x40020880

08001710 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a08      	ldr	r2, [pc, #32]	; (8001754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001732:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3b01      	subs	r3, #1
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	2201      	movs	r2, #1
 800173e:	409a      	lsls	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	1000823f 	.word	0x1000823f
 8001754:	40020940 	.word	0x40020940

08001758 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e033      	b.n	80017d2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff f84c 	bl	800081c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f9e1 	bl	8001b52 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f9af 	bl	8001af4 <FMAC_Reset>
 8001796:	4603      	mov	r3, r0
 8001798:	2b01      	cmp	r3, #1
 800179a:	d10c      	bne.n	80017b6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a0:	f043 0210 	orr.w	r2, r3, #16
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	22a0      	movs	r2, #160	; 0xa0
 80017ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e008      	b.n	80017c8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_FMAC_FilterConfig>:
  * @param  pConfig pointer to a FMAC_FilterConfigTypeDef structure that
  *         contains the FMAC configuration information.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterConfig(FMAC_HandleTypeDef *hfmac, FMAC_FilterConfigTypeDef *pConfig)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
  return (FMAC_FilterConfig(hfmac, pConfig, PRELOAD_ACCESS_POLLING));
 80017e4:	2201      	movs	r2, #1
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f9ef 	bl	8001bcc <FMAC_FilterConfig>
 80017ee:	4603      	mov	r3, r0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_FMAC_FilterPreload>:
  *         all these calls), an error will be returned.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterPreload(FMAC_HandleTypeDef *hfmac, int16_t *pInput, uint8_t InputSize,
                                         int16_t *pOutput, uint8_t OutputSize)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	71fb      	strb	r3, [r7, #7]
  return (FMAC_FilterPreload(hfmac, pInput, InputSize, pOutput, OutputSize, PRELOAD_ACCESS_POLLING));
 8001808:	79fa      	ldrb	r2, [r7, #7]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	7e3b      	ldrb	r3, [r7, #24]
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fb14 	bl	8001e44 <FMAC_FilterPreload>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_FMAC_FilterStart>:
  *         an external IP to empty the output buffer.
  * @param  pOutputSize pointer to the size of the output buffer. The number of read data will be written here.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterStart(FMAC_HandleTypeDef *hfmac, int16_t *pOutput, uint16_t *pOutputSize)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  uint32_t tmpcr = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	da01      	bge.n	8001844 <HAL_FMAC_FilterStart+0x1e>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e054      	b.n	80018ee <HAL_FMAC_FilterStart+0xc8>
  }

  /* Check that a valid configuration was done previously */
  if (hfmac->FilterParam == 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_FMAC_FilterStart+0x2a>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e04e      	b.n	80018ee <HAL_FMAC_FilterStart+0xc8>
  }

  /* Check handle state is ready */
  if (hfmac->State == HAL_FMAC_STATE_READY)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b20      	cmp	r3, #32
 800185a:	d145      	bne.n	80018e8 <HAL_FMAC_FilterStart+0xc2>
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_BUSY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2224      	movs	r2, #36	; 0x24
 8001860:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* CR: Configure the input access (error interruptions enabled only for IT or DMA) */
    if (hfmac->InputAccess == FMAC_BUFFER_ACCESS_DMA)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	7a1b      	ldrb	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d104      	bne.n	8001876 <HAL_FMAC_FilterStart+0x50>
    {
      tmpcr |= FMAC_DMA_WEN;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e007      	b.n	8001886 <HAL_FMAC_FilterStart+0x60>
    }
    else if (hfmac->InputAccess == FMAC_BUFFER_ACCESS_IT)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	7a1b      	ldrb	r3, [r3, #8]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d103      	bne.n	8001886 <HAL_FMAC_FilterStart+0x60>
    {
      tmpcr |= FMAC_IT_WIEN;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	617b      	str	r3, [r7, #20]
    {
      /* nothing to do */
    }

    /* CR: Configure the output access (error interruptions enabled only for IT or DMA) */
    if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_DMA)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	7a5b      	ldrb	r3, [r3, #9]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d104      	bne.n	8001898 <HAL_FMAC_FilterStart+0x72>
    {
      tmpcr |= FMAC_DMA_REN;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e007      	b.n	80018a8 <HAL_FMAC_FilterStart+0x82>
    }
    else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_IT)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	7a5b      	ldrb	r3, [r3, #9]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d103      	bne.n	80018a8 <HAL_FMAC_FilterStart+0x82>
    {
      tmpcr |= FMAC_IT_RIEN;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
    {
      /* nothing to do */
    }

    /* CR: Write the configuration */
    MODIFY_REG(hfmac->Instance->CR, \
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	6979      	ldr	r1, [r7, #20]
 80018bc:	430b      	orrs	r3, r1
 80018be:	6113      	str	r3, [r2, #16]
               FMAC_IT_RIEN | FMAC_IT_WIEN | FMAC_DMA_REN | FMAC_CR_DMAWEN, \
               tmpcr);

    /* Register the new output buffer */
    status = FMAC_ConfigFilterOutputBufferUpdateState(hfmac, pOutput, pOutputSize);
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	68b9      	ldr	r1, [r7, #8]
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 fc1d 	bl	8002104 <FMAC_ConfigFilterOutputBufferUpdateState>
 80018ca:	4603      	mov	r3, r0
 80018cc:	74fb      	strb	r3, [r7, #19]

    if (status == HAL_OK)
 80018ce:	7cfb      	ldrb	r3, [r7, #19]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d104      	bne.n	80018de <HAL_FMAC_FilterStart+0xb8>
    {
      /* PARAM: Start the filter ( this can generate interrupts before the end of the HAL_FMAC_FilterStart ) */
      WRITE_REG(hfmac->Instance->PARAM, (uint32_t)(hfmac->FilterParam));
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	6852      	ldr	r2, [r2, #4]
 80018dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset the busy flag (do not overwrite the possible write and read flag) */
    hfmac->State = HAL_FMAC_STATE_READY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80018e6:	e001      	b.n	80018ec <HAL_FMAC_FilterStart+0xc6>
  }
  else
  {
    status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 80018ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_FMAC_ErrorCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_ErrorCallback(FMAC_HandleTypeDef *hfmac)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_ErrorCallback can be implemented in the user file.
   */
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <HAL_FMAC_GetDataCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_GetDataCallback(FMAC_HandleTypeDef *hfmac)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_GetDataCallback can be implemented in the user file.
   */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_FMAC_HalfOutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_HalfOutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_HalfOutputDataReadyCallback can be implemented in the user file.
   */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HAL_FMAC_OutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_OutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_OutputDataReadyCallback can be implemented in the user file.
   */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_FMAC_FilterConfigCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_FilterConfigCallback(FMAC_HandleTypeDef *hfmac)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_FilterConfigCallback can be implemented in the user file.
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_FMAC_FilterPreloadCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_FilterPreloadCallback(FMAC_HandleTypeDef *hfmac)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_FilterPreloadCallback can be implemented in the user file.
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <HAL_FMAC_IRQHandler>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
void HAL_FMAC_IRQHandler(FMAC_HandleTypeDef *hfmac)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  uint32_t itsource;

  /* Check if the read interrupt is enabled and if Y buffer empty flag isn't set */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_RIEN);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_YEMPTY) == 0U) && (itsource != 0U))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d022      	beq.n	80019d6 <HAL_FMAC_IRQHandler+0x68>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01f      	beq.n	80019d6 <HAL_FMAC_IRQHandler+0x68>
  {
    /* Read some data if possible (Y size is used as a pseudo timeout in order
       to not get stuck too long under IT if FMAC keeps on processing input
       data reloaded via DMA for instance). */
    if (hfmac->pOutput != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00a      	beq.n	80019b4 <HAL_FMAC_IRQHandler+0x46>
    {
      FMAC_ReadDataIncrementPtr(hfmac, (uint16_t)FMAC_GET_Y_SIZE(hfmac));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fc12 	bl	80021d8 <FMAC_ReadDataIncrementPtr>
    }

    /* Indicate that data is ready to be read */
    if ((hfmac->pOutput == NULL) || (hfmac->OutputCurrentSize == *(hfmac->pOutputSize)))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_FMAC_IRQHandler+0x5c>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	8b9a      	ldrh	r2, [r3, #28]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d105      	bne.n	80019d6 <HAL_FMAC_IRQHandler+0x68>
    {
      /* Reset the pointers to indicate new data will be needed */
      FMAC_ResetOutputStateAndDataPointers(hfmac);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f8e6 	bl	8001b9c <FMAC_ResetOutputStateAndDataPointers>

      /* Call the output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->OutputDataReadyCallback(hfmac);
#else
      HAL_FMAC_OutputDataReadyCallback(hfmac);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ffae 	bl	8001932 <HAL_FMAC_OutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
    }
  }

  /* Check if the write interrupt is enabled and if X1 buffer full flag isn't set */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_WIEN);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_X1FULL) == 0U) && (itsource != 0U))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d022      	beq.n	8001a36 <HAL_FMAC_IRQHandler+0xc8>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d01f      	beq.n	8001a36 <HAL_FMAC_IRQHandler+0xc8>
  {
    /* Write some data if possible (X1 size is used as a pseudo timeout in order
       to not get stuck too long under IT if FMAC keep on processing input
       data whereas its output emptied via DMA for instance). */
    if (hfmac->pInput != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_FMAC_IRQHandler+0xa6>
    {
      FMAC_WriteDataIncrementPtr(hfmac, (uint16_t)FMAC_GET_X1_SIZE(hfmac));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 fc74 	bl	80022fc <FMAC_WriteDataIncrementPtr>
    }

    /* Indicate that new data will be needed */
    if ((hfmac->pInput == NULL) || (hfmac->InputCurrentSize == *(hfmac->pInputSize)))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_FMAC_IRQHandler+0xbc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	8a1a      	ldrh	r2, [r3, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d105      	bne.n	8001a36 <HAL_FMAC_IRQHandler+0xc8>
    {
      /* Reset the pointers to indicate new data will be needed */
      FMAC_ResetInputStateAndDataPointers(hfmac);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f89f 	bl	8001b6e <FMAC_ResetInputStateAndDataPointers>

      /* Call the get data callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->GetDataCallback(hfmac);
#else
      HAL_FMAC_GetDataCallback(hfmac);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff6a 	bl	800190a <HAL_FMAC_GetDataCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
    }
  }

  /* Check if the overflow error interrupt is enabled and if overflow error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_OVFLIEN);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_OVFL) != 0U) && (itsource != 0U))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a50:	d101      	bne.n	8001a56 <HAL_FMAC_IRQHandler+0xe8>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_FMAC_IRQHandler+0xea>
 8001a56:	2300      	movs	r3, #0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_FMAC_IRQHandler+0x100>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_FMAC_IRQHandler+0x100>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_OVFL;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a66:	f043 0204 	orr.w	r2, r3, #4
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Check if the underflow error interrupt is enabled and if underflow error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_UNFLIEN);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_UNFL) != 0U) && (itsource != 0U))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a88:	d101      	bne.n	8001a8e <HAL_FMAC_IRQHandler+0x120>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_FMAC_IRQHandler+0x122>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_FMAC_IRQHandler+0x138>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_FMAC_IRQHandler+0x138>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_UNFL;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	f043 0202 	orr.w	r2, r3, #2
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Check if the saturation error interrupt is enabled and if saturation error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_SATIEN);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_SAT) != 0U) && (itsource != 0U))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac0:	d101      	bne.n	8001ac6 <HAL_FMAC_IRQHandler+0x158>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_FMAC_IRQHandler+0x15a>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_FMAC_IRQHandler+0x170>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_FMAC_IRQHandler+0x170>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_SAT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Call the error callback if an error occurred */
  if (hfmac->ErrorCode != HAL_FMAC_ERROR_NONE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_FMAC_IRQHandler+0x17e>
  {
    /* Call the error callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
    hfmac->ErrorCallback(hfmac);
#else
    HAL_FMAC_ErrorCallback(hfmac);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff05 	bl	80018f6 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }
}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001afc:	f7ff f82a 	bl	8000b54 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b10:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8001b12:	e00f      	b.n	8001b34 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8001b14:	f7ff f81e 	bl	8000b54 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b22:	d907      	bls.n	8001b34 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e00a      	b.n	8001b4a <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1e8      	bne.n	8001b14 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f807 	bl	8001b6e <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f81b 	bl	8001b9c <FMAC_ResetOutputStateAndDataPointers>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <FMAC_FilterConfig>:
  * @param  PreloadAccess access mode used for the preload (polling or DMA).
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_FilterConfig(FMAC_HandleTypeDef *hfmac, FMAC_FilterConfigTypeDef *pConfig,
                                           uint8_t PreloadAccess)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMAC_PARAM_P(pConfig->Filter, pConfig->P));
  assert_param(IS_FMAC_PARAM_Q(pConfig->Filter, pConfig->Q));
  assert_param(IS_FMAC_PARAM_R(pConfig->Filter, pConfig->R));

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	da01      	bge.n	8001be8 <FMAC_FilterConfig+0x1c>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e124      	b.n	8001e32 <FMAC_FilterConfig+0x266>
  }

  /* Check handle state is ready */
  if (hfmac->State != HAL_FMAC_STATE_READY)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	d001      	beq.n	8001bf8 <FMAC_FilterConfig+0x2c>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e11c      	b.n	8001e32 <FMAC_FilterConfig+0x266>
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_BUSY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c00:	f7fe ffa8 	bl	8000b54 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

  /* Indicate that there is no valid configuration done */
  hfmac->FilterParam = 0U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	605a      	str	r2, [r3, #4]

  /* FMAC_X1BUFCFG: Configure the input buffer within the internal memory if required */
  if (pConfig->InputBufferSize != 0U)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	785b      	ldrb	r3, [r3, #1]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d010      	beq.n	8001c36 <FMAC_FilterConfig+0x6a>
  {
    MODIFY_REG(hfmac->Instance->X1BUFCFG,                                                                   \
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0c1b      	lsrs	r3, r3, #16
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	4611      	mov	r1, r2
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	7852      	ldrb	r2, [r2, #1]
 8001c28:	0212      	lsls	r2, r2, #8
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	4311      	orrs	r1, r2
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	6013      	str	r3, [r2, #0]
                ((((uint32_t)(pConfig->InputBufferSize))  << FMAC_X1BUFCFG_X1_BUF_SIZE_Pos) & \
                 FMAC_X1BUFCFG_X1_BUF_SIZE)));
  }

  /* FMAC_X1BUFCFG: Configure the input threshold if valid when compared to the configured X1 size */
  if (pConfig->InputThreshold != FMAC_THRESHOLD_NO_VALUE)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3e:	d00c      	beq.n	8001c5a <FMAC_FilterConfig+0x8e>
  {
    /* Check the parameter */
    assert_param(IS_FMAC_THRESHOLD_APPLICABLE(FMAC_GET_X1_SIZE(hfmac), pConfig->InputThreshold, pConfig->InputAccess));

    MODIFY_REG(hfmac->Instance->X1BUFCFG, \
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
               FMAC_X1BUFCFG_FULL_WM,     \
               ((pConfig->InputThreshold) & FMAC_X1BUFCFG_FULL_WM));
  }

  /* FMAC_X2BUFCFG: Configure the coefficient buffer within the internal memory */
  if (pConfig->CoeffBufferSize != 0U)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	7a5b      	ldrb	r3, [r3, #9]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d010      	beq.n	8001c84 <FMAC_FilterConfig+0xb8>
  {
    MODIFY_REG(hfmac->Instance->X2BUFCFG,                                                                   \
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	7a12      	ldrb	r2, [r2, #8]
 8001c70:	4611      	mov	r1, r2
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	7a52      	ldrb	r2, [r2, #9]
 8001c76:	0212      	lsls	r2, r2, #8
 8001c78:	b292      	uxth	r2, r2
 8001c7a:	4311      	orrs	r1, r2
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	6053      	str	r3, [r2, #4]
                ((((uint32_t)(pConfig->CoeffBufferSize))  << FMAC_X2BUFCFG_X2_BUF_SIZE_Pos) &\
                 FMAC_X2BUFCFG_X2_BUF_SIZE)));
  }

  /* FMAC_YBUFCFG: Configure the output buffer within the internal memory if required */
  if (pConfig->OutputBufferSize != 0U)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	7adb      	ldrb	r3, [r3, #11]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d010      	beq.n	8001cae <FMAC_FilterConfig+0xe2>
  {
    MODIFY_REG(hfmac->Instance->YBUFCFG,                                                                    \
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	7a92      	ldrb	r2, [r2, #10]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	7ad2      	ldrb	r2, [r2, #11]
 8001ca0:	0212      	lsls	r2, r2, #8
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	430b      	orrs	r3, r1
 8001cac:	6093      	str	r3, [r2, #8]
               (((((uint32_t)(pConfig->OutputBaseAddress)) << FMAC_YBUFCFG_Y_BASE_Pos)     & FMAC_YBUFCFG_Y_BASE) |    \
                ((((uint32_t)(pConfig->OutputBufferSize))  << FMAC_YBUFCFG_Y_BUF_SIZE_Pos) & FMAC_YBUFCFG_Y_BUF_SIZE)));
  }

  /* FMAC_YBUFCFG: Configure the output threshold if valid when compared to the configured Y size */
  if (pConfig->OutputThreshold != FMAC_THRESHOLD_NO_VALUE)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb6:	d00c      	beq.n	8001cd2 <FMAC_FilterConfig+0x106>
  {
    /* Check the parameter */
    assert_param(IS_FMAC_THRESHOLD_APPLICABLE(FMAC_GET_Y_SIZE(hfmac), pConfig->OutputThreshold, pConfig->OutputAccess));

    MODIFY_REG(hfmac->Instance->YBUFCFG, \
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	609a      	str	r2, [r3, #8]
               FMAC_YBUFCFG_EMPTY_WM,    \
               ((pConfig->OutputThreshold) & FMAC_YBUFCFG_EMPTY_WM));
  }

  /* FMAC_CR: Configure the clip feature */
  tmpcr = pConfig->Clip & FMAC_CR_CLIPEN;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cda:	617b      	str	r3, [r7, #20]

  /* FMAC_CR: If IT or DMA will be used, enable error interrupts.
    * Being more a debugging feature, FMAC_CR_SATIEN isn't enabled by default. */
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	7f5b      	ldrb	r3, [r3, #29]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d00b      	beq.n	8001cfc <FMAC_FilterConfig+0x130>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	7f5b      	ldrb	r3, [r3, #29]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d007      	beq.n	8001cfc <FMAC_FilterConfig+0x130>
      (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_DMA) || (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_IT))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	7f9b      	ldrb	r3, [r3, #30]
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d003      	beq.n	8001cfc <FMAC_FilterConfig+0x130>
      (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_DMA) || (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_IT))
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	7f9b      	ldrb	r3, [r3, #30]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d103      	bne.n	8001d04 <FMAC_FilterConfig+0x138>
  {
    tmpcr |= FMAC_IT_UNFLIEN | FMAC_IT_OVFLIEN;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f043 030c 	orr.w	r3, r3, #12
 8001d02:	617b      	str	r3, [r7, #20]
  }

  /* FMAC_CR: write the value */
  WRITE_REG(hfmac->Instance->CR, tmpcr);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	611a      	str	r2, [r3, #16]

  /* Save the input/output accesses in order to configure RIEN, WIEN, DMAREN and DMAWEN during filter start */
  hfmac->InputAccess = pConfig->InputAccess;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	7f5a      	ldrb	r2, [r3, #29]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	721a      	strb	r2, [r3, #8]
  hfmac->OutputAccess = pConfig->OutputAccess;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	7f9a      	ldrb	r2, [r3, #30]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	725a      	strb	r2, [r3, #9]
  assert_param(((pConfig->Filter == FMAC_FUNC_CONVO_FIR) && (x2size >= pConfig->P)) || \
               ((pConfig->Filter == FMAC_FUNC_IIR_DIRECT_FORM_1) && \
                (x2size >= ((uint32_t)pConfig->P + (uint32_t)pConfig->Q))));

  /* Build the PARAM value that will be used when starting the filter */
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((((uint32_t)(pConfig->P)) << FMAC_PARAM_P_Pos) & FMAC_PARAM_P) | \
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8001d26:	431a      	orrs	r2, r3
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	b29b      	uxth	r3, r3
                        ((((uint32_t)(pConfig->P)) << FMAC_PARAM_P_Pos) & FMAC_PARAM_P) | \
 8001d32:	431a      	orrs	r2, r3
                        ((((uint32_t)(pConfig->R)) << FMAC_PARAM_R_Pos) & FMAC_PARAM_R));
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001d3a:	041b      	lsls	r3, r3, #16
 8001d3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	605a      	str	r2, [r3, #4]

  /* Initialize the coefficient buffer if required (pCoeffA for FIR only) */
  if ((pConfig->pCoeffB != NULL) && (pConfig->CoeffBSize != 0U))
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d06a      	beq.n	8001e28 <FMAC_FilterConfig+0x25c>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	7f1b      	ldrb	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d066      	beq.n	8001e28 <FMAC_FilterConfig+0x25c>
                 ((pConfig->Filter == FMAC_FUNC_IIR_DIRECT_FORM_1) &&
                  (pConfig->pCoeffA != NULL) && (pConfig->CoeffASize != 0U) &&
                  (pConfig->CoeffASize >= pConfig->Q)));

    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM,                      \
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	7f1b      	ldrb	r3, [r3, #28]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	7d1b      	ldrb	r3, [r3, #20]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	431a      	orrs	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 4202 	orr.w	r2, r2, #2181038080	; 0x82000000
 8001d70:	60da      	str	r2, [r3, #12]
              (((uint32_t)(pConfig->CoeffBSize) << FMAC_PARAM_P_Pos) | \
               ((uint32_t)(pConfig->CoeffASize) << FMAC_PARAM_Q_Pos) | \
               FMAC_FUNC_LOAD_X2 | FMAC_PARAM_START));

    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d133      	bne.n	8001de0 <FMAC_FilterConfig+0x214>
    {
      /* Load the buffer into the internal memory */
      FMAC_WritePreloadDataIncrementPtr(hfmac, &(pConfig->pCoeffB), pConfig->CoeffBSize);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f103 0118 	add.w	r1, r3, #24
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	7f1b      	ldrb	r3, [r3, #28]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f977 	bl	8002078 <FMAC_WritePreloadDataIncrementPtr>

      /* Load pCoeffA if needed */
      if ((pConfig->pCoeffA != NULL) && (pConfig->CoeffASize != 0U))
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00c      	beq.n	8001dac <FMAC_FilterConfig+0x1e0>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	7d1b      	ldrb	r3, [r3, #20]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <FMAC_FilterConfig+0x1e0>
      {
        /* Load the buffer into the internal memory */
        FMAC_WritePreloadDataIncrementPtr(hfmac, &(pConfig->pCoeffA), pConfig->CoeffASize);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f103 0110 	add.w	r1, r3, #16
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	7d1b      	ldrb	r3, [r3, #20]
 8001da4:	461a      	mov	r2, r3
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f966 	bl	8002078 <FMAC_WritePreloadDataIncrementPtr>
      }

      /* Wait for the end of the writing */
      if (FMAC_WaitOnStartUntilTimeout(hfmac, tickstart, HAL_FMAC_TIMEOUT_VALUE) != HAL_OK)
 8001dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db0:	6939      	ldr	r1, [r7, #16]
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 f985 	bl	80020c2 <FMAC_WaitOnStartUntilTimeout>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00b      	beq.n	8001dd6 <FMAC_FilterConfig+0x20a>
      {
        hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34
        hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	22a0      	movs	r2, #160	; 0xa0
 8001dce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e02d      	b.n	8001e32 <FMAC_FilterConfig+0x266>
      }

      /* Change the FMAC state */
      hfmac->State = HAL_FMAC_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8001dde:	e027      	b.n	8001e30 <FMAC_FilterConfig+0x264>
    }
    else
    {
      hfmac->pInput = pConfig->pCoeffA;
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = pConfig->CoeffASize;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	7d1b      	ldrb	r3, [r3, #20]
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	821a      	strh	r2, [r3, #16]

      /* Set the FMAC DMA transfer complete callback */
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	2200      	movs	r2, #0
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <FMAC_FilterConfig+0x270>)
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <FMAC_FilterConfig+0x274>)
 8001e08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pConfig->pCoeffB, (uint32_t)&hfmac->Instance->WDATA,
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4619      	mov	r1, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3318      	adds	r3, #24
 8001e1a:	461a      	mov	r2, r3
                               pConfig->CoeffBSize));
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	7f1b      	ldrb	r3, [r3, #28]
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pConfig->pCoeffB, (uint32_t)&hfmac->Instance->WDATA,
 8001e20:	f7ff fad0 	bl	80013c4 <HAL_DMA_Start_IT>
 8001e24:	4603      	mov	r3, r0
 8001e26:	e004      	b.n	8001e32 <FMAC_FilterConfig+0x266>
    }
  }
  else
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	0800245d 	.word	0x0800245d
 8001e40:	08002619 	.word	0x08002619

08001e44 <FMAC_FilterPreload>:
  *         all these calls), an error will be returned.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_FilterPreload(FMAC_HandleTypeDef *hfmac, int16_t *pInput, uint8_t InputSize,
                                            int16_t *pOutput, uint8_t OutputSize, uint8_t PreloadAccess)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da01      	bge.n	8001e62 <FMAC_FilterPreload+0x1e>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e102      	b.n	8002068 <FMAC_FilterPreload+0x224>
  }

  /* Check that a valid configuration was done previously */
  if (hfmac->FilterParam == 0U)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <FMAC_FilterPreload+0x2a>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0fc      	b.n	8002068 <FMAC_FilterPreload+0x224>
  }

  /* Check the preload input buffers isn't too big */
  if ((InputSize > FMAC_GET_X1_SIZE(hfmac)) && (pInput != NULL))
 8001e6e:	79fa      	ldrb	r2, [r7, #7]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d904      	bls.n	8001e88 <FMAC_FilterPreload+0x44>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <FMAC_FilterPreload+0x44>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0ef      	b.n	8002068 <FMAC_FilterPreload+0x224>
  }

  /* Check the preload output buffer isn't too big */
  if ((OutputSize > FMAC_GET_Y_SIZE(hfmac)) && (pOutput != NULL))
 8001e88:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d904      	bls.n	8001ea4 <FMAC_FilterPreload+0x60>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <FMAC_FilterPreload+0x60>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0e1      	b.n	8002068 <FMAC_FilterPreload+0x224>
  }

  /* Check handle state is ready */
  if (hfmac->State != HAL_FMAC_STATE_READY)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b20      	cmp	r3, #32
 8001eae:	d001      	beq.n	8001eb4 <FMAC_FilterPreload+0x70>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0d9      	b.n	8002068 <FMAC_FilterPreload+0x224>
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_BUSY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2224      	movs	r2, #36	; 0x24
 8001eb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ebc:	f7fe fe4a 	bl	8000b54 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

  /* Preload the input buffer if required */
  if ((pInput != NULL) && (InputSize != 0U))
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d049      	beq.n	8001f5c <FMAC_FilterPreload+0x118>
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d046      	beq.n	8001f5c <FMAC_FilterPreload+0x118>
  {
    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM, \
 8001ece:	79fa      	ldrb	r2, [r7, #7]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 4201 	orr.w	r2, r2, #2164260864	; 0x81000000
 8001ed8:	60da      	str	r2, [r3, #12]
              (((uint32_t)InputSize << FMAC_PARAM_P_Pos) | FMAC_FUNC_LOAD_X1 | FMAC_PARAM_START));

    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8001eda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d11b      	bne.n	8001f1a <FMAC_FilterPreload+0xd6>
    {
      /* Load the buffer into the internal memory */
      FMAC_WritePreloadDataIncrementPtr(hfmac, &pInput, InputSize);
 8001ee2:	79fa      	ldrb	r2, [r7, #7]
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	4619      	mov	r1, r3
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f8c4 	bl	8002078 <FMAC_WritePreloadDataIncrementPtr>

      /* Wait for the end of the writing */
      if (FMAC_WaitOnStartUntilTimeout(hfmac, tickstart, HAL_FMAC_TIMEOUT_VALUE) != HAL_OK)
 8001ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ef4:	6939      	ldr	r1, [r7, #16]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f8e3 	bl	80020c2 <FMAC_WaitOnStartUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d02c      	beq.n	8001f5c <FMAC_FilterPreload+0x118>
      {
        hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
        hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	22a0      	movs	r2, #160	; 0xa0
 8001f12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0a6      	b.n	8002068 <FMAC_FilterPreload+0x224>
      }
    }
    else
    {
      hfmac->pInput = pOutput;
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = OutputSize;
 8001f20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	821a      	strh	r2, [r3, #16]

      /* Set the FMAC DMA transfer complete callback */
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	2200      	movs	r2, #0
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterPreload;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <FMAC_FilterPreload+0x22c>)
 8001f38:	62da      	str	r2, [r3, #44]	; 0x2c
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <FMAC_FilterPreload+0x230>)
 8001f40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pInput, (uint32_t)&hfmac->Instance->WDATA, InputSize));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3318      	adds	r3, #24
 8001f50:	461a      	mov	r2, r3
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f7ff fa36 	bl	80013c4 <HAL_DMA_Start_IT>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	e085      	b.n	8002068 <FMAC_FilterPreload+0x224>
    }
  }

  /* Preload the output buffer if required */
  if ((pOutput != NULL) && (OutputSize != 0U))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d04a      	beq.n	8001ff8 <FMAC_FilterPreload+0x1b4>
 8001f62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d046      	beq.n	8001ff8 <FMAC_FilterPreload+0x1b4>
  {
    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM, \
 8001f6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 4203 	orr.w	r2, r2, #2197815296	; 0x83000000
 8001f76:	60da      	str	r2, [r3, #12]
              (((uint32_t)OutputSize << FMAC_PARAM_P_Pos) | FMAC_FUNC_LOAD_Y | FMAC_PARAM_START));

    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8001f78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d11b      	bne.n	8001fb8 <FMAC_FilterPreload+0x174>
    {
      /* Load the buffer into the internal memory */
      FMAC_WritePreloadDataIncrementPtr(hfmac, &pOutput, OutputSize);
 8001f80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f84:	463b      	mov	r3, r7
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f875 	bl	8002078 <FMAC_WritePreloadDataIncrementPtr>

      /* Wait for the end of the writing */
      if (FMAC_WaitOnStartUntilTimeout(hfmac, tickstart, HAL_FMAC_TIMEOUT_VALUE) != HAL_OK)
 8001f8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f92:	6939      	ldr	r1, [r7, #16]
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 f894 	bl	80020c2 <FMAC_WaitOnStartUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d02b      	beq.n	8001ff8 <FMAC_FilterPreload+0x1b4>
      {
        hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34
        hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	22a0      	movs	r2, #160	; 0xa0
 8001fb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e057      	b.n	8002068 <FMAC_FilterPreload+0x224>
      }
    }
    else
    {
      hfmac->pInput = NULL;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = 0U;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	821a      	strh	r2, [r3, #16]

      /* Set the FMAC DMA transfer complete callback */
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	2200      	movs	r2, #0
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterPreload;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <FMAC_FilterPreload+0x22c>)
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	4a26      	ldr	r2, [pc, #152]	; (8002074 <FMAC_FilterPreload+0x230>)
 8001fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pOutput, (uint32_t)&hfmac->Instance->WDATA, OutputSize));
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	3318      	adds	r3, #24
 8001fea:	461a      	mov	r2, r3
 8001fec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ff0:	f7ff f9e8 	bl	80013c4 <HAL_DMA_Start_IT>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	e037      	b.n	8002068 <FMAC_FilterPreload+0x224>
    }
  }

  /* Update the error codes */
  if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_OVFL))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002006:	d105      	bne.n	8002014 <FMAC_FilterPreload+0x1d0>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_OVFL;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_UNFL))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002022:	d105      	bne.n	8002030 <FMAC_FilterPreload+0x1ec>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_UNFL;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	f043 0202 	orr.w	r2, r3, #2
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_SAT))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203e:	d105      	bne.n	800204c <FMAC_FilterPreload+0x208>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_SAT;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Return function status */
  if (hfmac->ErrorCode == HAL_FMAC_ERROR_NONE)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <FMAC_FilterPreload+0x21e>
  {
    status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	75fb      	strb	r3, [r7, #23]
 8002060:	e001      	b.n	8002066 <FMAC_FilterPreload+0x222>
  }
  else
  {
    status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002066:	7dfb      	ldrb	r3, [r7, #23]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	08002529 	.word	0x08002529
 8002074:	08002619 	.word	0x08002619

08002078 <FMAC_WritePreloadDataIncrementPtr>:
  * @param  ppData pointer to pointer to the data buffer.
  * @param  Size size of the data buffer.
  * @retval None
  */
static void FMAC_WritePreloadDataIncrementPtr(FMAC_HandleTypeDef *hfmac, int16_t **ppData, uint8_t Size)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	4613      	mov	r3, r2
 8002084:	71fb      	strb	r3, [r7, #7]
  uint8_t index;

  /* Load the buffer into the internal memory */
  for (index = Size; index > 0U; index--)
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	75fb      	strb	r3, [r7, #23]
 800208a:	e010      	b.n	80020ae <FMAC_WritePreloadDataIncrementPtr+0x36>
  {
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(*ppData))) & FMAC_WDATA_WDATA));
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002094:	461a      	mov	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b292      	uxth	r2, r2
 800209c:	619a      	str	r2, [r3, #24]
    (*ppData)++;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1c9a      	adds	r2, r3, #2
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	601a      	str	r2, [r3, #0]
  for (index = Size; index > 0U; index--)
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1eb      	bne.n	800208c <FMAC_WritePreloadDataIncrementPtr+0x14>
  }
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <FMAC_WaitOnStartUntilTimeout>:
  * @param  Tickstart Tick start value.
  * @param  Timeout Timeout duration.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_WaitOnStartUntilTimeout(FMAC_HandleTypeDef *hfmac, uint32_t Tickstart, uint32_t Timeout)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  /* Wait until flag changes */
  while (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 80020ce:	e00f      	b.n	80020f0 <FMAC_WaitOnStartUntilTimeout+0x2e>
  {
    if ((HAL_GetTick() - Tickstart) > Timeout)
 80020d0:	f7fe fd40 	bl	8000b54 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d207      	bcs.n	80020f0 <FMAC_WaitOnStartUntilTimeout+0x2e>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e005      	b.n	80020fc <FMAC_WaitOnStartUntilTimeout+0x3a>
  while (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	dbea      	blt.n	80020d0 <FMAC_WaitOnStartUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <FMAC_ConfigFilterOutputBufferUpdateState>:
  *         of data read from FMAC).
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_ConfigFilterOutputBufferUpdateState(FMAC_HandleTypeDef *hfmac, int16_t *pOutput,
                                                                  uint16_t *pOutputSize)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  /* Reset the current size */
  hfmac->OutputCurrentSize = 0U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	839a      	strh	r2, [r3, #28]

  /* Check whether a valid pointer was provided */
  if ((pOutput == NULL) || (pOutputSize == NULL) || (*pOutputSize == 0U))
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <FMAC_ConfigFilterOutputBufferUpdateState+0x26>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <FMAC_ConfigFilterOutputBufferUpdateState+0x26>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <FMAC_ConfigFilterOutputBufferUpdateState+0x3c>
  {
    /* The user will have to provide a valid configuration later */
    hfmac->pOutput = NULL;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800213e:	e03f      	b.n	80021c0 <FMAC_ConfigFilterOutputBufferUpdateState+0xbc>
  }
  /* Handle the pointer depending on the input access */
  else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_DMA)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	7a5b      	ldrb	r3, [r3, #9]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d122      	bne.n	800218e <FMAC_ConfigFilterOutputBufferUpdateState+0x8a>
  {
    hfmac->pOutput = NULL;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_BUSY_RD;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2225      	movs	r2, #37	; 0x25
 8002158:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaOut->XferHalfCpltCallback = FMAC_DMAHalfOutputDataReady;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <FMAC_ConfigFilterOutputBufferUpdateState+0xc8>)
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
    hfmac->hdmaOut->XferCpltCallback = FMAC_DMAOutputDataReady;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <FMAC_ConfigFilterOutputBufferUpdateState+0xcc>)
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaOut->XferErrorCallback = FMAC_DMAError;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <FMAC_ConfigFilterOutputBufferUpdateState+0xd0>)
 8002172:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA stream managing FMAC output data read */
    return (HAL_DMA_Start_IT(hfmac->hdmaOut, (uint32_t)&hfmac->Instance->RDATA, (uint32_t)pOutput, *pOutputSize));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	331c      	adds	r3, #28
 800217e:	4619      	mov	r1, r3
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	f7ff f91d 	bl	80013c4 <HAL_DMA_Start_IT>
 800218a:	4603      	mov	r3, r0
 800218c:	e019      	b.n	80021c2 <FMAC_ConfigFilterOutputBufferUpdateState+0xbe>
  }
  else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_NONE)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	7a5b      	ldrb	r3, [r3, #9]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <FMAC_ConfigFilterOutputBufferUpdateState+0xa8>
  {
    hfmac->pOutput = NULL;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80021aa:	e009      	b.n	80021c0 <FMAC_ConfigFilterOutputBufferUpdateState+0xbc>
  }
  else
  {
    /* Update the output data information (polling, IT) */
    hfmac->pOutput = pOutput;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = pOutputSize;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_BUSY_RD;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2225      	movs	r2, #37	; 0x25
 80021bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	0800241d 	.word	0x0800241d
 80021d0:	08002439 	.word	0x08002439
 80021d4:	08002619 	.word	0x08002619

080021d8 <FMAC_ReadDataIncrementPtr>:
  * @param  MaxSizeToRead Maximum number of data to read (this serves as a timeout
  *         if FMAC continuously writes into the output buffer).
  * @retval None
  */
static void FMAC_ReadDataIncrementPtr(FMAC_HandleTypeDef *hfmac, uint16_t MaxSizeToRead)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
  uint16_t maxsize;
  uint16_t threshold;
  uint32_t tmpvalue;

  /* Check if there is data to read */
  if (READ_BIT(hfmac->Instance->SR, FMAC_SR_YEMPTY) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d17c      	bne.n	80022ec <FMAC_ReadDataIncrementPtr+0x114>
  {
    return;
  }

  /* Get the maximum index (no wait allowed, no overstepping of the output buffer) */
  if ((hfmac->OutputCurrentSize + MaxSizeToRead) > *(hfmac->pOutputSize))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8b9b      	ldrh	r3, [r3, #28]
 80021f6:	461a      	mov	r2, r3
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	4413      	add	r3, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6a12      	ldr	r2, [r2, #32]
 8002200:	8812      	ldrh	r2, [r2, #0]
 8002202:	4293      	cmp	r3, r2
 8002204:	dd04      	ble.n	8002210 <FMAC_ReadDataIncrementPtr+0x38>
  {
    maxsize = *(hfmac->pOutputSize);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	82fb      	strh	r3, [r7, #22]
 800220e:	e004      	b.n	800221a <FMAC_ReadDataIncrementPtr+0x42>
  }
  else
  {
    maxsize = hfmac->OutputCurrentSize + MaxSizeToRead;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	8b9a      	ldrh	r2, [r3, #28]
 8002214:	887b      	ldrh	r3, [r7, #2]
 8002216:	4413      	add	r3, r2
 8002218:	82fb      	strh	r3, [r7, #22]

  /* Read until there is no more room or no more data */
  do
  {
    /* If there is no more room, return */
    if (!(hfmac->OutputCurrentSize < maxsize))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	8b9b      	ldrh	r3, [r3, #28]
 800221e:	8afa      	ldrh	r2, [r7, #22]
 8002220:	429a      	cmp	r2, r3
 8002222:	d965      	bls.n	80022f0 <FMAC_ReadDataIncrementPtr+0x118>
    {
      return;
    }

    /* Read the available data */
    tmpvalue = ((READ_REG(hfmac->Instance->RDATA))& FMAC_RDATA_RDATA);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	b29b      	uxth	r3, r3
 800222c:	613b      	str	r3, [r7, #16]
    *(hfmac->pOutput) = (int16_t)tmpvalue;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	b212      	sxth	r2, r2
 8002236:	801a      	strh	r2, [r3, #0]
    hfmac->pOutput++;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	1c9a      	adds	r2, r3, #2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	619a      	str	r2, [r3, #24]
    hfmac->OutputCurrentSize++;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	8b9b      	ldrh	r3, [r3, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	839a      	strh	r2, [r3, #28]
  } while (READ_BIT(hfmac->Instance->SR, FMAC_SR_YEMPTY) == 0U);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0de      	beq.n	800221a <FMAC_ReadDataIncrementPtr+0x42>

  /* Y buffer empty flag has just be raised, read the threshold */
  threshold = (uint16_t)FMAC_GET_THRESHOLD_FROM_WM(FMAC_GET_Y_EMPTY_WM(hfmac)) - 1U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d015      	beq.n	8002296 <FMAC_ReadDataIncrementPtr+0xbe>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8002274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002278:	d00b      	beq.n	8002292 <FMAC_ReadDataIncrementPtr+0xba>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8002284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002288:	d101      	bne.n	800228e <FMAC_ReadDataIncrementPtr+0xb6>
 800228a:	2303      	movs	r3, #3
 800228c:	e004      	b.n	8002298 <FMAC_ReadDataIncrementPtr+0xc0>
 800228e:	2307      	movs	r3, #7
 8002290:	e002      	b.n	8002298 <FMAC_ReadDataIncrementPtr+0xc0>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <FMAC_ReadDataIncrementPtr+0xc0>
 8002296:	2300      	movs	r3, #0
 8002298:	81fb      	strh	r3, [r7, #14]

  /* Update the maximum size if needed (limited data available) */
  if ((hfmac->OutputCurrentSize + threshold) < maxsize)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	8b9b      	ldrh	r3, [r3, #28]
 800229e:	461a      	mov	r2, r3
 80022a0:	89fb      	ldrh	r3, [r7, #14]
 80022a2:	441a      	add	r2, r3
 80022a4:	8afb      	ldrh	r3, [r7, #22]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	da1a      	bge.n	80022e0 <FMAC_ReadDataIncrementPtr+0x108>
  {
    maxsize = hfmac->OutputCurrentSize + threshold;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	8b9a      	ldrh	r2, [r3, #28]
 80022ae:	89fb      	ldrh	r3, [r7, #14]
 80022b0:	4413      	add	r3, r2
 80022b2:	82fb      	strh	r3, [r7, #22]
  }

  /* Read the available data */
  while (hfmac->OutputCurrentSize < maxsize)
 80022b4:	e014      	b.n	80022e0 <FMAC_ReadDataIncrementPtr+0x108>
  {
    tmpvalue = ((READ_REG(hfmac->Instance->RDATA))& FMAC_RDATA_RDATA);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	613b      	str	r3, [r7, #16]
    *(hfmac->pOutput) = (int16_t)tmpvalue;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	b212      	sxth	r2, r2
 80022c8:	801a      	strh	r2, [r3, #0]
    hfmac->pOutput++;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	1c9a      	adds	r2, r3, #2
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
    hfmac->OutputCurrentSize++;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8b9b      	ldrh	r3, [r3, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	839a      	strh	r2, [r3, #28]
  while (hfmac->OutputCurrentSize < maxsize)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8b9b      	ldrh	r3, [r3, #28]
 80022e4:	8afa      	ldrh	r2, [r7, #22]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d8e5      	bhi.n	80022b6 <FMAC_ReadDataIncrementPtr+0xde>
 80022ea:	e002      	b.n	80022f2 <FMAC_ReadDataIncrementPtr+0x11a>
    return;
 80022ec:	bf00      	nop
 80022ee:	e000      	b.n	80022f2 <FMAC_ReadDataIncrementPtr+0x11a>
      return;
 80022f0:	bf00      	nop
  }
}
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <FMAC_WriteDataIncrementPtr>:
  * @param  MaxSizeToWrite Maximum number of data to write (this serves as a timeout
  *         if FMAC continuously empties the input buffer).
  * @retval None
  */
static void FMAC_WriteDataIncrementPtr(FMAC_HandleTypeDef *hfmac, uint16_t MaxSizeToWrite)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
  uint16_t maxsize;
  uint16_t threshold;

  /* Check if there is room in FMAC */
  if (READ_BIT(hfmac->Instance->SR, FMAC_SR_X1FULL) != 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d17a      	bne.n	800240c <FMAC_WriteDataIncrementPtr+0x110>
  {
    return;
  }

  /* Get the maximum index (no wait allowed, no overstepping of the output buffer) */
  if ((hfmac->InputCurrentSize + MaxSizeToWrite) > *(hfmac->pInputSize))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	8a1b      	ldrh	r3, [r3, #16]
 800231a:	461a      	mov	r2, r3
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	4413      	add	r3, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6952      	ldr	r2, [r2, #20]
 8002324:	8812      	ldrh	r2, [r2, #0]
 8002326:	4293      	cmp	r3, r2
 8002328:	dd04      	ble.n	8002334 <FMAC_WriteDataIncrementPtr+0x38>
  {
    maxsize = *(hfmac->pInputSize);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	81fb      	strh	r3, [r7, #14]
 8002332:	e004      	b.n	800233e <FMAC_WriteDataIncrementPtr+0x42>
  }
  else
  {
    maxsize = hfmac->InputCurrentSize + MaxSizeToWrite;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	8a1a      	ldrh	r2, [r3, #16]
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	4413      	add	r3, r2
 800233c:	81fb      	strh	r3, [r7, #14]

  /* Write until there is no more room or no more data */
  do
  {
    /* If there is no more room, return */
    if (!(hfmac->InputCurrentSize < maxsize))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	8a1b      	ldrh	r3, [r3, #16]
 8002342:	89fa      	ldrh	r2, [r7, #14]
 8002344:	429a      	cmp	r2, r3
 8002346:	d963      	bls.n	8002410 <FMAC_WriteDataIncrementPtr+0x114>
    {
      return;
    }

    /* Write the available data */
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(hfmac->pInput))) & FMAC_WDATA_WDATA));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002350:	461a      	mov	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b292      	uxth	r2, r2
 8002358:	619a      	str	r2, [r3, #24]
    hfmac->pInput++;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	1c9a      	adds	r2, r3, #2
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	60da      	str	r2, [r3, #12]
    hfmac->InputCurrentSize++;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	8a1b      	ldrh	r3, [r3, #16]
 8002368:	3301      	adds	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	821a      	strh	r2, [r3, #16]
  } while (READ_BIT(hfmac->Instance->SR, FMAC_SR_X1FULL) == 0U);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0df      	beq.n	800233e <FMAC_WriteDataIncrementPtr+0x42>

  /* X1 buffer full flag has just be raised, read the threshold */
  threshold = (uint16_t)FMAC_GET_THRESHOLD_FROM_WM(FMAC_GET_X1_FULL_WM(hfmac)) - 1U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <FMAC_WriteDataIncrementPtr+0xbc>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8002396:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800239a:	d00b      	beq.n	80023b4 <FMAC_WriteDataIncrementPtr+0xb8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80023a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023aa:	d101      	bne.n	80023b0 <FMAC_WriteDataIncrementPtr+0xb4>
 80023ac:	2303      	movs	r3, #3
 80023ae:	e004      	b.n	80023ba <FMAC_WriteDataIncrementPtr+0xbe>
 80023b0:	2307      	movs	r3, #7
 80023b2:	e002      	b.n	80023ba <FMAC_WriteDataIncrementPtr+0xbe>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <FMAC_WriteDataIncrementPtr+0xbe>
 80023b8:	2300      	movs	r3, #0
 80023ba:	81bb      	strh	r3, [r7, #12]

  /* Update the maximum size if needed (limited data available) */
  if ((hfmac->InputCurrentSize + threshold) < maxsize)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	8a1b      	ldrh	r3, [r3, #16]
 80023c0:	461a      	mov	r2, r3
 80023c2:	89bb      	ldrh	r3, [r7, #12]
 80023c4:	441a      	add	r2, r3
 80023c6:	89fb      	ldrh	r3, [r7, #14]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	da19      	bge.n	8002400 <FMAC_WriteDataIncrementPtr+0x104>
  {
    maxsize = hfmac->InputCurrentSize + threshold;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8a1a      	ldrh	r2, [r3, #16]
 80023d0:	89bb      	ldrh	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	81fb      	strh	r3, [r7, #14]
  }

  /* Write the available data */
  while (hfmac->InputCurrentSize < maxsize)
 80023d6:	e013      	b.n	8002400 <FMAC_WriteDataIncrementPtr+0x104>
  {
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(hfmac->pInput))) & FMAC_WDATA_WDATA));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b292      	uxth	r2, r2
 80023e8:	619a      	str	r2, [r3, #24]
    hfmac->pInput++;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	1c9a      	adds	r2, r3, #2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]
    hfmac->InputCurrentSize++;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8a1b      	ldrh	r3, [r3, #16]
 80023f8:	3301      	adds	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	821a      	strh	r2, [r3, #16]
  while (hfmac->InputCurrentSize < maxsize)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8a1b      	ldrh	r3, [r3, #16]
 8002404:	89fa      	ldrh	r2, [r7, #14]
 8002406:	429a      	cmp	r2, r3
 8002408:	d8e6      	bhi.n	80023d8 <FMAC_WriteDataIncrementPtr+0xdc>
 800240a:	e002      	b.n	8002412 <FMAC_WriteDataIncrementPtr+0x116>
    return;
 800240c:	bf00      	nop
 800240e:	e000      	b.n	8002412 <FMAC_WriteDataIncrementPtr+0x116>
      return;
 8002410:	bf00      	nop
  }
}
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <FMAC_DMAHalfOutputDataReady>:
  * @brief  DMA FMAC Output Data process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAHalfOutputDataReady(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	60fb      	str	r3, [r7, #12]

  /* Call half output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->HalfOutputDataReadyCallback(hfmac);
#else
  HAL_FMAC_HalfOutputDataReadyCallback(hfmac);
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff fa77 	bl	800191e <HAL_FMAC_HalfOutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <FMAC_DMAOutputDataReady>:
  * @brief  DMA FMAC Output Data process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAOutputDataReady(DMA_HandleTypeDef *hdma)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	60fb      	str	r3, [r7, #12]

  /* Reset the pointers to indicate new data will be needed */
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff fba8 	bl	8001b9c <FMAC_ResetOutputStateAndDataPointers>

  /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->OutputDataReadyCallback(hfmac);
#else
  HAL_FMAC_OutputDataReadyCallback(hfmac);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7ff fa70 	bl	8001932 <HAL_FMAC_OutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <FMAC_DMAFilterConfig>:
  * @brief  DMA FMAC Filter Configuration process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAFilterConfig(DMA_HandleTypeDef *hdma)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint8_t index;

  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	60bb      	str	r3, [r7, #8]

  /* If needed, write CoeffA and exit */
  if (hfmac->pInput != NULL)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d027      	beq.n	80024c2 <FMAC_DMAFilterConfig+0x66>
  {
    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	2200      	movs	r2, #0
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
    hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	4a28      	ldr	r2, [pc, #160]	; (8002520 <FMAC_DMAFilterConfig+0xc4>)
 8002480:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002486:	4a27      	ldr	r2, [pc, #156]	; (8002524 <FMAC_DMAFilterConfig+0xc8>)
 8002488:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA stream managing FMAC preload data write */
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	4619      	mov	r1, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	3318      	adds	r3, #24
 800249a:	461a      	mov	r2, r3
                         hfmac->InputCurrentSize) == HAL_OK)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	8a1b      	ldrh	r3, [r3, #16]
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 80024a0:	f7fe ff90 	bl	80013c4 <HAL_DMA_Start_IT>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <FMAC_DMAFilterConfig+0x5c>
    {
      hfmac->pInput = NULL;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2200      	movs	r2, #0
 80024ae:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = 0U;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2200      	movs	r2, #0
 80024b4:	821a      	strh	r2, [r3, #16]
      return;
 80024b6:	e02f      	b.n	8002518 <FMAC_DMAFilterConfig+0xbc>
    }

    /* If not exited, there was an error: set FMAC handle state to error */
    hfmac->State = HAL_FMAC_STATE_ERROR;
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	22e0      	movs	r2, #224	; 0xe0
 80024bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80024c0:	e021      	b.n	8002506 <FMAC_DMAFilterConfig+0xaa>
  }
  else
  {
    /* Wait for the end of the writing */
    for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	e007      	b.n	80024d8 <FMAC_DMAFilterConfig+0x7c>
    {
      if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) == 0U)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	da06      	bge.n	80024e0 <FMAC_DMAFilterConfig+0x84>
    for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2bff      	cmp	r3, #255	; 0xff
 80024dc:	d1f4      	bne.n	80024c8 <FMAC_DMAFilterConfig+0x6c>
 80024de:	e000      	b.n	80024e2 <FMAC_DMAFilterConfig+0x86>
      {
        break;
 80024e0:	bf00      	nop
      }
    }

    /* If 'START' is still set, there was a timeout: set FMAC handle state to timeout */
    if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	da04      	bge.n	80024f6 <FMAC_DMAFilterConfig+0x9a>
    {
      hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	22a0      	movs	r2, #160	; 0xa0
 80024f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80024f4:	e007      	b.n	8002506 <FMAC_DMAFilterConfig+0xaa>
    }
    else
    {
      /* Change the FMAC state */
      hfmac->State = HAL_FMAC_STATE_READY;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

      /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->FilterConfigCallback(hfmac);
#else
      HAL_FMAC_FilterConfigCallback(hfmac);
 80024fe:	68b8      	ldr	r0, [r7, #8]
 8002500:	f7ff fa21 	bl	8001946 <HAL_FMAC_FilterConfigCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
      return;
 8002504:	e008      	b.n	8002518 <FMAC_DMAFilterConfig+0xbc>
    }
  }

  /* If not exited, there was an error: set FMAC handle error code to DMA error */
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250a:	f043 0208 	orr.w	r2, r3, #8
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	635a      	str	r2, [r3, #52]	; 0x34

  /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->ErrorCallback(hfmac);
#else
  HAL_FMAC_ErrorCallback(hfmac);
 8002512:	68b8      	ldr	r0, [r7, #8]
 8002514:	f7ff f9ef 	bl	80018f6 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */

}
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	0800245d 	.word	0x0800245d
 8002524:	08002619 	.word	0x08002619

08002528 <FMAC_DMAFilterPreload>:
  * @brief  DMA FMAC Filter Configuration process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAFilterPreload(DMA_HandleTypeDef *hdma)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint8_t index;

  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	60bb      	str	r3, [r7, #8]

  /* Wait for the end of the X1 writing */
  for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e007      	b.n	800254c <FMAC_DMAFilterPreload+0x24>
  {
    if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) == 0U)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	da06      	bge.n	8002554 <FMAC_DMAFilterPreload+0x2c>
  for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	3301      	adds	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	2bff      	cmp	r3, #255	; 0xff
 8002550:	d1f4      	bne.n	800253c <FMAC_DMAFilterPreload+0x14>
 8002552:	e000      	b.n	8002556 <FMAC_DMAFilterPreload+0x2e>
    {
      break;
 8002554:	bf00      	nop
    }
  }

  /* If 'START' is still set, there was an error: set FMAC handle state to error */
  if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	da0a      	bge.n	8002576 <FMAC_DMAFilterPreload+0x4e>
  {
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	22a0      	movs	r2, #160	; 0xa0
 8002564:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	635a      	str	r2, [r3, #52]	; 0x34
 8002574:	e039      	b.n	80025ea <FMAC_DMAFilterPreload+0xc2>
  }
  /* If needed, preload Y buffer */
  else if ((hfmac->pInput != NULL) && (hfmac->InputCurrentSize != 0U))
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d035      	beq.n	80025ea <FMAC_DMAFilterPreload+0xc2>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	8a1b      	ldrh	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d031      	beq.n	80025ea <FMAC_DMAFilterPreload+0xc2>
  {
    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM, \
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	8a1b      	ldrh	r3, [r3, #16]
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 4203 	orr.w	r2, r2, #2197815296	; 0x83000000
 8002594:	60da      	str	r2, [r3, #12]
              (((uint32_t)(hfmac->InputCurrentSize) << FMAC_PARAM_P_Pos) | FMAC_FUNC_LOAD_Y | FMAC_PARAM_START));

    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	2200      	movs	r2, #0
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
    hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterPreload;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <FMAC_DMAFilterPreload+0xe8>)
 80025a4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <FMAC_DMAFilterPreload+0xec>)
 80025ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA stream managing FMAC preload data write */
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4619      	mov	r1, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3318      	adds	r3, #24
 80025be:	461a      	mov	r2, r3
                         hfmac->InputCurrentSize) == HAL_OK)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	8a1b      	ldrh	r3, [r3, #16]
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 80025c4:	f7fe fefe 	bl	80013c4 <HAL_DMA_Start_IT>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <FMAC_DMAFilterPreload+0xb4>
    {
      hfmac->pInput = NULL;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2200      	movs	r2, #0
 80025d2:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = 0U;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	821a      	strh	r2, [r3, #16]
      return;
 80025da:	e015      	b.n	8002608 <FMAC_DMAFilterPreload+0xe0>
    }

    /* If not exited, there was an error */
    hfmac->ErrorCode = HAL_FMAC_ERROR_DMA;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2208      	movs	r2, #8
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_ERROR;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	22e0      	movs	r2, #224	; 0xe0
 80025e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  else
  {
    /* nothing to do */
  }

  if (hfmac->ErrorCode == HAL_FMAC_ERROR_NONE)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <FMAC_DMAFilterPreload+0xda>
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_READY;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
    hfmac->FilterPreloadCallback(hfmac);
#else
    HAL_FMAC_FilterPreloadCallback(hfmac);
 80025fa:	68b8      	ldr	r0, [r7, #8]
 80025fc:	f7ff f9ad 	bl	800195a <HAL_FMAC_FilterPreloadCallback>
 8002600:	e002      	b.n	8002608 <FMAC_DMAFilterPreload+0xe0>
  {
    /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
    hfmac->ErrorCallback(hfmac);
#else
    HAL_FMAC_ErrorCallback(hfmac);
 8002602:	68b8      	ldr	r0, [r7, #8]
 8002604:	f7ff f977 	bl	80018f6 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }
}
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	08002529 	.word	0x08002529
 8002614:	08002619 	.word	0x08002619

08002618 <FMAC_DMAError>:
  * @brief  DMA FMAC communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	60fb      	str	r3, [r7, #12]

  /* Set FMAC handle state to error */
  hfmac->State = HAL_FMAC_STATE_ERROR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	22e0      	movs	r2, #224	; 0xe0
 800262a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Set FMAC handle error code to DMA error */
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002632:	f043 0208 	orr.w	r2, r3, #8
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->ErrorCallback(hfmac);
#else
  HAL_FMAC_ErrorCallback(hfmac);
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff f95b 	bl	80018f6 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002656:	e15a      	b.n	800290e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2101      	movs	r1, #1
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	4013      	ands	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 814c 	beq.w	8002908 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d005      	beq.n	8002688 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002684:	2b02      	cmp	r3, #2
 8002686:	d130      	bne.n	80026ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026be:	2201      	movs	r2, #1
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	f003 0201 	and.w	r2, r3, #1
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d017      	beq.n	8002726 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d123      	bne.n	800277a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	08da      	lsrs	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3208      	adds	r2, #8
 800273a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	220f      	movs	r2, #15
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	08da      	lsrs	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3208      	adds	r2, #8
 8002774:	6939      	ldr	r1, [r7, #16]
 8002776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0203 	and.w	r2, r3, #3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 80a6 	beq.w	8002908 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027bc:	4b5b      	ldr	r3, [pc, #364]	; (800292c <HAL_GPIO_Init+0x2e4>)
 80027be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c0:	4a5a      	ldr	r2, [pc, #360]	; (800292c <HAL_GPIO_Init+0x2e4>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6613      	str	r3, [r2, #96]	; 0x60
 80027c8:	4b58      	ldr	r3, [pc, #352]	; (800292c <HAL_GPIO_Init+0x2e4>)
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d4:	4a56      	ldr	r2, [pc, #344]	; (8002930 <HAL_GPIO_Init+0x2e8>)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	3302      	adds	r3, #2
 80027dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	220f      	movs	r2, #15
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027fe:	d01f      	beq.n	8002840 <HAL_GPIO_Init+0x1f8>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a4c      	ldr	r2, [pc, #304]	; (8002934 <HAL_GPIO_Init+0x2ec>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d019      	beq.n	800283c <HAL_GPIO_Init+0x1f4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a4b      	ldr	r2, [pc, #300]	; (8002938 <HAL_GPIO_Init+0x2f0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d013      	beq.n	8002838 <HAL_GPIO_Init+0x1f0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a4a      	ldr	r2, [pc, #296]	; (800293c <HAL_GPIO_Init+0x2f4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00d      	beq.n	8002834 <HAL_GPIO_Init+0x1ec>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a49      	ldr	r2, [pc, #292]	; (8002940 <HAL_GPIO_Init+0x2f8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <HAL_GPIO_Init+0x1e8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a48      	ldr	r2, [pc, #288]	; (8002944 <HAL_GPIO_Init+0x2fc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_GPIO_Init+0x1e4>
 8002828:	2305      	movs	r3, #5
 800282a:	e00a      	b.n	8002842 <HAL_GPIO_Init+0x1fa>
 800282c:	2306      	movs	r3, #6
 800282e:	e008      	b.n	8002842 <HAL_GPIO_Init+0x1fa>
 8002830:	2304      	movs	r3, #4
 8002832:	e006      	b.n	8002842 <HAL_GPIO_Init+0x1fa>
 8002834:	2303      	movs	r3, #3
 8002836:	e004      	b.n	8002842 <HAL_GPIO_Init+0x1fa>
 8002838:	2302      	movs	r3, #2
 800283a:	e002      	b.n	8002842 <HAL_GPIO_Init+0x1fa>
 800283c:	2301      	movs	r3, #1
 800283e:	e000      	b.n	8002842 <HAL_GPIO_Init+0x1fa>
 8002840:	2300      	movs	r3, #0
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	f002 0203 	and.w	r2, r2, #3
 8002848:	0092      	lsls	r2, r2, #2
 800284a:	4093      	lsls	r3, r2
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002852:	4937      	ldr	r1, [pc, #220]	; (8002930 <HAL_GPIO_Init+0x2e8>)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3302      	adds	r3, #2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002860:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_GPIO_Init+0x300>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002884:	4a30      	ldr	r2, [pc, #192]	; (8002948 <HAL_GPIO_Init+0x300>)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <HAL_GPIO_Init+0x300>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43db      	mvns	r3, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ae:	4a26      	ldr	r2, [pc, #152]	; (8002948 <HAL_GPIO_Init+0x300>)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_GPIO_Init+0x300>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028d8:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_GPIO_Init+0x300>)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028de:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <HAL_GPIO_Init+0x300>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002902:	4a11      	ldr	r2, [pc, #68]	; (8002948 <HAL_GPIO_Init+0x300>)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3301      	adds	r3, #1
 800290c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	f47f ae9d 	bne.w	8002658 <HAL_GPIO_Init+0x10>
  }
}
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	371c      	adds	r7, #28
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40021000 	.word	0x40021000
 8002930:	40010000 	.word	0x40010000
 8002934:	48000400 	.word	0x48000400
 8002938:	48000800 	.word	0x48000800
 800293c:	48000c00 	.word	0x48000c00
 8002940:	48001000 	.word	0x48001000
 8002944:	48001400 	.word	0x48001400
 8002948:	40010400 	.word	0x40010400

0800294c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]
 8002958:	4613      	mov	r3, r2
 800295a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800295c:	787b      	ldrb	r3, [r7, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002968:	e002      	b.n	8002970 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f806 	bl	80029ac <HAL_GPIO_EXTI_Callback>
  }
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d141      	bne.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029d2:	4b4b      	ldr	r3, [pc, #300]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029de:	d131      	bne.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029e0:	4b47      	ldr	r3, [pc, #284]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e6:	4a46      	ldr	r2, [pc, #280]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f0:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029f8:	4a41      	ldr	r2, [pc, #260]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a00:	4b40      	ldr	r3, [pc, #256]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2232      	movs	r2, #50	; 0x32
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	4a3f      	ldr	r2, [pc, #252]	; (8002b08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	0c9b      	lsrs	r3, r3, #18
 8002a12:	3301      	adds	r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a16:	e002      	b.n	8002a1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a1e:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2a:	d102      	bne.n	8002a32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f2      	bne.n	8002a18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a32:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3e:	d158      	bne.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e057      	b.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a44:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a4a:	4a2d      	ldr	r2, [pc, #180]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a54:	e04d      	b.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a5c:	d141      	bne.n	8002ae2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a5e:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d131      	bne.n	8002ad0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a72:	4a23      	ldr	r2, [pc, #140]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a84:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2232      	movs	r2, #50	; 0x32
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	0c9b      	lsrs	r3, r3, #18
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa2:	e002      	b.n	8002aaa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab6:	d102      	bne.n	8002abe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f2      	bne.n	8002aa4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d112      	bne.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e011      	b.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ae0:	e007      	b.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40007000 	.word	0x40007000
 8002b04:	2000022c 	.word	0x2000022c
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b1a:	6093      	str	r3, [r2, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40007000 	.word	0x40007000

08002b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e2fe      	b.n	800313c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d075      	beq.n	8002c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4a:	4b97      	ldr	r3, [pc, #604]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b54:	4b94      	ldr	r3, [pc, #592]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b0c      	cmp	r3, #12
 8002b62:	d102      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3e>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d002      	beq.n	8002b70 <HAL_RCC_OscConfig+0x44>
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d10b      	bne.n	8002b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	4b8d      	ldr	r3, [pc, #564]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d05b      	beq.n	8002c34 <HAL_RCC_OscConfig+0x108>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d157      	bne.n	8002c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e2d9      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x74>
 8002b92:	4b85      	ldr	r3, [pc, #532]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a84      	ldr	r2, [pc, #528]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e01d      	b.n	8002bdc <HAL_RCC_OscConfig+0xb0>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x98>
 8002baa:	4b7f      	ldr	r3, [pc, #508]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a7e      	ldr	r2, [pc, #504]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b7c      	ldr	r3, [pc, #496]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7b      	ldr	r2, [pc, #492]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0xb0>
 8002bc4:	4b78      	ldr	r3, [pc, #480]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a77      	ldr	r2, [pc, #476]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b75      	ldr	r3, [pc, #468]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a74      	ldr	r2, [pc, #464]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fd ffb6 	bl	8000b54 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fd ffb2 	bl	8000b54 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e29e      	b.n	800313c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfe:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0xc0>
 8002c0a:	e014      	b.n	8002c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fd ffa2 	bl	8000b54 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fd ff9e 	bl	8000b54 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e28a      	b.n	800313c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c26:	4b60      	ldr	r3, [pc, #384]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0xe8>
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d075      	beq.n	8002d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c42:	4b59      	ldr	r3, [pc, #356]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c4c:	4b56      	ldr	r3, [pc, #344]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_OscConfig+0x136>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_OscConfig+0x13c>
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d11f      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c68:	4b4f      	ldr	r3, [pc, #316]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_OscConfig+0x154>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e25d      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	4b49      	ldr	r3, [pc, #292]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	4946      	ldr	r1, [pc, #280]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c94:	4b45      	ldr	r3, [pc, #276]	; (8002dac <HAL_RCC_OscConfig+0x280>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd ff0f 	bl	8000abc <HAL_InitTick>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d043      	beq.n	8002d2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e249      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d023      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb0:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a3c      	ldr	r2, [pc, #240]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fd ff4a 	bl	8000b54 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc4:	f7fd ff46 	bl	8000b54 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e232      	b.n	800313c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cd6:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	061b      	lsls	r3, r3, #24
 8002cf0:	492d      	ldr	r1, [pc, #180]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
 8002cf6:	e01a      	b.n	8002d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf8:	4b2b      	ldr	r3, [pc, #172]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002cfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fd ff26 	bl	8000b54 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d0c:	f7fd ff22 	bl	8000b54 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e20e      	b.n	800313c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d1e:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x1e0>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d041      	beq.n	8002dbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01c      	beq.n	8002d7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d42:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d48:	4a17      	ldr	r2, [pc, #92]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fd feff 	bl	8000b54 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fd fefb 	bl	8000b54 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1e7      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0ef      	beq.n	8002d5a <HAL_RCC_OscConfig+0x22e>
 8002d7a:	e020      	b.n	8002dbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <HAL_RCC_OscConfig+0x27c>)
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fd fee2 	bl	8000b54 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d92:	e00d      	b.n	8002db0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d94:	f7fd fede 	bl	8000b54 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d906      	bls.n	8002db0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1ca      	b.n	800313c <HAL_RCC_OscConfig+0x610>
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	20000230 	.word	0x20000230
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002db0:	4b8c      	ldr	r3, [pc, #560]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1ea      	bne.n	8002d94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80a6 	beq.w	8002f18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dd0:	4b84      	ldr	r3, [pc, #528]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_OscConfig+0x2b4>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x2b6>
 8002de0:	2300      	movs	r3, #0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	4b7f      	ldr	r3, [pc, #508]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	4a7e      	ldr	r2, [pc, #504]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df0:	6593      	str	r3, [r2, #88]	; 0x58
 8002df2:	4b7c      	ldr	r3, [pc, #496]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e02:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <HAL_RCC_OscConfig+0x4bc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d118      	bne.n	8002e40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e0e:	4b76      	ldr	r3, [pc, #472]	; (8002fe8 <HAL_RCC_OscConfig+0x4bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a75      	ldr	r2, [pc, #468]	; (8002fe8 <HAL_RCC_OscConfig+0x4bc>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1a:	f7fd fe9b 	bl	8000b54 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e22:	f7fd fe97 	bl	8000b54 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e183      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e34:	4b6c      	ldr	r3, [pc, #432]	; (8002fe8 <HAL_RCC_OscConfig+0x4bc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d108      	bne.n	8002e5a <HAL_RCC_OscConfig+0x32e>
 8002e48:	4b66      	ldr	r3, [pc, #408]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	4a65      	ldr	r2, [pc, #404]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e58:	e024      	b.n	8002ea4 <HAL_RCC_OscConfig+0x378>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d110      	bne.n	8002e84 <HAL_RCC_OscConfig+0x358>
 8002e62:	4b60      	ldr	r3, [pc, #384]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	4a5e      	ldr	r2, [pc, #376]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e72:	4b5c      	ldr	r3, [pc, #368]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	4a5a      	ldr	r2, [pc, #360]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e82:	e00f      	b.n	8002ea4 <HAL_RCC_OscConfig+0x378>
 8002e84:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	4a56      	ldr	r2, [pc, #344]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	4a52      	ldr	r2, [pc, #328]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d016      	beq.n	8002eda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fd fe52 	bl	8000b54 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fd fe4e 	bl	8000b54 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e138      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eca:	4b46      	ldr	r3, [pc, #280]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ed      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x388>
 8002ed8:	e015      	b.n	8002f06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f7fd fe3b 	bl	8000b54 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fd fe37 	bl	8000b54 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e121      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ef8:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1ed      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f06:	7ffb      	ldrb	r3, [r7, #31]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0c:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	4a34      	ldr	r2, [pc, #208]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d03c      	beq.n	8002f9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01c      	beq.n	8002f66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f32:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fd fe0a 	bl	8000b54 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f44:	f7fd fe06 	bl	8000b54 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0f2      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f56:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ef      	beq.n	8002f44 <HAL_RCC_OscConfig+0x418>
 8002f64:	e01b      	b.n	8002f9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f66:	4b1f      	ldr	r3, [pc, #124]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f6c:	4a1d      	ldr	r2, [pc, #116]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f76:	f7fd fded 	bl	8000b54 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f7e:	f7fd fde9 	bl	8000b54 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e0d5      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ef      	bne.n	8002f7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80c9 	beq.w	800313a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	f000 8083 	beq.w	80030bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d15e      	bne.n	800307c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a08      	ldr	r2, [pc, #32]	; (8002fe4 <HAL_RCC_OscConfig+0x4b8>)
 8002fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fd fdc3 	bl	8000b54 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd0:	e00c      	b.n	8002fec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fd fdbf 	bl	8000b54 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d905      	bls.n	8002fec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e0ab      	b.n	800313c <HAL_RCC_OscConfig+0x610>
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fec:	4b55      	ldr	r3, [pc, #340]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ec      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff8:	4b52      	ldr	r3, [pc, #328]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	4b52      	ldr	r3, [pc, #328]	; (8003148 <HAL_RCC_OscConfig+0x61c>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6a11      	ldr	r1, [r2, #32]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003008:	3a01      	subs	r2, #1
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	4311      	orrs	r1, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003012:	0212      	lsls	r2, r2, #8
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800301a:	0852      	lsrs	r2, r2, #1
 800301c:	3a01      	subs	r2, #1
 800301e:	0552      	lsls	r2, r2, #21
 8003020:	4311      	orrs	r1, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003026:	0852      	lsrs	r2, r2, #1
 8003028:	3a01      	subs	r2, #1
 800302a:	0652      	lsls	r2, r2, #25
 800302c:	4311      	orrs	r1, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003032:	06d2      	lsls	r2, r2, #27
 8003034:	430a      	orrs	r2, r1
 8003036:	4943      	ldr	r1, [pc, #268]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 8003038:	4313      	orrs	r3, r2
 800303a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800303c:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a40      	ldr	r2, [pc, #256]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 8003042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003046:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003048:	4b3e      	ldr	r3, [pc, #248]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a3d      	ldr	r2, [pc, #244]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 800304e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003052:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7fd fd7e 	bl	8000b54 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7fd fd7a 	bl	8000b54 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e066      	b.n	800313c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	4b35      	ldr	r3, [pc, #212]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x530>
 800307a:	e05e      	b.n	800313a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a30      	ldr	r2, [pc, #192]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fd fd64 	bl	8000b54 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003090:	f7fd fd60 	bl	8000b54 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e04c      	b.n	800313c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030ae:	4b25      	ldr	r3, [pc, #148]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	4924      	ldr	r1, [pc, #144]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 80030b4:	4b25      	ldr	r3, [pc, #148]	; (800314c <HAL_RCC_OscConfig+0x620>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	60cb      	str	r3, [r1, #12]
 80030ba:	e03e      	b.n	800313a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e039      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030c8:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <HAL_RCC_OscConfig+0x618>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d12c      	bne.n	8003136 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	3b01      	subs	r3, #1
 80030e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d123      	bne.n	8003136 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d11b      	bne.n	8003136 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d113      	bne.n	8003136 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	3b01      	subs	r3, #1
 800311c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800311e:	429a      	cmp	r2, r3
 8003120:	d109      	bne.n	8003136 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	3b01      	subs	r3, #1
 8003130:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000
 8003148:	019f800c 	.word	0x019f800c
 800314c:	feeefffc 	.word	0xfeeefffc

08003150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e11e      	b.n	80033a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b91      	ldr	r3, [pc, #580]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d910      	bls.n	8003198 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b8e      	ldr	r3, [pc, #568]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 020f 	bic.w	r2, r3, #15
 800317e:	498c      	ldr	r1, [pc, #560]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b8a      	ldr	r3, [pc, #552]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e106      	b.n	80033a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d073      	beq.n	800328c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d129      	bne.n	8003200 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ac:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0f4      	b.n	80033a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031bc:	f000 f972 	bl	80034a4 <RCC_GetSysClockFreqFromPLLSource>
 80031c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4a7c      	ldr	r2, [pc, #496]	; (80033b8 <HAL_RCC_ClockConfig+0x268>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d93f      	bls.n	800324a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031ca:	4b7a      	ldr	r3, [pc, #488]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d033      	beq.n	800324a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d12f      	bne.n	800324a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031ea:	4b72      	ldr	r3, [pc, #456]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031f2:	4a70      	ldr	r2, [pc, #448]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80031f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e024      	b.n	800324a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d107      	bne.n	8003218 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003208:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0c6      	b.n	80033a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003218:	4b66      	ldr	r3, [pc, #408]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0be      	b.n	80033a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003228:	f000 f8ce 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 800322c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4a61      	ldr	r2, [pc, #388]	; (80033b8 <HAL_RCC_ClockConfig+0x268>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d909      	bls.n	800324a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003236:	4b5f      	ldr	r3, [pc, #380]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800323e:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 8003240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003244:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800324a:	4b5a      	ldr	r3, [pc, #360]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f023 0203 	bic.w	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4957      	ldr	r1, [pc, #348]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 8003258:	4313      	orrs	r3, r2
 800325a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325c:	f7fd fc7a 	bl	8000b54 <HAL_GetTick>
 8003260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	e00a      	b.n	800327a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003264:	f7fd fc76 	bl	8000b54 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e095      	b.n	80033a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	4b4e      	ldr	r3, [pc, #312]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 020c 	and.w	r2, r3, #12
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	429a      	cmp	r2, r3
 800328a:	d1eb      	bne.n	8003264 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d023      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a42      	ldr	r2, [pc, #264]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80032aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032bc:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80032c4:	4a3b      	ldr	r2, [pc, #236]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80032c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4936      	ldr	r1, [pc, #216]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
 80032de:	e008      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	d105      	bne.n	80032f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032e6:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4a32      	ldr	r2, [pc, #200]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 80032ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f2:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d21d      	bcs.n	800333c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003300:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f023 020f 	bic.w	r2, r3, #15
 8003308:	4929      	ldr	r1, [pc, #164]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003310:	f7fd fc20 	bl	8000b54 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7fd fc1c 	bl	8000b54 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e03b      	b.n	80033a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_ClockConfig+0x260>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d1ed      	bne.n	8003318 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b1a      	ldr	r3, [pc, #104]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4917      	ldr	r1, [pc, #92]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003366:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490f      	ldr	r1, [pc, #60]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800337a:	f000 f825 	bl	80033c8 <HAL_RCC_GetSysClockFreq>
 800337e:	4602      	mov	r2, r0
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_RCC_ClockConfig+0x264>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	490c      	ldr	r1, [pc, #48]	; (80033bc <HAL_RCC_ClockConfig+0x26c>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <HAL_RCC_ClockConfig+0x270>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_RCC_ClockConfig+0x274>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fb8c 	bl	8000abc <HAL_InitTick>
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40022000 	.word	0x40022000
 80033b4:	40021000 	.word	0x40021000
 80033b8:	04c4b400 	.word	0x04c4b400
 80033bc:	080039d4 	.word	0x080039d4
 80033c0:	2000022c 	.word	0x2000022c
 80033c4:	20000230 	.word	0x20000230

080033c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033ce:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d102      	bne.n	80033e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	e047      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 030c 	and.w	r3, r3, #12
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d102      	bne.n	80033f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033ec:	4b26      	ldr	r3, [pc, #152]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	e03e      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d136      	bne.n	800346c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003408:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3301      	adds	r3, #1
 8003414:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d10c      	bne.n	8003436 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800341c:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc0>)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	fbb2 f3f3 	udiv	r3, r2, r3
 8003424:	4a16      	ldr	r2, [pc, #88]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003426:	68d2      	ldr	r2, [r2, #12]
 8003428:	0a12      	lsrs	r2, r2, #8
 800342a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800342e:	fb02 f303 	mul.w	r3, r2, r3
 8003432:	617b      	str	r3, [r7, #20]
      break;
 8003434:	e00c      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003436:	4a13      	ldr	r2, [pc, #76]	; (8003484 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	4a10      	ldr	r2, [pc, #64]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003440:	68d2      	ldr	r2, [r2, #12]
 8003442:	0a12      	lsrs	r2, r2, #8
 8003444:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003448:	fb02 f303 	mul.w	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
      break;
 800344e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	0e5b      	lsrs	r3, r3, #25
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	3301      	adds	r3, #1
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	e001      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003470:	693b      	ldr	r3, [r7, #16]
}
 8003472:	4618      	mov	r0, r3
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	00f42400 	.word	0x00f42400
 8003488:	016e3600 	.word	0x016e3600

0800348c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	2000022c 	.word	0x2000022c

080034a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034aa:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034b4:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	3301      	adds	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d10c      	bne.n	80034e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034c8:	4a17      	ldr	r2, [pc, #92]	; (8003528 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	4a14      	ldr	r2, [pc, #80]	; (8003524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034d2:	68d2      	ldr	r2, [r2, #12]
 80034d4:	0a12      	lsrs	r2, r2, #8
 80034d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	617b      	str	r3, [r7, #20]
    break;
 80034e0:	e00c      	b.n	80034fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ea:	4a0e      	ldr	r2, [pc, #56]	; (8003524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034ec:	68d2      	ldr	r2, [r2, #12]
 80034ee:	0a12      	lsrs	r2, r2, #8
 80034f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034f4:	fb02 f303 	mul.w	r3, r2, r3
 80034f8:	617b      	str	r3, [r7, #20]
    break;
 80034fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	0e5b      	lsrs	r3, r3, #25
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	3301      	adds	r3, #1
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003516:	687b      	ldr	r3, [r7, #4]
}
 8003518:	4618      	mov	r0, r3
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40021000 	.word	0x40021000
 8003528:	016e3600 	.word	0x016e3600
 800352c:	00f42400 	.word	0x00f42400

08003530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e049      	b.n	80035d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd f9b4 	bl	80008c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f000 f8ae 	bl	80036d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d001      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e054      	b.n	80036a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d022      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x80>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003622:	d01d      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x80>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d018      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x80>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d013      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x80>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_TIM_Base_Start_IT+0xdc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00e      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x80>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1e      	ldr	r2, [pc, #120]	; (80036c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d009      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x80>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1c      	ldr	r2, [pc, #112]	; (80036c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <HAL_TIM_Base_Start_IT+0x80>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d115      	bne.n	800368c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_TIM_Base_Start_IT+0xec>)
 8003668:	4013      	ands	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b06      	cmp	r3, #6
 8003670:	d015      	beq.n	800369e <HAL_TIM_Base_Start_IT+0xbe>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d011      	beq.n	800369e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368a:	e008      	b.n	800369e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e000      	b.n	80036a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40012c00 	.word	0x40012c00
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40000800 	.word	0x40000800
 80036bc:	40000c00 	.word	0x40000c00
 80036c0:	40013400 	.word	0x40013400
 80036c4:	40014000 	.word	0x40014000
 80036c8:	40015000 	.word	0x40015000
 80036cc:	00010007 	.word	0x00010007

080036d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a4c      	ldr	r2, [pc, #304]	; (8003814 <TIM_Base_SetConfig+0x144>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d017      	beq.n	8003718 <TIM_Base_SetConfig+0x48>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ee:	d013      	beq.n	8003718 <TIM_Base_SetConfig+0x48>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a49      	ldr	r2, [pc, #292]	; (8003818 <TIM_Base_SetConfig+0x148>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00f      	beq.n	8003718 <TIM_Base_SetConfig+0x48>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a48      	ldr	r2, [pc, #288]	; (800381c <TIM_Base_SetConfig+0x14c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00b      	beq.n	8003718 <TIM_Base_SetConfig+0x48>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a47      	ldr	r2, [pc, #284]	; (8003820 <TIM_Base_SetConfig+0x150>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d007      	beq.n	8003718 <TIM_Base_SetConfig+0x48>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a46      	ldr	r2, [pc, #280]	; (8003824 <TIM_Base_SetConfig+0x154>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_Base_SetConfig+0x48>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a45      	ldr	r2, [pc, #276]	; (8003828 <TIM_Base_SetConfig+0x158>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d108      	bne.n	800372a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a39      	ldr	r2, [pc, #228]	; (8003814 <TIM_Base_SetConfig+0x144>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d023      	beq.n	800377a <TIM_Base_SetConfig+0xaa>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003738:	d01f      	beq.n	800377a <TIM_Base_SetConfig+0xaa>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a36      	ldr	r2, [pc, #216]	; (8003818 <TIM_Base_SetConfig+0x148>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01b      	beq.n	800377a <TIM_Base_SetConfig+0xaa>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a35      	ldr	r2, [pc, #212]	; (800381c <TIM_Base_SetConfig+0x14c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d017      	beq.n	800377a <TIM_Base_SetConfig+0xaa>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a34      	ldr	r2, [pc, #208]	; (8003820 <TIM_Base_SetConfig+0x150>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <TIM_Base_SetConfig+0xaa>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a33      	ldr	r2, [pc, #204]	; (8003824 <TIM_Base_SetConfig+0x154>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00f      	beq.n	800377a <TIM_Base_SetConfig+0xaa>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a33      	ldr	r2, [pc, #204]	; (800382c <TIM_Base_SetConfig+0x15c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d00b      	beq.n	800377a <TIM_Base_SetConfig+0xaa>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a32      	ldr	r2, [pc, #200]	; (8003830 <TIM_Base_SetConfig+0x160>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d007      	beq.n	800377a <TIM_Base_SetConfig+0xaa>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a31      	ldr	r2, [pc, #196]	; (8003834 <TIM_Base_SetConfig+0x164>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d003      	beq.n	800377a <TIM_Base_SetConfig+0xaa>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2c      	ldr	r2, [pc, #176]	; (8003828 <TIM_Base_SetConfig+0x158>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d108      	bne.n	800378c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a18      	ldr	r2, [pc, #96]	; (8003814 <TIM_Base_SetConfig+0x144>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <TIM_Base_SetConfig+0x110>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <TIM_Base_SetConfig+0x154>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00f      	beq.n	80037e0 <TIM_Base_SetConfig+0x110>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a1a      	ldr	r2, [pc, #104]	; (800382c <TIM_Base_SetConfig+0x15c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00b      	beq.n	80037e0 <TIM_Base_SetConfig+0x110>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a19      	ldr	r2, [pc, #100]	; (8003830 <TIM_Base_SetConfig+0x160>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d007      	beq.n	80037e0 <TIM_Base_SetConfig+0x110>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a18      	ldr	r2, [pc, #96]	; (8003834 <TIM_Base_SetConfig+0x164>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d003      	beq.n	80037e0 <TIM_Base_SetConfig+0x110>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a13      	ldr	r2, [pc, #76]	; (8003828 <TIM_Base_SetConfig+0x158>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d103      	bne.n	80037e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f023 0201 	bic.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]
  }
}
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	40013400 	.word	0x40013400
 8003828:	40015000 	.word	0x40015000
 800382c:	40014000 	.word	0x40014000
 8003830:	40014400 	.word	0x40014400
 8003834:	40014800 	.word	0x40014800

08003838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800384c:	2302      	movs	r3, #2
 800384e:	e074      	b.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a34      	ldr	r2, [pc, #208]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a33      	ldr	r2, [pc, #204]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a31      	ldr	r2, [pc, #196]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003894:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a21      	ldr	r2, [pc, #132]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d01d      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a15      	ldr	r2, [pc, #84]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a11      	ldr	r2, [pc, #68]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10c      	bne.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	4313      	orrs	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40013400 	.word	0x40013400
 8003950:	40015000 	.word	0x40015000
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40014000 	.word	0x40014000

08003964 <memset>:
 8003964:	4402      	add	r2, r0
 8003966:	4603      	mov	r3, r0
 8003968:	4293      	cmp	r3, r2
 800396a:	d100      	bne.n	800396e <memset+0xa>
 800396c:	4770      	bx	lr
 800396e:	f803 1b01 	strb.w	r1, [r3], #1
 8003972:	e7f9      	b.n	8003968 <memset+0x4>

08003974 <__libc_init_array>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	4d0d      	ldr	r5, [pc, #52]	; (80039ac <__libc_init_array+0x38>)
 8003978:	4c0d      	ldr	r4, [pc, #52]	; (80039b0 <__libc_init_array+0x3c>)
 800397a:	1b64      	subs	r4, r4, r5
 800397c:	10a4      	asrs	r4, r4, #2
 800397e:	2600      	movs	r6, #0
 8003980:	42a6      	cmp	r6, r4
 8003982:	d109      	bne.n	8003998 <__libc_init_array+0x24>
 8003984:	4d0b      	ldr	r5, [pc, #44]	; (80039b4 <__libc_init_array+0x40>)
 8003986:	4c0c      	ldr	r4, [pc, #48]	; (80039b8 <__libc_init_array+0x44>)
 8003988:	f000 f818 	bl	80039bc <_init>
 800398c:	1b64      	subs	r4, r4, r5
 800398e:	10a4      	asrs	r4, r4, #2
 8003990:	2600      	movs	r6, #0
 8003992:	42a6      	cmp	r6, r4
 8003994:	d105      	bne.n	80039a2 <__libc_init_array+0x2e>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	f855 3b04 	ldr.w	r3, [r5], #4
 800399c:	4798      	blx	r3
 800399e:	3601      	adds	r6, #1
 80039a0:	e7ee      	b.n	8003980 <__libc_init_array+0xc>
 80039a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a6:	4798      	blx	r3
 80039a8:	3601      	adds	r6, #1
 80039aa:	e7f2      	b.n	8003992 <__libc_init_array+0x1e>
 80039ac:	080039e4 	.word	0x080039e4
 80039b0:	080039e4 	.word	0x080039e4
 80039b4:	080039e4 	.word	0x080039e4
 80039b8:	080039e8 	.word	0x080039e8

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
