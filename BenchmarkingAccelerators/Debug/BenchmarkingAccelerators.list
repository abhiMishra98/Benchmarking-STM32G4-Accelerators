
BenchmarkingAccelerators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d1c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f04  08002f04  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  08002f04  08002f04  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f04  08002f04  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f04  08002f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f08  08002f08  00012f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08002f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000238  08003144  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08003144  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbf0  00000000  00000000  000202ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000256b  00000000  00000000  0002fe9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00032408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ace  00000000  00000000  00033378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e2f  00000000  00000000  00059e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa597  00000000  00000000  0006bc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000bc4  00000000  00000000  0016620c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fd8  00000000  00000000  00166dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016ada8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000238 	.word	0x20000238
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002edc 	.word	0x08002edc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000023c 	.word	0x2000023c
 8000214:	08002edc 	.word	0x08002edc

08000218 <cmsis_fir_q15_init>:
		-17530, -16846, -16151, -15446, -14732, -14010, -13279, -12539, -11793,
		-11039, -10278, -9512, -8739, -7962, -7179, -6393, -5602, -4808, -4011,
		-3212, -2410, -1608, -804 };

void cmsis_fir_q15_init(arm_fir_instance_q15 *S, uint16_t numTaps,
		const q15_t *pCoeffs, q15_t *pState, uint32_t blockSize) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af02      	add	r7, sp, #8
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	607a      	str	r2, [r7, #4]
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	460b      	mov	r3, r1
 8000226:	817b      	strh	r3, [r7, #10]
	arm_fir_init_q15(S, numTaps, pCoeffs, pState, blockSize);
 8000228:	8979      	ldrh	r1, [r7, #10]
 800022a:	69bb      	ldr	r3, [r7, #24]
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	68f8      	ldr	r0, [r7, #12]
 8000234:	f000 fb67 	bl	8000906 <arm_fir_init_q15>
}
 8000238:	bf00      	nop
 800023a:	3710      	adds	r7, #16
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000246:	f000 fc31 	bl	8000aac <HAL_Init>

	/* USER CODE BEGIN Init */
	//arm_fir_init_q15(&A, NUMTAPS, fir_coeffs, firStateQ15, BLOCK_SIZE);
	q15_t *cmsis_firCoeffs = &fir_coeffs;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <main+0x4c>)
 800024c:	607b      	str	r3, [r7, #4]
	q15_t *cmsis_firStateq15 = &firStateQ15;
 800024e:	4b10      	ldr	r3, [pc, #64]	; (8000290 <main+0x50>)
 8000250:	603b      	str	r3, [r7, #0]
	cmsis_fir_q15_init(&A, NUMTAPS, cmsis_firCoeffs, cmsis_firStateq15, BLOCK_SIZE);
 8000252:	2301      	movs	r3, #1
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	2116      	movs	r1, #22
 800025c:	480d      	ldr	r0, [pc, #52]	; (8000294 <main+0x54>)
 800025e:	f7ff ffdb 	bl	8000218 <cmsis_fir_q15_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000262:	f000 f81d 	bl	80002a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000266:	f000 f91f 	bl	80004a8 <MX_GPIO_Init>
	MX_DMA_Init();
 800026a:	f000 f8f3 	bl	8000454 <MX_DMA_Init>
	MX_FMAC_Init();
 800026e:	f000 f8a7 	bl	80003c0 <MX_FMAC_Init>
	MX_DAC1_Init();
 8000272:	f000 f861 	bl	8000338 <MX_DAC1_Init>
	MX_TIM6_Init();
 8000276:	f000 f8b7 	bl	80003e8 <MX_TIM6_Init>
//			21, 0, 0);
//	/* Configure the FMAC */
//	fmac_StartWithTimerIRQ(&hfmac,&sFmacConfig,&htim6,&hdac1);


	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800027a:	2100      	movs	r1, #0
 800027c:	4806      	ldr	r0, [pc, #24]	; (8000298 <main+0x58>)
 800027e:	f000 fdb7 	bl	8000df0 <HAL_DAC_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8000282:	4806      	ldr	r0, [pc, #24]	; (800029c <main+0x5c>)
 8000284:	f002 fc3c 	bl	8002b00 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000288:	e7fe      	b.n	8000288 <main+0x48>
 800028a:	bf00      	nop
 800028c:	20000000 	.word	0x20000000
 8000290:	2000035c 	.word	0x2000035c
 8000294:	20000350 	.word	0x20000350
 8000298:	20000254 	.word	0x20000254
 800029c:	20000300 	.word	0x20000300

080002a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b094      	sub	sp, #80	; 0x50
 80002a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2238      	movs	r2, #56	; 0x38
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fde8 	bl	8002e84 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002c2:	2000      	movs	r0, #0
 80002c4:	f001 fe0e 	bl	8001ee4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	2302      	movs	r3, #2
 80002ca:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002d0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	2340      	movs	r3, #64	; 0x40
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80002de:	2304      	movs	r3, #4
 80002e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80002e2:	2355      	movs	r3, #85	; 0x55
 80002e4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fea8 	bl	800204c <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x66>
		Error_Handler();
 8000302:	f000 f95f 	bl	80005c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2303      	movs	r3, #3
 800030c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2104      	movs	r1, #4
 800031e:	4618      	mov	r0, r3
 8000320:	f002 f9a6 	bl	8002670 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x8e>
		Error_Handler();
 800032a:	f000 f94b 	bl	80005c4 <Error_Handler>
	}
}
 800032e:	bf00      	nop
 8000330:	3750      	adds	r7, #80	; 0x50
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b08c      	sub	sp, #48	; 0x30
 800033c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 800033e:	463b      	mov	r3, r7
 8000340:	2230      	movs	r2, #48	; 0x30
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f002 fd9d 	bl	8002e84 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 800034a:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_DAC1_Init+0x80>)
 800034c:	4a1b      	ldr	r2, [pc, #108]	; (80003bc <MX_DAC1_Init+0x84>)
 800034e:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8000350:	4819      	ldr	r0, [pc, #100]	; (80003b8 <MX_DAC1_Init+0x80>)
 8000352:	f000 fd2a 	bl	8000daa <HAL_DAC_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_DAC1_Init+0x28>
		Error_Handler();
 800035c:	f000 f932 	bl	80005c4 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000360:	2302      	movs	r3, #2
 8000362:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000364:	2300      	movs	r3, #0
 8000366:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 8000368:	2300      	movs	r3, #0
 800036a:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800036c:	2300      	movs	r3, #0
 800036e:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000374:	2300      	movs	r3, #0
 8000376:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000378:	2300      	movs	r3, #0
 800037a:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800037c:	2301      	movs	r3, #1
 800037e:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000380:	2300      	movs	r3, #0
 8000382:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000384:	463b      	mov	r3, r7
 8000386:	2200      	movs	r2, #0
 8000388:	4619      	mov	r1, r3
 800038a:	480b      	ldr	r0, [pc, #44]	; (80003b8 <MX_DAC1_Init+0x80>)
 800038c:	f000 fdca 	bl	8000f24 <HAL_DAC_ConfigChannel>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_DAC1_Init+0x62>
		Error_Handler();
 8000396:	f000 f915 	bl	80005c4 <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 800039a:	463b      	mov	r3, r7
 800039c:	2210      	movs	r2, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_DAC1_Init+0x80>)
 80003a2:	f000 fdbf 	bl	8000f24 <HAL_DAC_ConfigChannel>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_DAC1_Init+0x78>
		Error_Handler();
 80003ac:	f000 f90a 	bl	80005c4 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 80003b0:	bf00      	nop
 80003b2:	3730      	adds	r7, #48	; 0x30
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000254 	.word	0x20000254
 80003bc:	50000800 	.word	0x50000800

080003c0 <MX_FMAC_Init>:
/**
 * @brief FMAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_FMAC_Init(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	/* USER CODE END FMAC_Init 0 */

	/* USER CODE BEGIN FMAC_Init 1 */

	/* USER CODE END FMAC_Init 1 */
	hfmac.Instance = FMAC;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_FMAC_Init+0x20>)
 80003c6:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <MX_FMAC_Init+0x24>)
 80003c8:	601a      	str	r2, [r3, #0]
	if (HAL_FMAC_Init(&hfmac) != HAL_OK) {
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_FMAC_Init+0x20>)
 80003cc:	f001 f91c 	bl	8001608 <HAL_FMAC_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_FMAC_Init+0x1a>
		Error_Handler();
 80003d6:	f000 f8f5 	bl	80005c4 <Error_Handler>
	}
	/* USER CODE BEGIN FMAC_Init 2 */

	/* USER CODE END FMAC_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000268 	.word	0x20000268
 80003e4:	40021400 	.word	0x40021400

080003e8 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80003f8:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_TIM6_Init+0x64>)
 80003fa:	4a15      	ldr	r2, [pc, #84]	; (8000450 <MX_TIM6_Init+0x68>)
 80003fc:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 169;
 80003fe:	4b13      	ldr	r3, [pc, #76]	; (800044c <MX_TIM6_Init+0x64>)
 8000400:	22a9      	movs	r2, #169	; 0xa9
 8000402:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_TIM6_Init+0x64>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 20;
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <MX_TIM6_Init+0x64>)
 800040c:	2214      	movs	r2, #20
 800040e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_TIM6_Init+0x64>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000416:	480d      	ldr	r0, [pc, #52]	; (800044c <MX_TIM6_Init+0x64>)
 8000418:	f002 fb1a 	bl	8002a50 <HAL_TIM_Base_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM6_Init+0x3e>
		Error_Handler();
 8000422:	f000 f8cf 	bl	80005c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000426:	2320      	movs	r3, #32
 8000428:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	4806      	ldr	r0, [pc, #24]	; (800044c <MX_TIM6_Init+0x64>)
 8000434:	f002 fc90 	bl	8002d58 <HAL_TIMEx_MasterConfigSynchronization>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 800043e:	f000 f8c1 	bl	80005c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000300 	.word	0x20000300
 8000450:	40001000 	.word	0x40001000

08000454 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <MX_DMA_Init+0x50>)
 800045c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800045e:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <MX_DMA_Init+0x50>)
 8000460:	f043 0304 	orr.w	r3, r3, #4
 8000464:	6493      	str	r3, [r2, #72]	; 0x48
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_DMA_Init+0x50>)
 8000468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800046a:	f003 0304 	and.w	r3, r3, #4
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_DMA_Init+0x50>)
 8000474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000476:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <MX_DMA_Init+0x50>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6493      	str	r3, [r2, #72]	; 0x48
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_DMA_Init+0x50>)
 8000480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	200b      	movs	r0, #11
 8000490:	f000 fc57 	bl	8000d42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000494:	200b      	movs	r0, #11
 8000496:	f000 fc6e 	bl	8000d76 <HAL_NVIC_EnableIRQ>

}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b08a      	sub	sp, #40	; 0x28
 80004ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004ae:	f107 0314 	add.w	r3, r7, #20
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004be:	4b3e      	ldr	r3, [pc, #248]	; (80005b8 <MX_GPIO_Init+0x110>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4a3d      	ldr	r2, [pc, #244]	; (80005b8 <MX_GPIO_Init+0x110>)
 80004c4:	f043 0304 	orr.w	r3, r3, #4
 80004c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ca:	4b3b      	ldr	r3, [pc, #236]	; (80005b8 <MX_GPIO_Init+0x110>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80004d6:	4b38      	ldr	r3, [pc, #224]	; (80005b8 <MX_GPIO_Init+0x110>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a37      	ldr	r2, [pc, #220]	; (80005b8 <MX_GPIO_Init+0x110>)
 80004dc:	f043 0320 	orr.w	r3, r3, #32
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b35      	ldr	r3, [pc, #212]	; (80005b8 <MX_GPIO_Init+0x110>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0320 	and.w	r3, r3, #32
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80004ee:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <MX_GPIO_Init+0x110>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a31      	ldr	r2, [pc, #196]	; (80005b8 <MX_GPIO_Init+0x110>)
 80004f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <MX_GPIO_Init+0x110>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_GPIO_Init+0x110>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a2b      	ldr	r2, [pc, #172]	; (80005b8 <MX_GPIO_Init+0x110>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b29      	ldr	r3, [pc, #164]	; (80005b8 <MX_GPIO_Init+0x110>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <MX_GPIO_Init+0x110>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a25      	ldr	r2, [pc, #148]	; (80005b8 <MX_GPIO_Init+0x110>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <MX_GPIO_Init+0x110>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053c:	481f      	ldr	r0, [pc, #124]	; (80005bc <MX_GPIO_Init+0x114>)
 800053e:	f001 fc95 	bl	8001e6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000546:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000548:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800054c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	4819      	ldr	r0, [pc, #100]	; (80005c0 <MX_GPIO_Init+0x118>)
 800055a:	f001 fb05 	bl	8001b68 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800055e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000562:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000564:	2301      	movs	r3, #1
 8000566:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	4811      	ldr	r0, [pc, #68]	; (80005bc <MX_GPIO_Init+0x114>)
 8000578:	f001 faf6 	bl	8001b68 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
	GPIO_InitStruct.Pin = LPUART1_TX_Pin | LPUART1_RX_Pin;
 800057c:	230c      	movs	r3, #12
 800057e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000580:	2302      	movs	r3, #2
 8000582:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800058c:	230c      	movs	r3, #12
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059a:	f001 fae5 	bl	8001b68 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	2028      	movs	r0, #40	; 0x28
 80005a4:	f000 fbcd 	bl	8000d42 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a8:	2028      	movs	r0, #40	; 0x28
 80005aa:	f000 fbe4 	bl	8000d76 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48001800 	.word	0x48001800
 80005c0:	48000800 	.word	0x48000800

080005c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <HAL_MspInit+0x44>)
 80005d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005da:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <HAL_MspInit+0x44>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6613      	str	r3, [r2, #96]	; 0x60
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_MspInit+0x44>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_MspInit+0x44>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <HAL_MspInit+0x44>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	6593      	str	r3, [r2, #88]	; 0x58
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_MspInit+0x44>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000606:	f001 fd11 	bl	800202c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a19      	ldr	r2, [pc, #100]	; (800069c <HAL_DAC_MspInit+0x84>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d12c      	bne.n	8000694 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <HAL_DAC_MspInit+0x88>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	4a18      	ldr	r2, [pc, #96]	; (80006a0 <HAL_DAC_MspInit+0x88>)
 8000640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <HAL_DAC_MspInit+0x88>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <HAL_DAC_MspInit+0x88>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <HAL_DAC_MspInit+0x88>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_DAC_MspInit+0x88>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800066a:	2330      	movs	r3, #48	; 0x30
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066e:	2303      	movs	r3, #3
 8000670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000680:	f001 fa72 	bl	8001b68 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	2036      	movs	r0, #54	; 0x36
 800068a:	f000 fb5a 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800068e:	2036      	movs	r0, #54	; 0x36
 8000690:	f000 fb71 	bl	8000d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	50000800 	.word	0x50000800
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a22      	ldr	r2, [pc, #136]	; (800073c <HAL_FMAC_MspInit+0x98>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d13e      	bne.n	8000734 <HAL_FMAC_MspInit+0x90>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <HAL_FMAC_MspInit+0x9c>)
 80006b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ba:	4a21      	ldr	r2, [pc, #132]	; (8000740 <HAL_FMAC_MspInit+0x9c>)
 80006bc:	f043 0310 	orr.w	r3, r3, #16
 80006c0:	6493      	str	r3, [r2, #72]	; 0x48
 80006c2:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <HAL_FMAC_MspInit+0x9c>)
 80006c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006c6:	f003 0310 	and.w	r3, r3, #16
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]

    /* FMAC DMA Init */
    /* FMAC_WRITE Init */
    hdma_fmac_write.Instance = DMA1_Channel1;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 80006d0:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <HAL_FMAC_MspInit+0xa4>)
 80006d2:	601a      	str	r2, [r3, #0]
    hdma_fmac_write.Init.Request = DMA_REQUEST_FMAC_WRITE;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 80006d6:	226f      	movs	r2, #111	; 0x6f
 80006d8:	605a      	str	r2, [r3, #4]
    hdma_fmac_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 80006dc:	2210      	movs	r2, #16
 80006de:	609a      	str	r2, [r3, #8]
    hdma_fmac_write.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
    hdma_fmac_write.Init.MemInc = DMA_MINC_ENABLE;
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	611a      	str	r2, [r3, #16]
    hdma_fmac_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 80006ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f2:	615a      	str	r2, [r3, #20]
    hdma_fmac_write.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 80006f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006fa:	619a      	str	r2, [r3, #24]
    hdma_fmac_write.Init.Mode = DMA_NORMAL;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
    hdma_fmac_write.Init.Priority = DMA_PRIORITY_LOW;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_fmac_write) != HAL_OK)
 8000708:	480e      	ldr	r0, [pc, #56]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 800070a:	f000 fdc3 	bl	8001294 <HAL_DMA_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <HAL_FMAC_MspInit+0x74>
    {
      Error_Handler();
 8000714:	f7ff ff56 	bl	80005c4 <Error_Handler>
    }

    __HAL_LINKDMA(hfmac,hdmaIn,hdma_fmac_write);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
 800071e:	4a09      	ldr	r2, [pc, #36]	; (8000744 <HAL_FMAC_MspInit+0xa0>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6293      	str	r3, [r2, #40]	; 0x28

    /* FMAC interrupt Init */
    HAL_NVIC_SetPriority(FMAC_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2065      	movs	r0, #101	; 0x65
 800072a:	f000 fb0a 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMAC_IRQn);
 800072e:	2065      	movs	r0, #101	; 0x65
 8000730:	f000 fb21 	bl	8000d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021400 	.word	0x40021400
 8000740:	40021000 	.word	0x40021000
 8000744:	200002a0 	.word	0x200002a0
 8000748:	40020008 	.word	0x40020008

0800074c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <HAL_TIM_Base_MspInit+0x44>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d113      	bne.n	8000786 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <HAL_TIM_Base_MspInit+0x48>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <HAL_TIM_Base_MspInit+0x48>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	6593      	str	r3, [r2, #88]	; 0x58
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_TIM_Base_MspInit+0x48>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2036      	movs	r0, #54	; 0x36
 800077c:	f000 fae1 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000780:	2036      	movs	r0, #54	; 0x36
 8000782:	f000 faf8 	bl	8000d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40001000 	.word	0x40001000
 8000794:	40021000 	.word	0x40021000

08000798 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80007e4:	f000 f9b4 	bl	8000b50 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_fmac_write);
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <DMA1_Channel1_IRQHandler+0x10>)
 80007f2:	f000 fdf7 	bl	80013e4 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200002a0 	.word	0x200002a0

08000800 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000804:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000808:	f001 fb48 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
//		hfmac.Instance->WDATA = lut[lutIndex++];
//	}
//	fmac_FilterSetDAC_TimerISR(&hfmac, &hdac1, &lutIndex);

//For FIR Implementation
	arm_fir_q15(&A, &lut[lutIndex++], filteredSample, BLOCK_SIZE);
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <TIM6_DAC_IRQHandler+0x58>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	b2d1      	uxtb	r1, r2
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <TIM6_DAC_IRQHandler+0x58>)
 8000820:	7011      	strb	r1, [r2, #0]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	4a11      	ldr	r2, [pc, #68]	; (800086c <TIM6_DAC_IRQHandler+0x5c>)
 8000826:	1899      	adds	r1, r3, r2
 8000828:	2301      	movs	r3, #1
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <TIM6_DAC_IRQHandler+0x60>)
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <TIM6_DAC_IRQHandler+0x64>)
 800082e:	f000 f894 	bl	800095a <arm_fir_q15>
	q15_t q15_val = filteredSample[0];
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <TIM6_DAC_IRQHandler+0x60>)
 8000834:	881b      	ldrh	r3, [r3, #0]
 8000836:	80fb      	strh	r3, [r7, #6]
	uint32_t dac_val = (uint32_t) (((int32_t) q15_val + 32768) >> 4); //Scale to 0–4095
 8000838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800083c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000840:	111b      	asrs	r3, r3, #4
 8000842:	603b      	str	r3, [r7, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <TIM6_DAC_IRQHandler+0x68>)
 800084c:	f000 fb3c 	bl	8000ec8 <HAL_DAC_SetValue>

	if (lutIndex == 255) {
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <TIM6_DAC_IRQHandler+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2bff      	cmp	r3, #255	; 0xff
 8000856:	d102      	bne.n	800085e <TIM6_DAC_IRQHandler+0x4e>
		lutIndex = 0;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <TIM6_DAC_IRQHandler+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
	/* USER CODE END TIM6_DAC_IRQn 0 */

	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000388 	.word	0x20000388
 800086c:	2000002c 	.word	0x2000002c
 8000870:	2000034c 	.word	0x2000034c
 8000874:	20000350 	.word	0x20000350
 8000878:	20000254 	.word	0x20000254

0800087c <FMAC_IRQHandler>:

/**
 * @brief This function handles FMAC interrupt.
 */
void FMAC_IRQHandler(void) {
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN FMAC_IRQn 0 */

	/* USER CODE END FMAC_IRQn 0 */
	HAL_FMAC_IRQHandler(&hfmac);
 8000880:	4802      	ldr	r0, [pc, #8]	; (800088c <FMAC_IRQHandler+0x10>)
 8000882:	f000 ff20 	bl	80016c6 <HAL_FMAC_IRQHandler>
	/* USER CODE BEGIN FMAC_IRQn 1 */

	/* USER CODE END FMAC_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000268 	.word	0x20000268

08000890 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <SystemInit+0x20>)
 8000896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <SystemInit+0x20>)
 800089c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008b8:	f7ff ffea 	bl	8000890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008bc:	480c      	ldr	r0, [pc, #48]	; (80008f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80008be:	490d      	ldr	r1, [pc, #52]	; (80008f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <LoopForever+0xe>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008c4:	e002      	b.n	80008cc <LoopCopyDataInit>

080008c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ca:	3304      	adds	r3, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d0:	d3f9      	bcc.n	80008c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d4:	4c0a      	ldr	r4, [pc, #40]	; (8000900 <LoopForever+0x16>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d8:	e001      	b.n	80008de <LoopFillZerobss>

080008da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008dc:	3204      	adds	r2, #4

080008de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e0:	d3fb      	bcc.n	80008da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008e2:	f002 fad7 	bl	8002e94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008e6:	f7ff fcab 	bl	8000240 <main>

080008ea <LoopForever>:

LoopForever:
    b LoopForever
 80008ea:	e7fe      	b.n	80008ea <LoopForever>
  ldr   r0, =_estack
 80008ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f4:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 80008f8:	08002f0c 	.word	0x08002f0c
  ldr r2, =_sbss
 80008fc:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8000900:	20000390 	.word	0x20000390

08000904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_2_IRQHandler>

08000906 <arm_fir_init_q15>:
        arm_fir_instance_q15 * S,
        uint16_t numTaps,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	607a      	str	r2, [r7, #4]
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	460b      	mov	r3, r1
 8000914:	817b      	strh	r3, [r7, #10]
  arm_status status;

#if defined (ARM_MATH_DSP)

  /* The Number of filter coefficients in the filter must be even and at least 4 */
  if (numTaps & 0x1U)
 8000916:	897b      	ldrh	r3, [r7, #10]
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <arm_fir_init_q15+0x20>
  {
    status = ARM_MATH_ARGUMENT_ERROR;
 8000920:	23ff      	movs	r3, #255	; 0xff
 8000922:	75fb      	strb	r3, [r7, #23]
 8000924:	e013      	b.n	800094e <arm_fir_init_q15+0x48>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	897a      	ldrh	r2, [r7, #10]
 800092a:	801a      	strh	r2, [r3, #0]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	609a      	str	r2, [r3, #8]

    /* Clear the state buffer.  The size is always (blockSize + numTaps ) */
    memset(pState, 0, (numTaps + (blockSize)) * sizeof(q15_t));
 8000932:	897a      	ldrh	r2, [r7, #10]
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	4413      	add	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	461a      	mov	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	6838      	ldr	r0, [r7, #0]
 8000940:	f002 faa0 	bl	8002e84 <memset>

    /* Assign state pointer */
    S->pState = pState;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	605a      	str	r2, [r3, #4]

    status = ARM_MATH_SUCCESS;
 800094a:	2300      	movs	r3, #0
 800094c:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 800094e:	f997 3017 	ldrsb.w	r3, [r7, #23]

  return (status);

#endif /* #if defined (ARM_MATH_DSP) */

}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <arm_fir_q15>:
void arm_fir_q15(
  const arm_fir_instance_q15 * S,
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 800095a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800095e:	b093      	sub	sp, #76	; 0x4c
 8000960:	af00      	add	r7, sp, #0
 8000962:	6178      	str	r0, [r7, #20]
 8000964:	6139      	str	r1, [r7, #16]
 8000966:	60fa      	str	r2, [r7, #12]
 8000968:	60bb      	str	r3, [r7, #8]
        q15_t *pState = S->pState;                     /* State pointer */
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
        q15_t *pStateCurnt;                            /* Points to the current sample of the state */
        q15_t *px;                                     /* Temporary pointer for state buffer */
  const q15_t *pb;                                     /* Temporary pointer for coefficient buffer */
        q63_t acc0;                                    /* Accumulators */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	623b      	str	r3, [r7, #32]
        q31_t x0, x1, x2, c0;                          /* Temporary variables to hold state and coefficient values */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	685a      	ldr	r2, [r3, #4]
 8000980:	6a3b      	ldr	r3, [r7, #32]
 8000982:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000986:	3b01      	subs	r3, #1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	643b      	str	r3, [r7, #64]	; 0x40
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000992:	e06b      	b.n	8000a6c <arm_fir_q15+0x112>
  {
    /* Copy two samples into state buffer */
    *pStateCurnt++ = *pSrc++;
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	1c93      	adds	r3, r2, #2
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800099c:	1c99      	adds	r1, r3, #2
 800099e:	6439      	str	r1, [r7, #64]	; 0x40
 80009a0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80009a4:	801a      	strh	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0;
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Use SIMD to hold states and coefficients */
    px = pState;
 80009b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    pb = pCoeffs;
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38

    tapCnt = numTaps >> 1U;
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c

    do
    {
      acc0 += (q31_t) *px++ * *pb++;
 80009c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009c2:	1c9a      	adds	r2, r3, #2
 80009c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80009c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ca:	4619      	mov	r1, r3
 80009cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ce:	1c9a      	adds	r2, r3, #2
 80009d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80009d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d6:	fb01 f303 	mul.w	r3, r1, r3
 80009da:	17da      	asrs	r2, r3, #31
 80009dc:	461c      	mov	r4, r3
 80009de:	4615      	mov	r5, r2
 80009e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80009e4:	eb12 0a04 	adds.w	sl, r2, r4
 80009e8:	eb43 0b05 	adc.w	fp, r3, r5
 80009ec:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
	  acc0 += (q31_t) *px++ * *pb++;
 80009f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009f2:	1c9a      	adds	r2, r3, #2
 80009f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80009f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fa:	4619      	mov	r1, r3
 80009fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009fe:	1c9a      	adds	r2, r3, #2
 8000a00:	63ba      	str	r2, [r7, #56]	; 0x38
 8000a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a06:	fb01 f303 	mul.w	r3, r1, r3
 8000a0a:	17da      	asrs	r2, r3, #31
 8000a0c:	4698      	mov	r8, r3
 8000a0e:	4691      	mov	r9, r2
 8000a10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000a14:	eb12 0108 	adds.w	r1, r2, r8
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	eb43 0309 	adc.w	r3, r3, r9
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000a24:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

      tapCnt--;
 8000a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (tapCnt > 0U);
 8000a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1c5      	bne.n	80009c0 <arm_fir_q15+0x66>

    /* The result is in 2.30 format. Convert to 1.15 with saturation.
       Then store the output in the destination buffer. */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 8000a34:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000a38:	f04f 0200 	mov.w	r2, #0
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	0bc2      	lsrs	r2, r0, #15
 8000a42:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8000a46:	13cb      	asrs	r3, r1, #15
 8000a48:	4613      	mov	r3, r2
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f303 030f 	ssat	r3, #16, r3
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69b9      	ldr	r1, [r7, #24]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1c9a      	adds	r2, r3, #2
 8000a5a:	60fa      	str	r2, [r7, #12]
 8000a5c:	b20a      	sxth	r2, r1
 8000a5e:	801a      	strh	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8000a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a62:	3302      	adds	r3, #2
 8000a64:	647b      	str	r3, [r7, #68]	; 0x44

    /* Decrement loop counter */
    blkCnt--;
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  while (blkCnt > 0U)
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d190      	bne.n	8000994 <arm_fir_q15+0x3a>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 8000a7e:	e00b      	b.n	8000a98 <arm_fir_q15+0x13e>
  {
    *pStateCurnt++ = *pState++;
 8000a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a82:	1c93      	adds	r3, r2, #2
 8000a84:	647b      	str	r3, [r7, #68]	; 0x44
 8000a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a88:	1c99      	adds	r1, r3, #2
 8000a8a:	6439      	str	r1, [r7, #64]	; 0x40
 8000a8c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000a90:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 8000a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a94:	3b01      	subs	r3, #1
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (tapCnt > 0U)
 8000a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d1f0      	bne.n	8000a80 <arm_fir_q15+0x126>
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	374c      	adds	r7, #76	; 0x4c
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000aaa:	4770      	bx	lr

08000aac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f000 f938 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 f80d 	bl	8000adc <HAL_InitTick>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	71fb      	strb	r3, [r7, #7]
 8000acc:	e001      	b.n	8000ad2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ace:	f7ff fd7f 	bl	80005d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]

}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_InitTick+0x68>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d022      	beq.n	8000b36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_InitTick+0x6c>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <HAL_InitTick+0x68>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f944 	bl	8000d92 <HAL_SYSTICK_Config>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d10f      	bne.n	8000b30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b0f      	cmp	r3, #15
 8000b14:	d809      	bhi.n	8000b2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b16:	2200      	movs	r2, #0
 8000b18:	6879      	ldr	r1, [r7, #4]
 8000b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1e:	f000 f910 	bl	8000d42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_InitTick+0x70>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6013      	str	r3, [r2, #0]
 8000b28:	e007      	b.n	8000b3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	73fb      	strb	r3, [r7, #15]
 8000b2e:	e004      	b.n	8000b3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	e001      	b.n	8000b3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000234 	.word	0x20000234
 8000b48:	2000022c 	.word	0x2000022c
 8000b4c:	20000230 	.word	0x20000230

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x20>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <HAL_IncTick+0x1c>)
 8000b60:	6013      	str	r3, [r2, #0]
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	2000038c 	.word	0x2000038c
 8000b70:	20000234 	.word	0x20000234

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b03      	ldr	r3, [pc, #12]	; (8000b88 <HAL_GetTick+0x14>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000038c 	.word	0x2000038c

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4907      	ldr	r1, [pc, #28]	; (8000c28 <__NVIC_EnableIRQ+0x38>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	; (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff8e 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff29 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff40 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff90 	bl	8000c80 <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5f 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff33 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa4 	bl	8000ce8 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e014      	b.n	8000de6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	791b      	ldrb	r3, [r3, #4]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d105      	bne.n	8000dd2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fc23 	bl	8000618 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e056      	b.n	8000eb2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	795b      	ldrb	r3, [r3, #5]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d101      	bne.n	8000e10 <HAL_DAC_Start+0x20>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e050      	b.n	8000eb2 <HAL_DAC_Start+0xc2>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2202      	movs	r2, #2
 8000e1a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6819      	ldr	r1, [r3, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2201      	movs	r2, #1
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	430a      	orrs	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_DAC_Start+0xd0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	099b      	lsrs	r3, r3, #6
 8000e3a:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_DAC_Start+0xd4>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	099b      	lsrs	r3, r3, #6
 8000e42:	3301      	adds	r3, #1
 8000e44:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8000e46:	e002      	b.n	8000e4e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f9      	bne.n	8000e48 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10f      	bne.n	8000e7a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d11d      	bne.n	8000ea4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0201 	orr.w	r2, r2, #1
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	e014      	b.n	8000ea4 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d107      	bne.n	8000ea4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0202 	orr.w	r2, r2, #2
 8000ea2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000022c 	.word	0x2000022c
 8000ec4:	053e2d63 	.word	0x053e2d63

08000ec8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d101      	bne.n	8000ee4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e018      	b.n	8000f16 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d105      	bne.n	8000f02 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	3308      	adds	r3, #8
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e004      	b.n	8000f0c <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	3314      	adds	r3, #20
 8000f0a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	371c      	adds	r7, #28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <HAL_DAC_ConfigChannel+0x1c>
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e19e      	b.n	8001282 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	795b      	ldrb	r3, [r3, #5]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_DAC_ConfigChannel+0x2c>
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e198      	b.n	8001282 <HAL_DAC_ConfigChannel+0x35e>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2201      	movs	r2, #1
 8000f54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2202      	movs	r2, #2
 8000f5a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2b04      	cmp	r3, #4
 8000f62:	d17a      	bne.n	800105a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000f64:	f7ff fe06 	bl	8000b74 <HAL_GetTick>
 8000f68:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d13d      	bne.n	8000fec <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f70:	e018      	b.n	8000fa4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000f72:	f7ff fdff 	bl	8000b74 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d911      	bls.n	8000fa4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00a      	beq.n	8000fa4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	f043 0208 	orr.w	r2, r3, #8
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e16e      	b.n	8001282 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1df      	bne.n	8000f72 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fba:	641a      	str	r2, [r3, #64]	; 0x40
 8000fbc:	e020      	b.n	8001000 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000fbe:	f7ff fdd9 	bl	8000b74 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d90f      	bls.n	8000fec <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	da0a      	bge.n	8000fec <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	f043 0208 	orr.w	r2, r3, #8
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e14a      	b.n	8001282 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	dbe3      	blt.n	8000fbe <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ffe:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f003 0310 	and.w	r3, r3, #16
 800100c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	ea02 0103 	and.w	r1, r2, r3
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	409a      	lsls	r2, r3
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	21ff      	movs	r1, #255	; 0xff
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	ea02 0103 	and.w	r1, r2, r3
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f003 0310 	and.w	r3, r3, #16
 8001050:	409a      	lsls	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d11d      	bne.n	800109e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	221f      	movs	r2, #31
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800107a:	4013      	ands	r3, r2
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001092:	4313      	orrs	r3, r2
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	2207      	movs	r2, #7
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b6:	4013      	ands	r3, r2
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d102      	bne.n	80010c8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
 80010c6:	e00f      	b.n	80010e8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d102      	bne.n	80010d6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80010d0:	2301      	movs	r3, #1
 80010d2:	623b      	str	r3, [r7, #32]
 80010d4:	e008      	b.n	80010e8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80010de:	2301      	movs	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
 80010e2:	e001      	b.n	80010e8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	6a3a      	ldr	r2, [r7, #32]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800110a:	4013      	ands	r3, r2
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d102      	bne.n	800111c <HAL_DAC_ConfigChannel+0x1f8>
 8001116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111a:	e000      	b.n	800111e <HAL_DAC_ConfigChannel+0x1fa>
 800111c:	2300      	movs	r3, #0
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4313      	orrs	r3, r2
 8001122:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001136:	4013      	ands	r3, r2
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	795b      	ldrb	r3, [r3, #5]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <HAL_DAC_ConfigChannel+0x224>
 8001142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001146:	e000      	b.n	800114a <HAL_DAC_ConfigChannel+0x226>
 8001148:	2300      	movs	r3, #0
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4313      	orrs	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d114      	bne.n	800118a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001160:	f001 fc24 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 8001164:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	4a48      	ldr	r2, [pc, #288]	; (800128c <HAL_DAC_ConfigChannel+0x368>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d904      	bls.n	8001178 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
 8001176:	e00f      	b.n	8001198 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4a45      	ldr	r2, [pc, #276]	; (8001290 <HAL_DAC_ConfigChannel+0x36c>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d90a      	bls.n	8001196 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
 8001188:	e006      	b.n	8001198 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001190:	4313      	orrs	r3, r2
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
 8001194:	e000      	b.n	8001198 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001196:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a6:	4313      	orrs	r3, r2
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	400a      	ands	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	f640 72fe 	movw	r2, #4094	; 0xffe
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ea:	4013      	ands	r3, r2
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001202:	4313      	orrs	r3, r2
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800120c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	22c0      	movs	r2, #192	; 0xc0
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43da      	mvns	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	400a      	ands	r2, r1
 8001228:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4313      	orrs	r3, r2
 8001246:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	ea02 0103 	and.w	r1, r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	430a      	orrs	r2, r1
 8001272:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2201      	movs	r2, #1
 8001278:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001280:	7ffb      	ldrb	r3, [r7, #31]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	09896800 	.word	0x09896800
 8001290:	04c4b400 	.word	0x04c4b400

08001294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e08d      	b.n	80013c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_DMA_Init+0x138>)
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d80f      	bhi.n	80012d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <HAL_DMA_Init+0x13c>)
 80012ba:	4413      	add	r3, r2
 80012bc:	4a45      	ldr	r2, [pc, #276]	; (80013d4 <HAL_DMA_Init+0x140>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	009a      	lsls	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a42      	ldr	r2, [pc, #264]	; (80013d8 <HAL_DMA_Init+0x144>)
 80012ce:	641a      	str	r2, [r3, #64]	; 0x40
 80012d0:	e00e      	b.n	80012f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b40      	ldr	r3, [pc, #256]	; (80013dc <HAL_DMA_Init+0x148>)
 80012da:	4413      	add	r3, r2
 80012dc:	4a3d      	ldr	r2, [pc, #244]	; (80013d4 <HAL_DMA_Init+0x140>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	009a      	lsls	r2, r3, #2
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a3c      	ldr	r2, [pc, #240]	; (80013e0 <HAL_DMA_Init+0x14c>)
 80012ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800130a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f8fe 	bl	8001544 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001350:	d102      	bne.n	8001358 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800136c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d010      	beq.n	8001398 <HAL_DMA_Init+0x104>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b04      	cmp	r3, #4
 800137c:	d80c      	bhi.n	8001398 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f91e 	bl	80015c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	e008      	b.n	80013aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020407 	.word	0x40020407
 80013d0:	bffdfff8 	.word	0xbffdfff8
 80013d4:	cccccccd 	.word	0xcccccccd
 80013d8:	40020000 	.word	0x40020000
 80013dc:	bffdfbf8 	.word	0xbffdfbf8
 80013e0:	40020400 	.word	0x40020400

080013e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	2204      	movs	r2, #4
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d026      	beq.n	800145e <HAL_DMA_IRQHandler+0x7a>
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	d021      	beq.n	800145e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0320 	and.w	r3, r3, #32
 8001424:	2b00      	cmp	r3, #0
 8001426:	d107      	bne.n	8001438 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0204 	bic.w	r2, r2, #4
 8001436:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	2104      	movs	r1, #4
 8001446:	fa01 f202 	lsl.w	r2, r1, r2
 800144a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	2b00      	cmp	r3, #0
 8001452:	d071      	beq.n	8001538 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800145c:	e06c      	b.n	8001538 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	2202      	movs	r2, #2
 8001468:	409a      	lsls	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d02e      	beq.n	80014d0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d029      	beq.n	80014d0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10b      	bne.n	80014a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 020a 	bic.w	r2, r2, #10
 8001498:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f003 021f 	and.w	r2, r3, #31
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	2102      	movs	r1, #2
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d038      	beq.n	8001538 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014ce:	e033      	b.n	8001538 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d4:	f003 031f 	and.w	r3, r3, #31
 80014d8:	2208      	movs	r2, #8
 80014da:	409a      	lsls	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d02a      	beq.n	800153a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d025      	beq.n	800153a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 020e 	bic.w	r2, r2, #14
 80014fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f003 021f 	and.w	r2, r3, #31
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152c:	2b00      	cmp	r3, #0
 800152e:	d004      	beq.n	800153a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001538:	bf00      	nop
 800153a:	bf00      	nop
}
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001554:	429a      	cmp	r2, r3
 8001556:	d802      	bhi.n	800155e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e001      	b.n	8001562 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001560:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	3b08      	subs	r3, #8
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	009a      	lsls	r2, r3, #2
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4413      	add	r3, r2
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800158e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 031f 	and.w	r3, r3, #31
 8001596:	2201      	movs	r2, #1
 8001598:	409a      	lsls	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800159e:	bf00      	nop
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40020407 	.word	0x40020407
 80015b0:	40020800 	.word	0x40020800
 80015b4:	40020820 	.word	0x40020820
 80015b8:	cccccccd 	.word	0xcccccccd
 80015bc:	40020880 	.word	0x40020880

080015c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	461a      	mov	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a08      	ldr	r2, [pc, #32]	; (8001604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80015e2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	2201      	movs	r2, #1
 80015ee:	409a      	lsls	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	1000823f 	.word	0x1000823f
 8001604:	40020940 	.word	0x40020940

08001608 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e033      	b.n	8001682 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff f838 	bl	80006a4 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f935 	bl	80018aa <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f903 	bl	800184c <FMAC_Reset>
 8001646:	4603      	mov	r3, r0
 8001648:	2b01      	cmp	r3, #1
 800164a:	d10c      	bne.n	8001666 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001650:	f043 0210 	orr.w	r2, r3, #16
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	22a0      	movs	r2, #160	; 0xa0
 800165c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e008      	b.n	8001678 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_FMAC_ErrorCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_ErrorCallback(FMAC_HandleTypeDef *hfmac)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_ErrorCallback can be implemented in the user file.
   */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_FMAC_GetDataCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_GetDataCallback(FMAC_HandleTypeDef *hfmac)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_GetDataCallback can be implemented in the user file.
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <HAL_FMAC_OutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_OutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_OutputDataReadyCallback can be implemented in the user file.
   */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_FMAC_IRQHandler>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
void HAL_FMAC_IRQHandler(FMAC_HandleTypeDef *hfmac)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource;

  /* Check if the read interrupt is enabled and if Y buffer empty flag isn't set */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_RIEN);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_YEMPTY) == 0U) && (itsource != 0U))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d022      	beq.n	800172e <HAL_FMAC_IRQHandler+0x68>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d01f      	beq.n	800172e <HAL_FMAC_IRQHandler+0x68>
  {
    /* Read some data if possible (Y size is used as a pseudo timeout in order
       to not get stuck too long under IT if FMAC keeps on processing input
       data reloaded via DMA for instance). */
    if (hfmac->pOutput != NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <HAL_FMAC_IRQHandler+0x46>
    {
      FMAC_ReadDataIncrementPtr(hfmac, (uint16_t)FMAC_GET_Y_SIZE(hfmac));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	b29b      	uxth	r3, r3
 8001704:	4619      	mov	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f90b 	bl	8001922 <FMAC_ReadDataIncrementPtr>
    }

    /* Indicate that data is ready to be read */
    if ((hfmac->pOutput == NULL) || (hfmac->OutputCurrentSize == *(hfmac->pOutputSize)))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_FMAC_IRQHandler+0x5c>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	8b9a      	ldrh	r2, [r3, #28]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d105      	bne.n	800172e <HAL_FMAC_IRQHandler+0x68>
    {
      /* Reset the pointers to indicate new data will be needed */
      FMAC_ResetOutputStateAndDataPointers(hfmac);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f8e6 	bl	80018f4 <FMAC_ResetOutputStateAndDataPointers>

      /* Call the output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->OutputDataReadyCallback(hfmac);
#else
      HAL_FMAC_OutputDataReadyCallback(hfmac);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ffc2 	bl	80016b2 <HAL_FMAC_OutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
    }
  }

  /* Check if the write interrupt is enabled and if X1 buffer full flag isn't set */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_WIEN);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_X1FULL) == 0U) && (itsource != 0U))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b02      	cmp	r3, #2
 8001746:	d022      	beq.n	800178e <HAL_FMAC_IRQHandler+0xc8>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d01f      	beq.n	800178e <HAL_FMAC_IRQHandler+0xc8>
  {
    /* Write some data if possible (X1 size is used as a pseudo timeout in order
       to not get stuck too long under IT if FMAC keep on processing input
       data whereas its output emptied via DMA for instance). */
    if (hfmac->pInput != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00a      	beq.n	800176c <HAL_FMAC_IRQHandler+0xa6>
    {
      FMAC_WriteDataIncrementPtr(hfmac, (uint16_t)FMAC_GET_X1_SIZE(hfmac));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	b29b      	uxth	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	b29b      	uxth	r3, r3
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f96d 	bl	8001a46 <FMAC_WriteDataIncrementPtr>
    }

    /* Indicate that new data will be needed */
    if ((hfmac->pInput == NULL) || (hfmac->InputCurrentSize == *(hfmac->pInputSize)))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <HAL_FMAC_IRQHandler+0xbc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	8a1a      	ldrh	r2, [r3, #16]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d105      	bne.n	800178e <HAL_FMAC_IRQHandler+0xc8>
    {
      /* Reset the pointers to indicate new data will be needed */
      FMAC_ResetInputStateAndDataPointers(hfmac);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f89f 	bl	80018c6 <FMAC_ResetInputStateAndDataPointers>

      /* Call the get data callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->GetDataCallback(hfmac);
#else
      HAL_FMAC_GetDataCallback(hfmac);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff88 	bl	800169e <HAL_FMAC_GetDataCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
    }
  }

  /* Check if the overflow error interrupt is enabled and if overflow error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_OVFLIEN);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_OVFL) != 0U) && (itsource != 0U))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a8:	d101      	bne.n	80017ae <HAL_FMAC_IRQHandler+0xe8>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_FMAC_IRQHandler+0xea>
 80017ae:	2300      	movs	r3, #0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_FMAC_IRQHandler+0x100>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_FMAC_IRQHandler+0x100>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_OVFL;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017be:	f043 0204 	orr.w	r2, r3, #4
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Check if the underflow error interrupt is enabled and if underflow error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_UNFLIEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_UNFL) != 0U) && (itsource != 0U))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e0:	d101      	bne.n	80017e6 <HAL_FMAC_IRQHandler+0x120>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_FMAC_IRQHandler+0x122>
 80017e6:	2300      	movs	r3, #0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_FMAC_IRQHandler+0x138>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <HAL_FMAC_IRQHandler+0x138>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_UNFL;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f6:	f043 0202 	orr.w	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Check if the saturation error interrupt is enabled and if saturation error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_SATIEN);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_SAT) != 0U) && (itsource != 0U))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001818:	d101      	bne.n	800181e <HAL_FMAC_IRQHandler+0x158>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_FMAC_IRQHandler+0x15a>
 800181e:	2300      	movs	r3, #0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <HAL_FMAC_IRQHandler+0x170>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_FMAC_IRQHandler+0x170>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_SAT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Call the error callback if an error occurred */
  if (hfmac->ErrorCode != HAL_FMAC_ERROR_NONE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <HAL_FMAC_IRQHandler+0x17e>
  {
    /* Call the error callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
    hfmac->ErrorCallback(hfmac);
#else
    HAL_FMAC_ErrorCallback(hfmac);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ff23 	bl	800168a <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001854:	f7ff f98e 	bl	8000b74 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001868:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800186a:	e00f      	b.n	800188c <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800186c:	f7ff f982 	bl	8000b74 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800187a:	d907      	bls.n	800188c <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e00a      	b.n	80018a2 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1e8      	bne.n	800186c <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f807 	bl	80018c6 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f81b 	bl	80018f4 <FMAC_ResetOutputStateAndDataPointers>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <FMAC_ReadDataIncrementPtr>:
  * @param  MaxSizeToRead Maximum number of data to read (this serves as a timeout
  *         if FMAC continuously writes into the output buffer).
  * @retval None
  */
static void FMAC_ReadDataIncrementPtr(FMAC_HandleTypeDef *hfmac, uint16_t MaxSizeToRead)
{
 8001922:	b480      	push	{r7}
 8001924:	b087      	sub	sp, #28
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	807b      	strh	r3, [r7, #2]
  uint16_t maxsize;
  uint16_t threshold;
  uint32_t tmpvalue;

  /* Check if there is data to read */
  if (READ_BIT(hfmac->Instance->SR, FMAC_SR_YEMPTY) != 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d17c      	bne.n	8001a36 <FMAC_ReadDataIncrementPtr+0x114>
  {
    return;
  }

  /* Get the maximum index (no wait allowed, no overstepping of the output buffer) */
  if ((hfmac->OutputCurrentSize + MaxSizeToRead) > *(hfmac->pOutputSize))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	8b9b      	ldrh	r3, [r3, #28]
 8001940:	461a      	mov	r2, r3
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	4413      	add	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6a12      	ldr	r2, [r2, #32]
 800194a:	8812      	ldrh	r2, [r2, #0]
 800194c:	4293      	cmp	r3, r2
 800194e:	dd04      	ble.n	800195a <FMAC_ReadDataIncrementPtr+0x38>
  {
    maxsize = *(hfmac->pOutputSize);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	82fb      	strh	r3, [r7, #22]
 8001958:	e004      	b.n	8001964 <FMAC_ReadDataIncrementPtr+0x42>
  }
  else
  {
    maxsize = hfmac->OutputCurrentSize + MaxSizeToRead;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	8b9a      	ldrh	r2, [r3, #28]
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	4413      	add	r3, r2
 8001962:	82fb      	strh	r3, [r7, #22]

  /* Read until there is no more room or no more data */
  do
  {
    /* If there is no more room, return */
    if (!(hfmac->OutputCurrentSize < maxsize))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	8b9b      	ldrh	r3, [r3, #28]
 8001968:	8afa      	ldrh	r2, [r7, #22]
 800196a:	429a      	cmp	r2, r3
 800196c:	d965      	bls.n	8001a3a <FMAC_ReadDataIncrementPtr+0x118>
    {
      return;
    }

    /* Read the available data */
    tmpvalue = ((READ_REG(hfmac->Instance->RDATA))& FMAC_RDATA_RDATA);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	b29b      	uxth	r3, r3
 8001976:	613b      	str	r3, [r7, #16]
    *(hfmac->pOutput) = (int16_t)tmpvalue;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	b212      	sxth	r2, r2
 8001980:	801a      	strh	r2, [r3, #0]
    hfmac->pOutput++;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	1c9a      	adds	r2, r3, #2
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
    hfmac->OutputCurrentSize++;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	8b9b      	ldrh	r3, [r3, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	b29a      	uxth	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	839a      	strh	r2, [r3, #28]
  } while (READ_BIT(hfmac->Instance->SR, FMAC_SR_YEMPTY) == 0U);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0de      	beq.n	8001964 <FMAC_ReadDataIncrementPtr+0x42>

  /* Y buffer empty flag has just be raised, read the threshold */
  threshold = (uint16_t)FMAC_GET_THRESHOLD_FROM_WM(FMAC_GET_Y_EMPTY_WM(hfmac)) - 1U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d015      	beq.n	80019e0 <FMAC_ReadDataIncrementPtr+0xbe>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80019be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c2:	d00b      	beq.n	80019dc <FMAC_ReadDataIncrementPtr+0xba>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80019ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019d2:	d101      	bne.n	80019d8 <FMAC_ReadDataIncrementPtr+0xb6>
 80019d4:	2303      	movs	r3, #3
 80019d6:	e004      	b.n	80019e2 <FMAC_ReadDataIncrementPtr+0xc0>
 80019d8:	2307      	movs	r3, #7
 80019da:	e002      	b.n	80019e2 <FMAC_ReadDataIncrementPtr+0xc0>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <FMAC_ReadDataIncrementPtr+0xc0>
 80019e0:	2300      	movs	r3, #0
 80019e2:	81fb      	strh	r3, [r7, #14]

  /* Update the maximum size if needed (limited data available) */
  if ((hfmac->OutputCurrentSize + threshold) < maxsize)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	8b9b      	ldrh	r3, [r3, #28]
 80019e8:	461a      	mov	r2, r3
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	441a      	add	r2, r3
 80019ee:	8afb      	ldrh	r3, [r7, #22]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	da1a      	bge.n	8001a2a <FMAC_ReadDataIncrementPtr+0x108>
  {
    maxsize = hfmac->OutputCurrentSize + threshold;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	8b9a      	ldrh	r2, [r3, #28]
 80019f8:	89fb      	ldrh	r3, [r7, #14]
 80019fa:	4413      	add	r3, r2
 80019fc:	82fb      	strh	r3, [r7, #22]
  }

  /* Read the available data */
  while (hfmac->OutputCurrentSize < maxsize)
 80019fe:	e014      	b.n	8001a2a <FMAC_ReadDataIncrementPtr+0x108>
  {
    tmpvalue = ((READ_REG(hfmac->Instance->RDATA))& FMAC_RDATA_RDATA);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	613b      	str	r3, [r7, #16]
    *(hfmac->pOutput) = (int16_t)tmpvalue;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	b212      	sxth	r2, r2
 8001a12:	801a      	strh	r2, [r3, #0]
    hfmac->pOutput++;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	1c9a      	adds	r2, r3, #2
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
    hfmac->OutputCurrentSize++;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	8b9b      	ldrh	r3, [r3, #28]
 8001a22:	3301      	adds	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	839a      	strh	r2, [r3, #28]
  while (hfmac->OutputCurrentSize < maxsize)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	8b9b      	ldrh	r3, [r3, #28]
 8001a2e:	8afa      	ldrh	r2, [r7, #22]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8e5      	bhi.n	8001a00 <FMAC_ReadDataIncrementPtr+0xde>
 8001a34:	e002      	b.n	8001a3c <FMAC_ReadDataIncrementPtr+0x11a>
    return;
 8001a36:	bf00      	nop
 8001a38:	e000      	b.n	8001a3c <FMAC_ReadDataIncrementPtr+0x11a>
      return;
 8001a3a:	bf00      	nop
  }
}
 8001a3c:	371c      	adds	r7, #28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <FMAC_WriteDataIncrementPtr>:
  * @param  MaxSizeToWrite Maximum number of data to write (this serves as a timeout
  *         if FMAC continuously empties the input buffer).
  * @retval None
  */
static void FMAC_WriteDataIncrementPtr(FMAC_HandleTypeDef *hfmac, uint16_t MaxSizeToWrite)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b085      	sub	sp, #20
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	807b      	strh	r3, [r7, #2]
  uint16_t maxsize;
  uint16_t threshold;

  /* Check if there is room in FMAC */
  if (READ_BIT(hfmac->Instance->SR, FMAC_SR_X1FULL) != 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d17a      	bne.n	8001b56 <FMAC_WriteDataIncrementPtr+0x110>
  {
    return;
  }

  /* Get the maximum index (no wait allowed, no overstepping of the output buffer) */
  if ((hfmac->InputCurrentSize + MaxSizeToWrite) > *(hfmac->pInputSize))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	8a1b      	ldrh	r3, [r3, #16]
 8001a64:	461a      	mov	r2, r3
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	4413      	add	r3, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6952      	ldr	r2, [r2, #20]
 8001a6e:	8812      	ldrh	r2, [r2, #0]
 8001a70:	4293      	cmp	r3, r2
 8001a72:	dd04      	ble.n	8001a7e <FMAC_WriteDataIncrementPtr+0x38>
  {
    maxsize = *(hfmac->pInputSize);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	81fb      	strh	r3, [r7, #14]
 8001a7c:	e004      	b.n	8001a88 <FMAC_WriteDataIncrementPtr+0x42>
  }
  else
  {
    maxsize = hfmac->InputCurrentSize + MaxSizeToWrite;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	8a1a      	ldrh	r2, [r3, #16]
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	4413      	add	r3, r2
 8001a86:	81fb      	strh	r3, [r7, #14]

  /* Write until there is no more room or no more data */
  do
  {
    /* If there is no more room, return */
    if (!(hfmac->InputCurrentSize < maxsize))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	8a1b      	ldrh	r3, [r3, #16]
 8001a8c:	89fa      	ldrh	r2, [r7, #14]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d963      	bls.n	8001b5a <FMAC_WriteDataIncrementPtr+0x114>
    {
      return;
    }

    /* Write the available data */
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(hfmac->pInput))) & FMAC_WDATA_WDATA));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	b292      	uxth	r2, r2
 8001aa2:	619a      	str	r2, [r3, #24]
    hfmac->pInput++;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	1c9a      	adds	r2, r3, #2
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60da      	str	r2, [r3, #12]
    hfmac->InputCurrentSize++;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	8a1b      	ldrh	r3, [r3, #16]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	821a      	strh	r2, [r3, #16]
  } while (READ_BIT(hfmac->Instance->SR, FMAC_SR_X1FULL) == 0U);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0df      	beq.n	8001a88 <FMAC_WriteDataIncrementPtr+0x42>

  /* X1 buffer full flag has just be raised, read the threshold */
  threshold = (uint16_t)FMAC_GET_THRESHOLD_FROM_WM(FMAC_GET_X1_FULL_WM(hfmac)) - 1U;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d015      	beq.n	8001b02 <FMAC_WriteDataIncrementPtr+0xbc>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8001ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae4:	d00b      	beq.n	8001afe <FMAC_WriteDataIncrementPtr+0xb8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8001af0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001af4:	d101      	bne.n	8001afa <FMAC_WriteDataIncrementPtr+0xb4>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <FMAC_WriteDataIncrementPtr+0xbe>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e002      	b.n	8001b04 <FMAC_WriteDataIncrementPtr+0xbe>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <FMAC_WriteDataIncrementPtr+0xbe>
 8001b02:	2300      	movs	r3, #0
 8001b04:	81bb      	strh	r3, [r7, #12]

  /* Update the maximum size if needed (limited data available) */
  if ((hfmac->InputCurrentSize + threshold) < maxsize)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	8a1b      	ldrh	r3, [r3, #16]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	89bb      	ldrh	r3, [r7, #12]
 8001b0e:	441a      	add	r2, r3
 8001b10:	89fb      	ldrh	r3, [r7, #14]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	da19      	bge.n	8001b4a <FMAC_WriteDataIncrementPtr+0x104>
  {
    maxsize = hfmac->InputCurrentSize + threshold;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	8a1a      	ldrh	r2, [r3, #16]
 8001b1a:	89bb      	ldrh	r3, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	81fb      	strh	r3, [r7, #14]
  }

  /* Write the available data */
  while (hfmac->InputCurrentSize < maxsize)
 8001b20:	e013      	b.n	8001b4a <FMAC_WriteDataIncrementPtr+0x104>
  {
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(hfmac->pInput))) & FMAC_WDATA_WDATA));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	b292      	uxth	r2, r2
 8001b32:	619a      	str	r2, [r3, #24]
    hfmac->pInput++;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	1c9a      	adds	r2, r3, #2
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60da      	str	r2, [r3, #12]
    hfmac->InputCurrentSize++;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	8a1b      	ldrh	r3, [r3, #16]
 8001b42:	3301      	adds	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	821a      	strh	r2, [r3, #16]
  while (hfmac->InputCurrentSize < maxsize)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	8a1b      	ldrh	r3, [r3, #16]
 8001b4e:	89fa      	ldrh	r2, [r7, #14]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8e6      	bhi.n	8001b22 <FMAC_WriteDataIncrementPtr+0xdc>
 8001b54:	e002      	b.n	8001b5c <FMAC_WriteDataIncrementPtr+0x116>
    return;
 8001b56:	bf00      	nop
 8001b58:	e000      	b.n	8001b5c <FMAC_WriteDataIncrementPtr+0x116>
      return;
 8001b5a:	bf00      	nop
  }
}
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b76:	e15a      	b.n	8001e2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 814c 	beq.w	8001e28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d005      	beq.n	8001ba8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d130      	bne.n	8001c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bde:	2201      	movs	r2, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 0201 	and.w	r2, r3, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d017      	beq.n	8001c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d123      	bne.n	8001c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	08da      	lsrs	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	08da      	lsrs	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3208      	adds	r2, #8
 8001c94:	6939      	ldr	r1, [r7, #16]
 8001c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0203 	and.w	r2, r3, #3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80a6 	beq.w	8001e28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cdc:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <HAL_GPIO_Init+0x2e4>)
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce0:	4a5a      	ldr	r2, [pc, #360]	; (8001e4c <HAL_GPIO_Init+0x2e4>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce8:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_GPIO_Init+0x2e4>)
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf4:	4a56      	ldr	r2, [pc, #344]	; (8001e50 <HAL_GPIO_Init+0x2e8>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d1e:	d01f      	beq.n	8001d60 <HAL_GPIO_Init+0x1f8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_GPIO_Init+0x2ec>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d019      	beq.n	8001d5c <HAL_GPIO_Init+0x1f4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <HAL_GPIO_Init+0x2f0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <HAL_GPIO_Init+0x1f0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <HAL_GPIO_Init+0x2f4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00d      	beq.n	8001d54 <HAL_GPIO_Init+0x1ec>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a49      	ldr	r2, [pc, #292]	; (8001e60 <HAL_GPIO_Init+0x2f8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <HAL_GPIO_Init+0x1e8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a48      	ldr	r2, [pc, #288]	; (8001e64 <HAL_GPIO_Init+0x2fc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_GPIO_Init+0x1e4>
 8001d48:	2305      	movs	r3, #5
 8001d4a:	e00a      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	e008      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d50:	2304      	movs	r3, #4
 8001d52:	e006      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d54:	2303      	movs	r3, #3
 8001d56:	e004      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e002      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_GPIO_Init+0x1fa>
 8001d60:	2300      	movs	r3, #0
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	f002 0203 	and.w	r2, r2, #3
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	4093      	lsls	r3, r2
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d72:	4937      	ldr	r1, [pc, #220]	; (8001e50 <HAL_GPIO_Init+0x2e8>)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d80:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001da4:	4a30      	ldr	r2, [pc, #192]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001daa:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dce:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dd4:	4b24      	ldr	r3, [pc, #144]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e22:	4a11      	ldr	r2, [pc, #68]	; (8001e68 <HAL_GPIO_Init+0x300>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f47f ae9d 	bne.w	8001b78 <HAL_GPIO_Init+0x10>
  }
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	371c      	adds	r7, #28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	48000400 	.word	0x48000400
 8001e58:	48000800 	.word	0x48000800
 8001e5c:	48000c00 	.word	0x48000c00
 8001e60:	48001000 	.word	0x48001000
 8001e64:	48001400 	.word	0x48001400
 8001e68:	40010400 	.word	0x40010400

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d006      	beq.n	8001ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 f806 	bl	8001ecc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40010400 	.word	0x40010400

08001ecc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d141      	bne.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ef2:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efe:	d131      	bne.n	8001f64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f00:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f06:	4a46      	ldr	r2, [pc, #280]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f10:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f18:	4a41      	ldr	r2, [pc, #260]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f20:	4b40      	ldr	r3, [pc, #256]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2232      	movs	r2, #50	; 0x32
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	4a3f      	ldr	r2, [pc, #252]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	0c9b      	lsrs	r3, r3, #18
 8001f32:	3301      	adds	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f36:	e002      	b.n	8001f3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3e:	4b38      	ldr	r3, [pc, #224]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4a:	d102      	bne.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f2      	bne.n	8001f38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f52:	4b33      	ldr	r3, [pc, #204]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5e:	d158      	bne.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e057      	b.n	8002014 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f64:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f6a:	4a2d      	ldr	r2, [pc, #180]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f74:	e04d      	b.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7c:	d141      	bne.n	8002002 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f7e:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8a:	d131      	bne.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f8c:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f92:	4a23      	ldr	r2, [pc, #140]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f9c:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fa4:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001faa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2232      	movs	r2, #50	; 0x32
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbc:	0c9b      	lsrs	r3, r3, #18
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc2:	e002      	b.n	8001fca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd6:	d102      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f2      	bne.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fea:	d112      	bne.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e011      	b.n	8002014 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002000:	e007      	b.n	8002012 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002010:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40007000 	.word	0x40007000
 8002024:	2000022c 	.word	0x2000022c
 8002028:	431bde83 	.word	0x431bde83

0800202c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203a:	6093      	str	r3, [r2, #8]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40007000 	.word	0x40007000

0800204c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e2fe      	b.n	800265c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d075      	beq.n	8002156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206a:	4b97      	ldr	r3, [pc, #604]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002074:	4b94      	ldr	r3, [pc, #592]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	d102      	bne.n	800208a <HAL_RCC_OscConfig+0x3e>
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d002      	beq.n	8002090 <HAL_RCC_OscConfig+0x44>
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d10b      	bne.n	80020a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	4b8d      	ldr	r3, [pc, #564]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d05b      	beq.n	8002154 <HAL_RCC_OscConfig+0x108>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d157      	bne.n	8002154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e2d9      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d106      	bne.n	80020c0 <HAL_RCC_OscConfig+0x74>
 80020b2:	4b85      	ldr	r3, [pc, #532]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a84      	ldr	r2, [pc, #528]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xb0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x98>
 80020ca:	4b7f      	ldr	r3, [pc, #508]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a7e      	ldr	r2, [pc, #504]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b7c      	ldr	r3, [pc, #496]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a7b      	ldr	r2, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xb0>
 80020e4:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a77      	ldr	r2, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b75      	ldr	r3, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a74      	ldr	r2, [pc, #464]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7fe fd36 	bl	8000b74 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7fe fd32 	bl	8000b74 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e29e      	b.n	800265c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211e:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xc0>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7fe fd22 	bl	8000b74 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7fe fd1e 	bl	8000b74 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e28a      	b.n	800265c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002146:	4b60      	ldr	r3, [pc, #384]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0xe8>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d075      	beq.n	800224e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002162:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216c:	4b56      	ldr	r3, [pc, #344]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b0c      	cmp	r3, #12
 800217a:	d102      	bne.n	8002182 <HAL_RCC_OscConfig+0x136>
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d002      	beq.n	8002188 <HAL_RCC_OscConfig+0x13c>
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d11f      	bne.n	80021c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002188:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_OscConfig+0x154>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e25d      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	061b      	lsls	r3, r3, #24
 80021ae:	4946      	ldr	r1, [pc, #280]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021b4:	4b45      	ldr	r3, [pc, #276]	; (80022cc <HAL_RCC_OscConfig+0x280>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fc8f 	bl	8000adc <HAL_InitTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d043      	beq.n	800224c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e249      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d023      	beq.n	8002218 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a3c      	ldr	r2, [pc, #240]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80021d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fcca 	bl	8000b74 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e4:	f7fe fcc6 	bl	8000b74 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e232      	b.n	800265c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	061b      	lsls	r3, r3, #24
 8002210:	492d      	ldr	r1, [pc, #180]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
 8002216:	e01a      	b.n	800224e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 800221e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe fca6 	bl	8000b74 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222c:	f7fe fca2 	bl	8000b74 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e20e      	b.n	800265c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x1e0>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800224c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d041      	beq.n	80022de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d01c      	beq.n	800229c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 8002264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002268:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7fe fc7f 	bl	8000b74 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227a:	f7fe fc7b 	bl	8000b74 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e1e7      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 800228e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ef      	beq.n	800227a <HAL_RCC_OscConfig+0x22e>
 800229a:	e020      	b.n	80022de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 800229e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_RCC_OscConfig+0x27c>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7fe fc62 	bl	8000b74 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022b2:	e00d      	b.n	80022d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7fe fc5e 	bl	8000b74 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d906      	bls.n	80022d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e1ca      	b.n	800265c <HAL_RCC_OscConfig+0x610>
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	20000230 	.word	0x20000230
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022d0:	4b8c      	ldr	r3, [pc, #560]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80022d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ea      	bne.n	80022b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80a6 	beq.w	8002438 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022f0:	4b84      	ldr	r3, [pc, #528]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_OscConfig+0x2b4>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x2b6>
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00d      	beq.n	8002322 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	4b7f      	ldr	r3, [pc, #508]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	4a7e      	ldr	r2, [pc, #504]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 800230c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002310:	6593      	str	r3, [r2, #88]	; 0x58
 8002312:	4b7c      	ldr	r3, [pc, #496]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800231e:	2301      	movs	r3, #1
 8002320:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002322:	4b79      	ldr	r3, [pc, #484]	; (8002508 <HAL_RCC_OscConfig+0x4bc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	2b00      	cmp	r3, #0
 800232c:	d118      	bne.n	8002360 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800232e:	4b76      	ldr	r3, [pc, #472]	; (8002508 <HAL_RCC_OscConfig+0x4bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a75      	ldr	r2, [pc, #468]	; (8002508 <HAL_RCC_OscConfig+0x4bc>)
 8002334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800233a:	f7fe fc1b 	bl	8000b74 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002342:	f7fe fc17 	bl	8000b74 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e183      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002354:	4b6c      	ldr	r3, [pc, #432]	; (8002508 <HAL_RCC_OscConfig+0x4bc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0f0      	beq.n	8002342 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d108      	bne.n	800237a <HAL_RCC_OscConfig+0x32e>
 8002368:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a65      	ldr	r2, [pc, #404]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002378:	e024      	b.n	80023c4 <HAL_RCC_OscConfig+0x378>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b05      	cmp	r3, #5
 8002380:	d110      	bne.n	80023a4 <HAL_RCC_OscConfig+0x358>
 8002382:	4b60      	ldr	r3, [pc, #384]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 8002384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002388:	4a5e      	ldr	r2, [pc, #376]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002392:	4b5c      	ldr	r3, [pc, #368]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002398:	4a5a      	ldr	r2, [pc, #360]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a2:	e00f      	b.n	80023c4 <HAL_RCC_OscConfig+0x378>
 80023a4:	4b57      	ldr	r3, [pc, #348]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	4a56      	ldr	r2, [pc, #344]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b4:	4b53      	ldr	r3, [pc, #332]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	4a52      	ldr	r2, [pc, #328]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d016      	beq.n	80023fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023cc:	f7fe fbd2 	bl	8000b74 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7fe fbce 	bl	8000b74 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e138      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ea:	4b46      	ldr	r3, [pc, #280]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0ed      	beq.n	80023d4 <HAL_RCC_OscConfig+0x388>
 80023f8:	e015      	b.n	8002426 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7fe fbbb 	bl	8000b74 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe fbb7 	bl	8000b74 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e121      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002418:	4b3a      	ldr	r3, [pc, #232]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ed      	bne.n	8002402 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002426:	7ffb      	ldrb	r3, [r7, #31]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4b35      	ldr	r3, [pc, #212]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	4a34      	ldr	r2, [pc, #208]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d03c      	beq.n	80024be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01c      	beq.n	8002486 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 800244e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002452:	4a2c      	ldr	r2, [pc, #176]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe fb8a 	bl	8000b74 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002464:	f7fe fb86 	bl	8000b74 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0f2      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 8002478:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ef      	beq.n	8002464 <HAL_RCC_OscConfig+0x418>
 8002484:	e01b      	b.n	80024be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002486:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 8002488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe fb6d 	bl	8000b74 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800249e:	f7fe fb69 	bl	8000b74 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0d5      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80024b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1ef      	bne.n	800249e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80c9 	beq.w	800265a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	f000 8083 	beq.w	80025dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d15e      	bne.n	800259c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a08      	ldr	r2, [pc, #32]	; (8002504 <HAL_RCC_OscConfig+0x4b8>)
 80024e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fb43 	bl	8000b74 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f0:	e00c      	b.n	800250c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe fb3f 	bl	8000b74 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d905      	bls.n	800250c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0ab      	b.n	800265c <HAL_RCC_OscConfig+0x610>
 8002504:	40021000 	.word	0x40021000
 8002508:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250c:	4b55      	ldr	r3, [pc, #340]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ec      	bne.n	80024f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002518:	4b52      	ldr	r3, [pc, #328]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	4b52      	ldr	r3, [pc, #328]	; (8002668 <HAL_RCC_OscConfig+0x61c>)
 800251e:	4013      	ands	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6a11      	ldr	r1, [r2, #32]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002528:	3a01      	subs	r2, #1
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	4311      	orrs	r1, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002532:	0212      	lsls	r2, r2, #8
 8002534:	4311      	orrs	r1, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800253a:	0852      	lsrs	r2, r2, #1
 800253c:	3a01      	subs	r2, #1
 800253e:	0552      	lsls	r2, r2, #21
 8002540:	4311      	orrs	r1, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002546:	0852      	lsrs	r2, r2, #1
 8002548:	3a01      	subs	r2, #1
 800254a:	0652      	lsls	r2, r2, #25
 800254c:	4311      	orrs	r1, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002552:	06d2      	lsls	r2, r2, #27
 8002554:	430a      	orrs	r2, r1
 8002556:	4943      	ldr	r1, [pc, #268]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 8002558:	4313      	orrs	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255c:	4b41      	ldr	r3, [pc, #260]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a40      	ldr	r2, [pc, #256]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 8002562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002566:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002568:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4a3d      	ldr	r2, [pc, #244]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 800256e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002572:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fafe 	bl	8000b74 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fafa 	bl	8000b74 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e066      	b.n	800265c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258e:	4b35      	ldr	r3, [pc, #212]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x530>
 800259a:	e05e      	b.n	800265a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259c:	4b31      	ldr	r3, [pc, #196]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a30      	ldr	r2, [pc, #192]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 80025a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fae4 	bl	8000b74 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe fae0 	bl	8000b74 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e04c      	b.n	800265c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c2:	4b28      	ldr	r3, [pc, #160]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025ce:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	4924      	ldr	r1, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCC_OscConfig+0x620>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	60cb      	str	r3, [r1, #12]
 80025da:	e03e      	b.n	800265a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e039      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <HAL_RCC_OscConfig+0x618>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 0203 	and.w	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d12c      	bne.n	8002656 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	3b01      	subs	r3, #1
 8002608:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d123      	bne.n	8002656 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d11b      	bne.n	8002656 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d113      	bne.n	8002656 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d109      	bne.n	8002656 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	3b01      	subs	r3, #1
 8002650:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	019f800c 	.word	0x019f800c
 800266c:	feeefffc 	.word	0xfeeefffc

08002670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e11e      	b.n	80028c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b91      	ldr	r3, [pc, #580]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d910      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b8e      	ldr	r3, [pc, #568]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 020f 	bic.w	r2, r3, #15
 800269e:	498c      	ldr	r1, [pc, #560]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b8a      	ldr	r3, [pc, #552]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e106      	b.n	80028c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d073      	beq.n	80027ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d129      	bne.n	8002720 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026cc:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0f4      	b.n	80028c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026dc:	f000 f972 	bl	80029c4 <RCC_GetSysClockFreqFromPLLSource>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4a7c      	ldr	r2, [pc, #496]	; (80028d8 <HAL_RCC_ClockConfig+0x268>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d93f      	bls.n	800276a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026ea:	4b7a      	ldr	r3, [pc, #488]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d033      	beq.n	800276a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002706:	2b00      	cmp	r3, #0
 8002708:	d12f      	bne.n	800276a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002712:	4a70      	ldr	r2, [pc, #448]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 8002714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002718:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e024      	b.n	800276a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d107      	bne.n	8002738 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002728:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0c6      	b.n	80028c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002738:	4b66      	ldr	r3, [pc, #408]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0be      	b.n	80028c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002748:	f000 f8ce 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 800274c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4a61      	ldr	r2, [pc, #388]	; (80028d8 <HAL_RCC_ClockConfig+0x268>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d909      	bls.n	800276a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002756:	4b5f      	ldr	r3, [pc, #380]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800275e:	4a5d      	ldr	r2, [pc, #372]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 8002760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002764:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800276a:	4b5a      	ldr	r3, [pc, #360]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4957      	ldr	r1, [pc, #348]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 8002778:	4313      	orrs	r3, r2
 800277a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277c:	f7fe f9fa 	bl	8000b74 <HAL_GetTick>
 8002780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	e00a      	b.n	800279a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002784:	f7fe f9f6 	bl	8000b74 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e095      	b.n	80028c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	4b4e      	ldr	r3, [pc, #312]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 020c 	and.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d1eb      	bne.n	8002784 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c4:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a42      	ldr	r2, [pc, #264]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 80027ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d007      	beq.n	80027ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027dc:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027e4:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 80027e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4936      	ldr	r1, [pc, #216]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
 80027fe:	e008      	b.n	8002812 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b80      	cmp	r3, #128	; 0x80
 8002804:	d105      	bne.n	8002812 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002806:	4b33      	ldr	r3, [pc, #204]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	4a32      	ldr	r2, [pc, #200]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 800280c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002810:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002812:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d21d      	bcs.n	800285c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 020f 	bic.w	r2, r3, #15
 8002828:	4929      	ldr	r1, [pc, #164]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002830:	f7fe f9a0 	bl	8000b74 <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	e00a      	b.n	800284e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002838:	f7fe f99c 	bl	8000b74 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e03b      	b.n	80028c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCC_ClockConfig+0x260>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d1ed      	bne.n	8002838 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4917      	ldr	r1, [pc, #92]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	490f      	ldr	r1, [pc, #60]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800289a:	f000 f825 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_RCC_ClockConfig+0x264>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	490c      	ldr	r1, [pc, #48]	; (80028dc <HAL_RCC_ClockConfig+0x26c>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x270>)
 80028b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_RCC_ClockConfig+0x274>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe f90c 	bl	8000adc <HAL_InitTick>
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40021000 	.word	0x40021000
 80028d8:	04c4b400 	.word	0x04c4b400
 80028dc:	08002ef4 	.word	0x08002ef4
 80028e0:	2000022c 	.word	0x2000022c
 80028e4:	20000230 	.word	0x20000230

080028e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d102      	bne.n	8002900 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	e047      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002900:	4b27      	ldr	r3, [pc, #156]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d102      	bne.n	8002912 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	e03e      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d136      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	3301      	adds	r3, #1
 8002934:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d10c      	bne.n	8002956 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800293c:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	4a16      	ldr	r2, [pc, #88]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002946:	68d2      	ldr	r2, [r2, #12]
 8002948:	0a12      	lsrs	r2, r2, #8
 800294a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	617b      	str	r3, [r7, #20]
      break;
 8002954:	e00c      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002956:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	4a10      	ldr	r2, [pc, #64]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	0a12      	lsrs	r2, r2, #8
 8002964:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
      break;
 800296e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	0e5b      	lsrs	r3, r3, #25
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	3301      	adds	r3, #1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	e001      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002990:	693b      	ldr	r3, [r7, #16]
}
 8002992:	4618      	mov	r0, r3
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	016e3600 	.word	0x016e3600

080029ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	2000022c 	.word	0x2000022c

080029c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ca:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d10c      	bne.n	8002a02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029e8:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029f2:	68d2      	ldr	r2, [r2, #12]
 80029f4:	0a12      	lsrs	r2, r2, #8
 80029f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	617b      	str	r3, [r7, #20]
    break;
 8002a00:	e00c      	b.n	8002a1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a02:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a0c:	68d2      	ldr	r2, [r2, #12]
 8002a0e:	0a12      	lsrs	r2, r2, #8
 8002a10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a14:	fb02 f303 	mul.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    break;
 8002a1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0e5b      	lsrs	r3, r3, #25
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a36:	687b      	ldr	r3, [r7, #4]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40021000 	.word	0x40021000
 8002a48:	016e3600 	.word	0x016e3600
 8002a4c:	00f42400 	.word	0x00f42400

08002a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e049      	b.n	8002af6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fd fe68 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f000 f8ae 	bl	8002bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d001      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e054      	b.n	8002bc2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d022      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b42:	d01d      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d018      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d013      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00e      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <HAL_TIM_Base_Start_IT+0xe0>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <HAL_TIM_Base_Start_IT+0xe4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <HAL_TIM_Base_Start_IT+0xe8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d115      	bne.n	8002bac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_TIM_Base_Start_IT+0xec>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d015      	beq.n	8002bbe <HAL_TIM_Base_Start_IT+0xbe>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b98:	d011      	beq.n	8002bbe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002baa:	e008      	b.n	8002bbe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e000      	b.n	8002bc0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40012c00 	.word	0x40012c00
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	40000800 	.word	0x40000800
 8002bdc:	40000c00 	.word	0x40000c00
 8002be0:	40013400 	.word	0x40013400
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40015000 	.word	0x40015000
 8002bec:	00010007 	.word	0x00010007

08002bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a4c      	ldr	r2, [pc, #304]	; (8002d34 <TIM_Base_SetConfig+0x144>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d017      	beq.n	8002c38 <TIM_Base_SetConfig+0x48>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d013      	beq.n	8002c38 <TIM_Base_SetConfig+0x48>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a49      	ldr	r2, [pc, #292]	; (8002d38 <TIM_Base_SetConfig+0x148>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00f      	beq.n	8002c38 <TIM_Base_SetConfig+0x48>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a48      	ldr	r2, [pc, #288]	; (8002d3c <TIM_Base_SetConfig+0x14c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00b      	beq.n	8002c38 <TIM_Base_SetConfig+0x48>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a47      	ldr	r2, [pc, #284]	; (8002d40 <TIM_Base_SetConfig+0x150>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d007      	beq.n	8002c38 <TIM_Base_SetConfig+0x48>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a46      	ldr	r2, [pc, #280]	; (8002d44 <TIM_Base_SetConfig+0x154>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d003      	beq.n	8002c38 <TIM_Base_SetConfig+0x48>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a45      	ldr	r2, [pc, #276]	; (8002d48 <TIM_Base_SetConfig+0x158>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d108      	bne.n	8002c4a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a39      	ldr	r2, [pc, #228]	; (8002d34 <TIM_Base_SetConfig+0x144>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d023      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d01f      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a36      	ldr	r2, [pc, #216]	; (8002d38 <TIM_Base_SetConfig+0x148>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01b      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a35      	ldr	r2, [pc, #212]	; (8002d3c <TIM_Base_SetConfig+0x14c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d017      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a34      	ldr	r2, [pc, #208]	; (8002d40 <TIM_Base_SetConfig+0x150>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a33      	ldr	r2, [pc, #204]	; (8002d44 <TIM_Base_SetConfig+0x154>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00f      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a33      	ldr	r2, [pc, #204]	; (8002d4c <TIM_Base_SetConfig+0x15c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00b      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a32      	ldr	r2, [pc, #200]	; (8002d50 <TIM_Base_SetConfig+0x160>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d007      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a31      	ldr	r2, [pc, #196]	; (8002d54 <TIM_Base_SetConfig+0x164>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d003      	beq.n	8002c9a <TIM_Base_SetConfig+0xaa>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <TIM_Base_SetConfig+0x158>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d108      	bne.n	8002cac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <TIM_Base_SetConfig+0x144>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d013      	beq.n	8002d00 <TIM_Base_SetConfig+0x110>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <TIM_Base_SetConfig+0x154>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00f      	beq.n	8002d00 <TIM_Base_SetConfig+0x110>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a1a      	ldr	r2, [pc, #104]	; (8002d4c <TIM_Base_SetConfig+0x15c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00b      	beq.n	8002d00 <TIM_Base_SetConfig+0x110>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <TIM_Base_SetConfig+0x160>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d007      	beq.n	8002d00 <TIM_Base_SetConfig+0x110>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a18      	ldr	r2, [pc, #96]	; (8002d54 <TIM_Base_SetConfig+0x164>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_Base_SetConfig+0x110>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a13      	ldr	r2, [pc, #76]	; (8002d48 <TIM_Base_SetConfig+0x158>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d103      	bne.n	8002d08 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f023 0201 	bic.w	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	611a      	str	r2, [r3, #16]
  }
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	40000c00 	.word	0x40000c00
 8002d44:	40013400 	.word	0x40013400
 8002d48:	40015000 	.word	0x40015000
 8002d4c:	40014000 	.word	0x40014000
 8002d50:	40014400 	.word	0x40014400
 8002d54:	40014800 	.word	0x40014800

08002d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e074      	b.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a34      	ldr	r2, [pc, #208]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a33      	ldr	r2, [pc, #204]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a31      	ldr	r2, [pc, #196]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d01d      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d018      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a11      	ldr	r2, [pc, #68]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10c      	bne.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	40013400 	.word	0x40013400
 8002e70:	40015000 	.word	0x40015000
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40014000 	.word	0x40014000

08002e84 <memset>:
 8002e84:	4402      	add	r2, r0
 8002e86:	4603      	mov	r3, r0
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d100      	bne.n	8002e8e <memset+0xa>
 8002e8c:	4770      	bx	lr
 8002e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e92:	e7f9      	b.n	8002e88 <memset+0x4>

08002e94 <__libc_init_array>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	4d0d      	ldr	r5, [pc, #52]	; (8002ecc <__libc_init_array+0x38>)
 8002e98:	4c0d      	ldr	r4, [pc, #52]	; (8002ed0 <__libc_init_array+0x3c>)
 8002e9a:	1b64      	subs	r4, r4, r5
 8002e9c:	10a4      	asrs	r4, r4, #2
 8002e9e:	2600      	movs	r6, #0
 8002ea0:	42a6      	cmp	r6, r4
 8002ea2:	d109      	bne.n	8002eb8 <__libc_init_array+0x24>
 8002ea4:	4d0b      	ldr	r5, [pc, #44]	; (8002ed4 <__libc_init_array+0x40>)
 8002ea6:	4c0c      	ldr	r4, [pc, #48]	; (8002ed8 <__libc_init_array+0x44>)
 8002ea8:	f000 f818 	bl	8002edc <_init>
 8002eac:	1b64      	subs	r4, r4, r5
 8002eae:	10a4      	asrs	r4, r4, #2
 8002eb0:	2600      	movs	r6, #0
 8002eb2:	42a6      	cmp	r6, r4
 8002eb4:	d105      	bne.n	8002ec2 <__libc_init_array+0x2e>
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebc:	4798      	blx	r3
 8002ebe:	3601      	adds	r6, #1
 8002ec0:	e7ee      	b.n	8002ea0 <__libc_init_array+0xc>
 8002ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec6:	4798      	blx	r3
 8002ec8:	3601      	adds	r6, #1
 8002eca:	e7f2      	b.n	8002eb2 <__libc_init_array+0x1e>
 8002ecc:	08002f04 	.word	0x08002f04
 8002ed0:	08002f04 	.word	0x08002f04
 8002ed4:	08002f04 	.word	0x08002f04
 8002ed8:	08002f08 	.word	0x08002f08

08002edc <_init>:
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	bf00      	nop
 8002ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee2:	bc08      	pop	{r3}
 8002ee4:	469e      	mov	lr, r3
 8002ee6:	4770      	bx	lr

08002ee8 <_fini>:
 8002ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eea:	bf00      	nop
 8002eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eee:	bc08      	pop	{r3}
 8002ef0:	469e      	mov	lr, r3
 8002ef2:	4770      	bx	lr
