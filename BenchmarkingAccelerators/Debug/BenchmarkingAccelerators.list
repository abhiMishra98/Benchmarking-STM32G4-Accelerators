
BenchmarkingAccelerators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003740  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003928  08003928  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08003928  08003928  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003928  08003928  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08003930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000210  08003b40  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08003b40  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e93a  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002207  00000000  00000000  0002ebbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00030dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026652  00000000  00000000  00031ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010aee  00000000  00000000  00058332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa3ac  00000000  00000000  00068e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000b8b  00000000  00000000  001631cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003eec  00000000  00000000  00163d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00167c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003900 	.word	0x08003900

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	08003900 	.word	0x08003900

08000218 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b08e      	sub	sp, #56	; 0x38
 800021c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800021e:	f000 fbd6 	bl	80009ce <HAL_Init>

	/* USER CODE BEGIN Init */
	arm_fir_init_q15(&A, NUMTAPS, fir_coeffs, firStateQ15, BLOCK_SIZE);
 8000222:	2301      	movs	r3, #1
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	4b31      	ldr	r3, [pc, #196]	; (80002ec <main+0xd4>)
 8000228:	4a31      	ldr	r2, [pc, #196]	; (80002f0 <main+0xd8>)
 800022a:	2116      	movs	r1, #22
 800022c:	4831      	ldr	r0, [pc, #196]	; (80002f4 <main+0xdc>)
 800022e:	f000 fba4 	bl	800097a <arm_fir_init_q15>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000232:	f000 f869 	bl	8000308 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000236:	f000 f96b 	bl	8000510 <MX_GPIO_Init>
	MX_DMA_Init();
 800023a:	f000 f93f 	bl	80004bc <MX_DMA_Init>
	MX_FMAC_Init();
 800023e:	f000 f8f3 	bl	8000428 <MX_FMAC_Init>
	MX_DAC1_Init();
 8000242:	f000 f8ad 	bl	80003a0 <MX_DAC1_Init>
	MX_TIM6_Init();
 8000246:	f000 f903 	bl	8000450 <MX_TIM6_Init>

	/* USER CODE BEGIN 2 */
	/* declare a filter configuration structure */
	FMAC_FilterConfigTypeDef sFmacConfig;
	/* Set the coefficient buffer base address */
	sFmacConfig.CoeffBaseAddress = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	723b      	strb	r3, [r7, #8]
	/* Set the coefficient buffer size to the number of coeffs */
	sFmacConfig.CoeffBufferSize = 1;
 800024e:	2301      	movs	r3, #1
 8000250:	727b      	strb	r3, [r7, #9]
	/* Set the Input buffer base address to the next free address */
	sFmacConfig.InputBaseAddress = 51;
 8000252:	2333      	movs	r3, #51	; 0x33
 8000254:	703b      	strb	r3, [r7, #0]
	/* Set the input buffer size greater than the number of coeffs */
	sFmacConfig.InputBufferSize = 100;
 8000256:	2364      	movs	r3, #100	; 0x64
 8000258:	707b      	strb	r3, [r7, #1]
	/* Set the input watermark to zero since we are using DMA */
	sFmacConfig.InputThreshold = 1;
 800025a:	2301      	movs	r3, #1
 800025c:	607b      	str	r3, [r7, #4]
	/* Set the Output buffer base address to the next free address */
	sFmacConfig.OutputBaseAddress = 151;
 800025e:	2397      	movs	r3, #151	; 0x97
 8000260:	72bb      	strb	r3, [r7, #10]
	/* Set the output buffer size */
	sFmacConfig.OutputBufferSize = 100;
 8000262:	2364      	movs	r3, #100	; 0x64
 8000264:	72fb      	strb	r3, [r7, #11]
	/* Set the output watermark to zero since we are using DMA */
	sFmacConfig.OutputThreshold = 1;
 8000266:	2301      	movs	r3, #1
 8000268:	60fb      	str	r3, [r7, #12]
	/* No A coefficients since FIR. To be used in IIR filter */
	sFmacConfig.pCoeffA = NULL;
 800026a:	2300      	movs	r3, #0
 800026c:	613b      	str	r3, [r7, #16]
	sFmacConfig.CoeffASize = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	753b      	strb	r3, [r7, #20]
	/* Pointer to the coefficients in memory */
	sFmacConfig.pCoeffB = fir_coeffs;
 8000272:	4b1f      	ldr	r3, [pc, #124]	; (80002f0 <main+0xd8>)
 8000274:	61bb      	str	r3, [r7, #24]
	/* Number of coefficients */
	sFmacConfig.CoeffBSize = 1;
 8000276:	2301      	movs	r3, #1
 8000278:	773b      	strb	r3, [r7, #28]
	/* Select FIR filter function */
	sFmacConfig.Filter = FMAC_FUNC_CONVO_FIR;
 800027a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800027e:	627b      	str	r3, [r7, #36]	; 0x24
	/* Enable DMA input transfer */
	sFmacConfig.InputAccess = FMAC_BUFFER_ACCESS_POLLING;
 8000280:	2302      	movs	r3, #2
 8000282:	777b      	strb	r3, [r7, #29]
	/* Enable DMA output transfer */
	sFmacConfig.OutputAccess = FMAC_BUFFER_ACCESS_POLLING;
 8000284:	2302      	movs	r3, #2
 8000286:	77bb      	strb	r3, [r7, #30]
	/* Enable clipping of the output at 0x7FFF and 0x8000 */
	sFmacConfig.Clip = FMAC_CLIP_ENABLED;
 8000288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800028c:	623b      	str	r3, [r7, #32]
	/* P parameter contains number of coefficients */
	sFmacConfig.P = 1; //Number of taps[FIR]
 800028e:	2301      	movs	r3, #1
 8000290:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	/* Q parameter is not used */
	sFmacConfig.Q = 0; //Don't care [FIR]
 8000294:	2300      	movs	r3, #0
 8000296:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	/* R parameter contains the post-shift value (none. To be used in IIR filters */
	sFmacConfig.R = 0; //Gain[FIR]
 800029a:	2300      	movs	r3, #0
 800029c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	/* Configure the FMAC */
	if (HAL_FMAC_FilterConfig(&hfmac, &sFmacConfig) != HAL_OK)
 80002a0:	463b      	mov	r3, r7
 80002a2:	4619      	mov	r1, r3
 80002a4:	4814      	ldr	r0, [pc, #80]	; (80002f8 <main+0xe0>)
 80002a6:	f001 fa3a 	bl	800171e <HAL_FMAC_FilterConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <main+0x9c>
		/* Configuration Error */
		Error_Handler();
 80002b0:	f000 f9bc 	bl	800062c <Error_Handler>
	HAL_FMAC_FilterPreload(&hfmac, &lut[0], 1, NULL, 0);
 80002b4:	2300      	movs	r3, #0
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2300      	movs	r3, #0
 80002ba:	2201      	movs	r2, #1
 80002bc:	490f      	ldr	r1, [pc, #60]	; (80002fc <main+0xe4>)
 80002be:	480e      	ldr	r0, [pc, #56]	; (80002f8 <main+0xe0>)
 80002c0:	f001 fa3c 	bl	800173c <HAL_FMAC_FilterPreload>
	HAL_StatusTypeDef startStatus;
	startStatus = HAL_FMAC_FilterStart(&hfmac, NULL, 100);
 80002c4:	2264      	movs	r2, #100	; 0x64
 80002c6:	2100      	movs	r1, #0
 80002c8:	480b      	ldr	r0, [pc, #44]	; (80002f8 <main+0xe0>)
 80002ca:	f001 fa4e 	bl	800176a <HAL_FMAC_FilterStart>
 80002ce:	4603      	mov	r3, r0
 80002d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (startStatus == HAL_OK) {
 80002d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d106      	bne.n	80002ea <main+0xd2>
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80002dc:	2100      	movs	r1, #0
 80002de:	4808      	ldr	r0, [pc, #32]	; (8000300 <main+0xe8>)
 80002e0:	f000 fd18 	bl	8000d14 <HAL_DAC_Start>
		HAL_TIM_Base_Start_IT(&htim6);
 80002e4:	4807      	ldr	r0, [pc, #28]	; (8000304 <main+0xec>)
 80002e6:	f003 f91d 	bl	8003524 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start_IT(&htim6);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80002ea:	e7fe      	b.n	80002ea <main+0xd2>
 80002ec:	20000330 	.word	0x20000330
 80002f0:	20000000 	.word	0x20000000
 80002f4:	20000324 	.word	0x20000324
 80002f8:	20000240 	.word	0x20000240
 80002fc:	20000004 	.word	0x20000004
 8000300:	2000022c 	.word	0x2000022c
 8000304:	200002d8 	.word	0x200002d8

08000308 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b094      	sub	sp, #80	; 0x50
 800030c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	2238      	movs	r2, #56	; 0x38
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fac6 	bl	80038a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800032a:	2000      	movs	r0, #0
 800032c:	f002 faec 	bl	8002908 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000330:	2302      	movs	r3, #2
 8000332:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000338:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033a:	2340      	movs	r3, #64	; 0x40
 800033c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033e:	2302      	movs	r3, #2
 8000340:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000342:	2302      	movs	r3, #2
 8000344:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000346:	2304      	movs	r3, #4
 8000348:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800034a:	2355      	movs	r3, #85	; 0x55
 800034c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800034e:	2302      	movs	r3, #2
 8000350:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000352:	2302      	movs	r3, #2
 8000354:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000356:	2302      	movs	r3, #2
 8000358:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fb86 	bl	8002a70 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x66>
		Error_Handler();
 800036a:	f000 f95f 	bl	800062c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	2303      	movs	r3, #3
 8000374:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2104      	movs	r1, #4
 8000386:	4618      	mov	r0, r3
 8000388:	f002 fe84 	bl	8003094 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x8e>
		Error_Handler();
 8000392:	f000 f94b 	bl	800062c <Error_Handler>
	}
}
 8000396:	bf00      	nop
 8000398:	3750      	adds	r7, #80	; 0x50
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08c      	sub	sp, #48	; 0x30
 80003a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80003a6:	463b      	mov	r3, r7
 80003a8:	2230      	movs	r2, #48	; 0x30
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 fa7b 	bl	80038a8 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80003b2:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_DAC1_Init+0x80>)
 80003b4:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <MX_DAC1_Init+0x84>)
 80003b6:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80003b8:	4819      	ldr	r0, [pc, #100]	; (8000420 <MX_DAC1_Init+0x80>)
 80003ba:	f000 fc88 	bl	8000cce <HAL_DAC_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_DAC1_Init+0x28>
		Error_Handler();
 80003c4:	f000 f932 	bl	800062c <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80003c8:	2302      	movs	r3, #2
 80003ca:	603b      	str	r3, [r7, #0]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	713b      	strb	r3, [r7, #4]
	sConfig.DAC_SignedFormat = DISABLE;
 80003d0:	2300      	movs	r3, #0
 80003d2:	717b      	strb	r3, [r7, #5]
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80003e4:	2301      	movs	r3, #1
 80003e6:	61bb      	str	r3, [r7, #24]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80003ec:	463b      	mov	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	4619      	mov	r1, r3
 80003f2:	480b      	ldr	r0, [pc, #44]	; (8000420 <MX_DAC1_Init+0x80>)
 80003f4:	f000 fd28 	bl	8000e48 <HAL_DAC_ConfigChannel>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_DAC1_Init+0x62>
		Error_Handler();
 80003fe:	f000 f915 	bl	800062c <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8000402:	463b      	mov	r3, r7
 8000404:	2210      	movs	r2, #16
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_DAC1_Init+0x80>)
 800040a:	f000 fd1d 	bl	8000e48 <HAL_DAC_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_DAC1_Init+0x78>
		Error_Handler();
 8000414:	f000 f90a 	bl	800062c <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	3730      	adds	r7, #48	; 0x30
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000022c 	.word	0x2000022c
 8000424:	50000800 	.word	0x50000800

08000428 <MX_FMAC_Init>:
/**
 * @brief FMAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_FMAC_Init(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	/* USER CODE END FMAC_Init 0 */

	/* USER CODE BEGIN FMAC_Init 1 */

	/* USER CODE END FMAC_Init 1 */
	hfmac.Instance = FMAC;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <MX_FMAC_Init+0x20>)
 800042e:	4a07      	ldr	r2, [pc, #28]	; (800044c <MX_FMAC_Init+0x24>)
 8000430:	601a      	str	r2, [r3, #0]
	if (HAL_FMAC_Init(&hfmac) != HAL_OK) {
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <MX_FMAC_Init+0x20>)
 8000434:	f001 f932 	bl	800169c <HAL_FMAC_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_FMAC_Init+0x1a>
		Error_Handler();
 800043e:	f000 f8f5 	bl	800062c <Error_Handler>
	}
	/* USER CODE BEGIN FMAC_Init 2 */

	/* USER CODE END FMAC_Init 2 */

}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000240 	.word	0x20000240
 800044c:	40021400 	.word	0x40021400

08000450 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_TIM6_Init+0x64>)
 8000462:	4a15      	ldr	r2, [pc, #84]	; (80004b8 <MX_TIM6_Init+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 169;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_TIM6_Init+0x64>)
 8000468:	22a9      	movs	r2, #169	; 0xa9
 800046a:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_TIM6_Init+0x64>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 20;
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <MX_TIM6_Init+0x64>)
 8000474:	2214      	movs	r2, #20
 8000476:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000478:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_TIM6_Init+0x64>)
 800047a:	2200      	movs	r2, #0
 800047c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800047e:	480d      	ldr	r0, [pc, #52]	; (80004b4 <MX_TIM6_Init+0x64>)
 8000480:	f002 fff8 	bl	8003474 <HAL_TIM_Base_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM6_Init+0x3e>
		Error_Handler();
 800048a:	f000 f8cf 	bl	800062c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800048e:	2320      	movs	r3, #32
 8000490:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	4806      	ldr	r0, [pc, #24]	; (80004b4 <MX_TIM6_Init+0x64>)
 800049c:	f003 f96e 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM6_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 80004a6:	f000 f8c1 	bl	800062c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200002d8 	.word	0x200002d8
 80004b8:	40001000 	.word	0x40001000

080004bc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_DMA_Init+0x50>)
 80004c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <MX_DMA_Init+0x50>)
 80004c8:	f043 0304 	orr.w	r3, r3, #4
 80004cc:	6493      	str	r3, [r2, #72]	; 0x48
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_DMA_Init+0x50>)
 80004d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004d2:	f003 0304 	and.w	r3, r3, #4
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_DMA_Init+0x50>)
 80004dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <MX_DMA_Init+0x50>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6493      	str	r3, [r2, #72]	; 0x48
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_DMA_Init+0x50>)
 80004e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	200b      	movs	r0, #11
 80004f8:	f000 fbb5 	bl	8000c66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004fc:	200b      	movs	r0, #11
 80004fe:	f000 fbcc 	bl	8000c9a <HAL_NVIC_EnableIRQ>

}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <MX_GPIO_Init+0x110>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a3d      	ldr	r2, [pc, #244]	; (8000620 <MX_GPIO_Init+0x110>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b3b      	ldr	r3, [pc, #236]	; (8000620 <MX_GPIO_Init+0x110>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800053e:	4b38      	ldr	r3, [pc, #224]	; (8000620 <MX_GPIO_Init+0x110>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a37      	ldr	r2, [pc, #220]	; (8000620 <MX_GPIO_Init+0x110>)
 8000544:	f043 0320 	orr.w	r3, r3, #32
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b35      	ldr	r3, [pc, #212]	; (8000620 <MX_GPIO_Init+0x110>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f003 0320 	and.w	r3, r3, #32
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000556:	4b32      	ldr	r3, [pc, #200]	; (8000620 <MX_GPIO_Init+0x110>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a31      	ldr	r2, [pc, #196]	; (8000620 <MX_GPIO_Init+0x110>)
 800055c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <MX_GPIO_Init+0x110>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <MX_GPIO_Init+0x110>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a2b      	ldr	r2, [pc, #172]	; (8000620 <MX_GPIO_Init+0x110>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <MX_GPIO_Init+0x110>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <MX_GPIO_Init+0x110>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a25      	ldr	r2, [pc, #148]	; (8000620 <MX_GPIO_Init+0x110>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b23      	ldr	r3, [pc, #140]	; (8000620 <MX_GPIO_Init+0x110>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a4:	481f      	ldr	r0, [pc, #124]	; (8000624 <MX_GPIO_Init+0x114>)
 80005a6:	f002 f973 	bl	8002890 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	4819      	ldr	r0, [pc, #100]	; (8000628 <MX_GPIO_Init+0x118>)
 80005c2:	f001 ffe3 	bl	800258c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80005c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	4811      	ldr	r0, [pc, #68]	; (8000624 <MX_GPIO_Init+0x114>)
 80005e0:	f001 ffd4 	bl	800258c <HAL_GPIO_Init>

	/*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
	GPIO_InitStruct.Pin = LPUART1_TX_Pin | LPUART1_RX_Pin;
 80005e4:	230c      	movs	r3, #12
 80005e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80005f4:	230c      	movs	r3, #12
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4619      	mov	r1, r3
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f001 ffc3 	bl	800258c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2028      	movs	r0, #40	; 0x28
 800060c:	f000 fb2b 	bl	8000c66 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000610:	2028      	movs	r0, #40	; 0x28
 8000612:	f000 fb42 	bl	8000c9a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	; 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000
 8000624:	48001800 	.word	0x48001800
 8000628:	48000800 	.word	0x48000800

0800062c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x44>)
 8000640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000642:	4a0e      	ldr	r2, [pc, #56]	; (800067c <HAL_MspInit+0x44>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6613      	str	r3, [r2, #96]	; 0x60
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x44>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_MspInit+0x44>)
 8000658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <HAL_MspInit+0x44>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6593      	str	r3, [r2, #88]	; 0x58
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_MspInit+0x44>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800066e:	f002 f9ef 	bl	8002a50 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a19      	ldr	r2, [pc, #100]	; (8000704 <HAL_DAC_MspInit+0x84>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d12c      	bne.n	80006fc <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_DAC_MspInit+0x88>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	4a18      	ldr	r2, [pc, #96]	; (8000708 <HAL_DAC_MspInit+0x88>)
 80006a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <HAL_DAC_MspInit+0x88>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <HAL_DAC_MspInit+0x88>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <HAL_DAC_MspInit+0x88>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HAL_DAC_MspInit+0x88>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006d2:	2330      	movs	r3, #48	; 0x30
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f001 ff50 	bl	800258c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2036      	movs	r0, #54	; 0x36
 80006f2:	f000 fab8 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80006f6:	2036      	movs	r0, #54	; 0x36
 80006f8:	f000 facf 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50000800 	.word	0x50000800
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <HAL_FMAC_MspInit+0x98>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d13e      	bne.n	800079c <HAL_FMAC_MspInit+0x90>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <HAL_FMAC_MspInit+0x9c>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000722:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <HAL_FMAC_MspInit+0x9c>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	6493      	str	r3, [r2, #72]	; 0x48
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <HAL_FMAC_MspInit+0x9c>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800072e:	f003 0310 	and.w	r3, r3, #16
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]

    /* FMAC DMA Init */
    /* FMAC_WRITE Init */
    hdma_fmac_write.Instance = DMA1_Channel1;
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 8000738:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <HAL_FMAC_MspInit+0xa4>)
 800073a:	601a      	str	r2, [r3, #0]
    hdma_fmac_write.Init.Request = DMA_REQUEST_FMAC_WRITE;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 800073e:	226f      	movs	r2, #111	; 0x6f
 8000740:	605a      	str	r2, [r3, #4]
    hdma_fmac_write.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 8000744:	2210      	movs	r2, #16
 8000746:	609a      	str	r2, [r3, #8]
    hdma_fmac_write.Init.PeriphInc = DMA_PINC_DISABLE;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    hdma_fmac_write.Init.MemInc = DMA_MINC_ENABLE;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	611a      	str	r2, [r3, #16]
    hdma_fmac_write.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 8000756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075a:	615a      	str	r2, [r3, #20]
    hdma_fmac_write.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 800075e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000762:	619a      	str	r2, [r3, #24]
    hdma_fmac_write.Init.Mode = DMA_NORMAL;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
    hdma_fmac_write.Init.Priority = DMA_PRIORITY_LOW;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_fmac_write) != HAL_OK)
 8000770:	480e      	ldr	r0, [pc, #56]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 8000772:	f000 fd21 	bl	80011b8 <HAL_DMA_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <HAL_FMAC_MspInit+0x74>
    {
      Error_Handler();
 800077c:	f7ff ff56 	bl	800062c <Error_Handler>
    }

    __HAL_LINKDMA(hfmac,hdmaIn,hdma_fmac_write);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
 8000786:	4a09      	ldr	r2, [pc, #36]	; (80007ac <HAL_FMAC_MspInit+0xa0>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6293      	str	r3, [r2, #40]	; 0x28

    /* FMAC interrupt Init */
    HAL_NVIC_SetPriority(FMAC_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2065      	movs	r0, #101	; 0x65
 8000792:	f000 fa68 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMAC_IRQn);
 8000796:	2065      	movs	r0, #101	; 0x65
 8000798:	f000 fa7f 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021400 	.word	0x40021400
 80007a8:	40021000 	.word	0x40021000
 80007ac:	20000278 	.word	0x20000278
 80007b0:	40020008 	.word	0x40020008

080007b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <HAL_TIM_Base_MspInit+0x44>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d113      	bne.n	80007ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <HAL_TIM_Base_MspInit+0x48>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <HAL_TIM_Base_MspInit+0x48>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_TIM_Base_MspInit+0x48>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2036      	movs	r0, #54	; 0x36
 80007e4:	f000 fa3f 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007e8:	2036      	movs	r0, #54	; 0x36
 80007ea:	f000 fa56 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40001000 	.word	0x40001000
 80007fc:	40021000 	.word	0x40021000

08000800 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800084c:	f000 f912 	bl	8000a74 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <DMA1_Channel1_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_fmac_write);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <DMA1_Channel1_IRQHandler+0x10>)
 800085a:	f000 fdd0 	bl	80013fe <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000278 	.word	0x20000278

08000868 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800086c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000870:	f002 f826 	bl	80028c0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	static int lutIndex = 0;
//	For FMAC implementation [polling]
	if (__HAL_FMAC_GET_FLAG(&hfmac, FMAC_FLAG_YEMPTY) != FMAC_FLAG_YEMPTY) {
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <TIM6_DAC_IRQHandler+0x68>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	2b01      	cmp	r3, #1
 800088a:	d00f      	beq.n	80008ac <TIM6_DAC_IRQHandler+0x34>
		int16_t result = hfmac.Instance->RDATA;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <TIM6_DAC_IRQHandler+0x68>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	80fb      	strh	r3, [r7, #6]
		uint32_t dacVal = (uint32_t) (((int32_t) result + 32768) >> 4); // scale to 12-bit
 8000894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000898:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800089c:	111b      	asrs	r3, r3, #4
 800089e:	603b      	str	r3, [r7, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacVal);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	480f      	ldr	r0, [pc, #60]	; (80008e4 <TIM6_DAC_IRQHandler+0x6c>)
 80008a8:	f000 faa0 	bl	8000dec <HAL_DAC_SetValue>
	}
	HAL_StatusTypeDef status;
	if (__HAL_FMAC_GET_FLAG(&hfmac, FMAC_FLAG_X1FULL) != FMAC_FLAG_X1FULL) {
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <TIM6_DAC_IRQHandler+0x68>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	695b      	ldr	r3, [r3, #20]
		hfmac.Instance->WDATA = lut[lutIndex++];
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <TIM6_DAC_IRQHandler+0x70>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	490b      	ldr	r1, [pc, #44]	; (80008e8 <TIM6_DAC_IRQHandler+0x70>)
 80008ba:	600a      	str	r2, [r1, #0]
 80008bc:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <TIM6_DAC_IRQHandler+0x74>)
 80008be:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <TIM6_DAC_IRQHandler+0x68>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	619a      	str	r2, [r3, #24]
//	arm_fir_q15(&A, &lut[lutIndex++], filteredSample, BLOCK_SIZE);
//	q15_t q15_val = filteredSample[0];
//	uint32_t dac_val = (uint32_t) (((int32_t) q15_val + 32768) >> 4); //Scale to 0–4095
//	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
//
	if (lutIndex == 255) {
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <TIM6_DAC_IRQHandler+0x70>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2bff      	cmp	r3, #255	; 0xff
 80008ce:	d102      	bne.n	80008d6 <TIM6_DAC_IRQHandler+0x5e>
		lutIndex = 0;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <TIM6_DAC_IRQHandler+0x70>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
	/* USER CODE END TIM6_DAC_IRQn 0 */

	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000240 	.word	0x20000240
 80008e4:	2000022c 	.word	0x2000022c
 80008e8:	2000035c 	.word	0x2000035c
 80008ec:	20000004 	.word	0x20000004

080008f0 <FMAC_IRQHandler>:

/**
 * @brief This function handles FMAC interrupt.
 */
void FMAC_IRQHandler(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN FMAC_IRQn 0 */

	/* USER CODE END FMAC_IRQn 0 */
	HAL_FMAC_IRQHandler(&hfmac);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <FMAC_IRQHandler+0x10>)
 80008f6:	f000 ffdc 	bl	80018b2 <HAL_FMAC_IRQHandler>
	/* USER CODE BEGIN FMAC_IRQn 1 */

	/* USER CODE END FMAC_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000240 	.word	0x20000240

08000904 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <SystemInit+0x20>)
 800090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <SystemInit+0x20>)
 8000910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800092c:	f7ff ffea 	bl	8000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <LoopForever+0x6>)
  ldr r1, =_edata
 8000932:	490d      	ldr	r1, [pc, #52]	; (8000968 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <LoopForever+0xe>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000938:	e002      	b.n	8000940 <LoopCopyDataInit>

0800093a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800093c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093e:	3304      	adds	r3, #4

08000940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000944:	d3f9      	bcc.n	800093a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000948:	4c0a      	ldr	r4, [pc, #40]	; (8000974 <LoopForever+0x16>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800094c:	e001      	b.n	8000952 <LoopFillZerobss>

0800094e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000950:	3204      	adds	r2, #4

08000952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000954:	d3fb      	bcc.n	800094e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000956:	f002 ffaf 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800095a:	f7ff fc5d 	bl	8000218 <main>

0800095e <LoopForever>:

LoopForever:
    b LoopForever
 800095e:	e7fe      	b.n	800095e <LoopForever>
  ldr   r0, =_estack
 8000960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000968:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800096c:	08003930 	.word	0x08003930
  ldr r2, =_sbss
 8000970:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8000974:	20000364 	.word	0x20000364

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>

0800097a <arm_fir_init_q15>:
        arm_fir_instance_q15 * S,
        uint16_t numTaps,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	60f8      	str	r0, [r7, #12]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	460b      	mov	r3, r1
 8000988:	817b      	strh	r3, [r7, #10]
  arm_status status;

#if defined (ARM_MATH_DSP)

  /* The Number of filter coefficients in the filter must be even and at least 4 */
  if (numTaps & 0x1U)
 800098a:	897b      	ldrh	r3, [r7, #10]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <arm_fir_init_q15+0x20>
  {
    status = ARM_MATH_ARGUMENT_ERROR;
 8000994:	23ff      	movs	r3, #255	; 0xff
 8000996:	75fb      	strb	r3, [r7, #23]
 8000998:	e013      	b.n	80009c2 <arm_fir_init_q15+0x48>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	897a      	ldrh	r2, [r7, #10]
 800099e:	801a      	strh	r2, [r3, #0]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	609a      	str	r2, [r3, #8]

    /* Clear the state buffer.  The size is always (blockSize + numTaps ) */
    memset(pState, 0, (numTaps + (blockSize)) * sizeof(q15_t));
 80009a6:	897a      	ldrh	r2, [r7, #10]
 80009a8:	6a3b      	ldr	r3, [r7, #32]
 80009aa:	4413      	add	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	461a      	mov	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	6838      	ldr	r0, [r7, #0]
 80009b4:	f002 ff78 	bl	80038a8 <memset>

    /* Assign state pointer */
    S->pState = pState;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	605a      	str	r2, [r3, #4]

    status = ARM_MATH_SUCCESS;
 80009be:	2300      	movs	r3, #0
 80009c0:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 80009c2:	f997 3017 	ldrsb.w	r3, [r7, #23]

  return (status);

#endif /* #if defined (ARM_MATH_DSP) */

}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f939 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 f80e 	bl	8000a00 <HAL_InitTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	e001      	b.n	80009f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f0:	f7ff fe22 	bl	8000638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f4:	79fb      	ldrb	r3, [r7, #7]

}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_InitTick+0x68>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d022      	beq.n	8000a5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <HAL_InitTick+0x68>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f944 	bl	8000cb6 <HAL_SYSTICK_Config>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d10f      	bne.n	8000a54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b0f      	cmp	r3, #15
 8000a38:	d809      	bhi.n	8000a4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a42:	f000 f910 	bl	8000c66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_InitTick+0x70>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6013      	str	r3, [r2, #0]
 8000a4c:	e007      	b.n	8000a5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	e004      	b.n	8000a5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e001      	b.n	8000a5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000020c 	.word	0x2000020c
 8000a6c:	20000204 	.word	0x20000204
 8000a70:	20000208 	.word	0x20000208

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x20>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a03      	ldr	r2, [pc, #12]	; (8000a90 <HAL_IncTick+0x1c>)
 8000a84:	6013      	str	r3, [r2, #0]
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	20000360 	.word	0x20000360
 8000a94:	2000020c 	.word	0x2000020c

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000360 	.word	0x20000360

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4907      	ldr	r1, [pc, #28]	; (8000b4c <__NVIC_EnableIRQ+0x38>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	; (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	; 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff8e 	bl	8000b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff29 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff40 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff90 	bl	8000ba4 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5f 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff33 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffa4 	bl	8000c0c <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e014      	b.n	8000d0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	791b      	ldrb	r3, [r3, #4]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d105      	bne.n	8000cf6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fcc5 	bl	8000680 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d101      	bne.n	8000d28 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e056      	b.n	8000dd6 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	795b      	ldrb	r3, [r3, #5]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <HAL_DAC_Start+0x20>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e050      	b.n	8000dd6 <HAL_DAC_Start+0xc2>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6819      	ldr	r1, [r3, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	f003 0310 	and.w	r3, r3, #16
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_DAC_Start+0xd0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	099b      	lsrs	r3, r3, #6
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <HAL_DAC_Start+0xd4>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	099b      	lsrs	r3, r3, #6
 8000d66:	3301      	adds	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8000d6a:	e002      	b.n	8000d72 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f9      	bne.n	8000d6c <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10f      	bne.n	8000d9e <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d11d      	bne.n	8000dc8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	e014      	b.n	8000dc8 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	2102      	movs	r1, #2
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d107      	bne.n	8000dc8 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0202 	orr.w	r2, r2, #2
 8000dc6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000204 	.word	0x20000204
 8000de8:	053e2d63 	.word	0x053e2d63

08000dec <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e018      	b.n	8000e3a <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	3308      	adds	r3, #8
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e004      	b.n	8000e30 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3314      	adds	r3, #20
 8000e2e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	461a      	mov	r2, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	371c      	adds	r7, #28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <HAL_DAC_ConfigChannel+0x1c>
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e19e      	b.n	80011a6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	795b      	ldrb	r3, [r3, #5]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d101      	bne.n	8000e74 <HAL_DAC_ConfigChannel+0x2c>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e198      	b.n	80011a6 <HAL_DAC_ConfigChannel+0x35e>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2201      	movs	r2, #1
 8000e78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d17a      	bne.n	8000f7e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000e88:	f7ff fe06 	bl	8000a98 <HAL_GetTick>
 8000e8c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d13d      	bne.n	8000f10 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000e94:	e018      	b.n	8000ec8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000e96:	f7ff fdff 	bl	8000a98 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d911      	bls.n	8000ec8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00a      	beq.n	8000ec8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	f043 0208 	orr.w	r2, r3, #8
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e16e      	b.n	80011a6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ece:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1df      	bne.n	8000e96 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000ede:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee0:	e020      	b.n	8000f24 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000ee2:	f7ff fdd9 	bl	8000a98 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d90f      	bls.n	8000f10 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	da0a      	bge.n	8000f10 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	f043 0208 	orr.w	r2, r3, #8
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e14a      	b.n	80011a6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	dbe3      	blt.n	8000ee2 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f22:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	ea02 0103 	and.w	r1, r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	21ff      	movs	r1, #255	; 0xff
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	ea02 0103 	and.w	r1, r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f003 0310 	and.w	r3, r3, #16
 8000f74:	409a      	lsls	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d11d      	bne.n	8000fc2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	221f      	movs	r2, #31
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fda:	4013      	ands	r3, r2
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d102      	bne.n	8000fec <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
 8000fea:	e00f      	b.n	800100c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d102      	bne.n	8000ffa <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	e008      	b.n	800100c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d102      	bne.n	8001008 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001002:	2301      	movs	r3, #1
 8001004:	623b      	str	r3, [r7, #32]
 8001006:	e001      	b.n	800100c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	4313      	orrs	r3, r2
 8001016:	6a3a      	ldr	r2, [r7, #32]
 8001018:	4313      	orrs	r3, r2
 800101a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800102e:	4013      	ands	r3, r2
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	791b      	ldrb	r3, [r3, #4]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <HAL_DAC_ConfigChannel+0x1f8>
 800103a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103e:	e000      	b.n	8001042 <HAL_DAC_ConfigChannel+0x1fa>
 8001040:	2300      	movs	r3, #0
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4313      	orrs	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105a:	4013      	ands	r3, r2
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	795b      	ldrb	r3, [r3, #5]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d102      	bne.n	800106c <HAL_DAC_ConfigChannel+0x224>
 8001066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106a:	e000      	b.n	800106e <HAL_DAC_ConfigChannel+0x226>
 800106c:	2300      	movs	r3, #0
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4313      	orrs	r3, r2
 8001072:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d114      	bne.n	80010ae <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001084:	f002 f9a4 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 8001088:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_DAC_ConfigChannel+0x368>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d904      	bls.n	800109c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
 800109a:	e00f      	b.n	80010bc <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4a45      	ldr	r2, [pc, #276]	; (80011b4 <HAL_DAC_ConfigChannel+0x36c>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d90a      	bls.n	80010ba <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
 80010ac:	e006      	b.n	80010bc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b4:	4313      	orrs	r3, r2
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
 80010b8:	e000      	b.n	80010bc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80010ba:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0310 	and.w	r3, r3, #16
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ca:	4313      	orrs	r3, r2
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6819      	ldr	r1, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	400a      	ands	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800110e:	4013      	ands	r3, r2
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001126:	4313      	orrs	r3, r2
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001130:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	22c0      	movs	r2, #192	; 0xc0
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43da      	mvns	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4313      	orrs	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f003 0310 	and.w	r3, r3, #16
 8001178:	f640 710f 	movw	r1, #3855	; 0xf0f
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	ea02 0103 	and.w	r1, r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	409a      	lsls	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2201      	movs	r2, #1
 800119c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80011a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	09896800 	.word	0x09896800
 80011b4:	04c4b400 	.word	0x04c4b400

080011b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e08d      	b.n	80012e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <HAL_DMA_Init+0x138>)
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d80f      	bhi.n	80011f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <HAL_DMA_Init+0x13c>)
 80011de:	4413      	add	r3, r2
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_DMA_Init+0x140>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	009a      	lsls	r2, r3, #2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a42      	ldr	r2, [pc, #264]	; (80012fc <HAL_DMA_Init+0x144>)
 80011f2:	641a      	str	r2, [r3, #64]	; 0x40
 80011f4:	e00e      	b.n	8001214 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b40      	ldr	r3, [pc, #256]	; (8001300 <HAL_DMA_Init+0x148>)
 80011fe:	4413      	add	r3, r2
 8001200:	4a3d      	ldr	r2, [pc, #244]	; (80012f8 <HAL_DMA_Init+0x140>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	009a      	lsls	r2, r3, #2
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a3c      	ldr	r2, [pc, #240]	; (8001304 <HAL_DMA_Init+0x14c>)
 8001212:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800122a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800122e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f9b6 	bl	80015d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001274:	d102      	bne.n	800127c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001290:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d010      	beq.n	80012bc <HAL_DMA_Init+0x104>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d80c      	bhi.n	80012bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f9d6 	bl	8001654 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	e008      	b.n	80012ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40020407 	.word	0x40020407
 80012f4:	bffdfff8 	.word	0xbffdfff8
 80012f8:	cccccccd 	.word	0xcccccccd
 80012fc:	40020000 	.word	0x40020000
 8001300:	bffdfbf8 	.word	0xbffdfbf8
 8001304:	40020400 	.word	0x40020400

08001308 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_DMA_Start_IT+0x20>
 8001324:	2302      	movs	r3, #2
 8001326:	e066      	b.n	80013f6 <HAL_DMA_Start_IT+0xee>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d155      	bne.n	80013e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2202      	movs	r2, #2
 8001340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0201 	bic.w	r2, r2, #1
 8001358:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 f8fb 	bl	800155c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 020e 	orr.w	r2, r2, #14
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e00f      	b.n	80013a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0204 	bic.w	r2, r2, #4
 800138e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 020a 	orr.w	r2, r2, #10
 800139e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d007      	beq.n	80013be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0201 	orr.w	r2, r2, #1
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e005      	b.n	80013f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80013f0:	2302      	movs	r3, #2
 80013f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	2204      	movs	r2, #4
 8001420:	409a      	lsls	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d026      	beq.n	8001478 <HAL_DMA_IRQHandler+0x7a>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	d021      	beq.n	8001478 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	2b00      	cmp	r3, #0
 8001440:	d107      	bne.n	8001452 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0204 	bic.w	r2, r2, #4
 8001450:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f003 021f 	and.w	r2, r3, #31
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	2104      	movs	r1, #4
 8001460:	fa01 f202 	lsl.w	r2, r1, r2
 8001464:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	2b00      	cmp	r3, #0
 800146c:	d071      	beq.n	8001552 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001476:	e06c      	b.n	8001552 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	2202      	movs	r2, #2
 8001482:	409a      	lsls	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d02e      	beq.n	80014ea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d029      	beq.n	80014ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10b      	bne.n	80014bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 020a 	bic.w	r2, r2, #10
 80014b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	2102      	movs	r1, #2
 80014ca:	fa01 f202 	lsl.w	r2, r1, r2
 80014ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d038      	beq.n	8001552 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80014e8:	e033      	b.n	8001552 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	2208      	movs	r2, #8
 80014f4:	409a      	lsls	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d02a      	beq.n	8001554 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d025      	beq.n	8001554 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 020e 	bic.w	r2, r2, #14
 8001516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	2101      	movs	r1, #1
 8001526:	fa01 f202 	lsl.w	r2, r1, r2
 800152a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001552:	bf00      	nop
 8001554:	bf00      	nop
}
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001572:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001584:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f003 021f 	and.w	r2, r3, #31
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d108      	bne.n	80015bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015ba:	e007      	b.n	80015cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	60da      	str	r2, [r3, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d802      	bhi.n	80015f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e001      	b.n	80015f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80015f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	3b08      	subs	r3, #8
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	009a      	lsls	r2, r3, #2
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4413      	add	r3, r2
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001622:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	2201      	movs	r2, #1
 800162c:	409a      	lsls	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001632:	bf00      	nop
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40020407 	.word	0x40020407
 8001644:	40020800 	.word	0x40020800
 8001648:	40020820 	.word	0x40020820
 800164c:	cccccccd 	.word	0xcccccccd
 8001650:	40020880 	.word	0x40020880

08001654 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a08      	ldr	r2, [pc, #32]	; (8001698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001676:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3b01      	subs	r3, #1
 800167c:	f003 031f 	and.w	r3, r3, #31
 8001680:	2201      	movs	r2, #1
 8001682:	409a      	lsls	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	1000823f 	.word	0x1000823f
 8001698:	40020940 	.word	0x40020940

0800169c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e033      	b.n	8001716 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d106      	bne.n	80016c8 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff f822 	bl	800070c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f9e1 	bl	8001a96 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f9af 	bl	8001a38 <FMAC_Reset>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d10c      	bne.n	80016fa <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e4:	f043 0210 	orr.w	r2, r3, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	22a0      	movs	r2, #160	; 0xa0
 80016f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e008      	b.n	800170c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2220      	movs	r2, #32
 8001704:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_FMAC_FilterConfig>:
  * @param  pConfig pointer to a FMAC_FilterConfigTypeDef structure that
  *         contains the FMAC configuration information.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterConfig(FMAC_HandleTypeDef *hfmac, FMAC_FilterConfigTypeDef *pConfig)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  return (FMAC_FilterConfig(hfmac, pConfig, PRELOAD_ACCESS_POLLING));
 8001728:	2201      	movs	r2, #1
 800172a:	6839      	ldr	r1, [r7, #0]
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f9ef 	bl	8001b10 <FMAC_FilterConfig>
 8001732:	4603      	mov	r3, r0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_FMAC_FilterPreload>:
  *         all these calls), an error will be returned.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterPreload(FMAC_HandleTypeDef *hfmac, int16_t *pInput, uint8_t InputSize,
                                         int16_t *pOutput, uint8_t OutputSize)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af02      	add	r7, sp, #8
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	71fb      	strb	r3, [r7, #7]
  return (FMAC_FilterPreload(hfmac, pInput, InputSize, pOutput, OutputSize, PRELOAD_ACCESS_POLLING));
 800174c:	79fa      	ldrb	r2, [r7, #7]
 800174e:	2301      	movs	r3, #1
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	7e3b      	ldrb	r3, [r7, #24]
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 fb14 	bl	8001d88 <FMAC_FilterPreload>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_FMAC_FilterStart>:
  *         an external IP to empty the output buffer.
  * @param  pOutputSize pointer to the size of the output buffer. The number of read data will be written here.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_FilterStart(FMAC_HandleTypeDef *hfmac, int16_t *pOutput, uint16_t *pOutputSize)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  uint32_t tmpcr = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	da01      	bge.n	8001788 <HAL_FMAC_FilterStart+0x1e>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e054      	b.n	8001832 <HAL_FMAC_FilterStart+0xc8>
  }

  /* Check that a valid configuration was done previously */
  if (hfmac->FilterParam == 0U)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_FMAC_FilterStart+0x2a>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e04e      	b.n	8001832 <HAL_FMAC_FilterStart+0xc8>
  }

  /* Check handle state is ready */
  if (hfmac->State == HAL_FMAC_STATE_READY)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b20      	cmp	r3, #32
 800179e:	d145      	bne.n	800182c <HAL_FMAC_FilterStart+0xc2>
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_BUSY;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2224      	movs	r2, #36	; 0x24
 80017a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* CR: Configure the input access (error interruptions enabled only for IT or DMA) */
    if (hfmac->InputAccess == FMAC_BUFFER_ACCESS_DMA)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	7a1b      	ldrb	r3, [r3, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d104      	bne.n	80017ba <HAL_FMAC_FilterStart+0x50>
    {
      tmpcr |= FMAC_DMA_WEN;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e007      	b.n	80017ca <HAL_FMAC_FilterStart+0x60>
    }
    else if (hfmac->InputAccess == FMAC_BUFFER_ACCESS_IT)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	7a1b      	ldrb	r3, [r3, #8]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d103      	bne.n	80017ca <HAL_FMAC_FilterStart+0x60>
    {
      tmpcr |= FMAC_IT_WIEN;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	617b      	str	r3, [r7, #20]
    {
      /* nothing to do */
    }

    /* CR: Configure the output access (error interruptions enabled only for IT or DMA) */
    if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_DMA)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	7a5b      	ldrb	r3, [r3, #9]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d104      	bne.n	80017dc <HAL_FMAC_FilterStart+0x72>
    {
      tmpcr |= FMAC_DMA_REN;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e007      	b.n	80017ec <HAL_FMAC_FilterStart+0x82>
    }
    else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_IT)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	7a5b      	ldrb	r3, [r3, #9]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d103      	bne.n	80017ec <HAL_FMAC_FilterStart+0x82>
    {
      tmpcr |= FMAC_IT_RIEN;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
    {
      /* nothing to do */
    }

    /* CR: Write the configuration */
    MODIFY_REG(hfmac->Instance->CR, \
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f6:	f023 0303 	bic.w	r3, r3, #3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	6979      	ldr	r1, [r7, #20]
 8001800:	430b      	orrs	r3, r1
 8001802:	6113      	str	r3, [r2, #16]
               FMAC_IT_RIEN | FMAC_IT_WIEN | FMAC_DMA_REN | FMAC_CR_DMAWEN, \
               tmpcr);

    /* Register the new output buffer */
    status = FMAC_ConfigFilterOutputBufferUpdateState(hfmac, pOutput, pOutputSize);
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 fc1d 	bl	8002048 <FMAC_ConfigFilterOutputBufferUpdateState>
 800180e:	4603      	mov	r3, r0
 8001810:	74fb      	strb	r3, [r7, #19]

    if (status == HAL_OK)
 8001812:	7cfb      	ldrb	r3, [r7, #19]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d104      	bne.n	8001822 <HAL_FMAC_FilterStart+0xb8>
    {
      /* PARAM: Start the filter ( this can generate interrupts before the end of the HAL_FMAC_FilterStart ) */
      WRITE_REG(hfmac->Instance->PARAM, (uint32_t)(hfmac->FilterParam));
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	6852      	ldr	r2, [r2, #4]
 8001820:	60da      	str	r2, [r3, #12]
    }

    /* Reset the busy flag (do not overwrite the possible write and read flag) */
    hfmac->State = HAL_FMAC_STATE_READY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2220      	movs	r2, #32
 8001826:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800182a:	e001      	b.n	8001830 <HAL_FMAC_FilterStart+0xc6>
  }
  else
  {
    status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8001830:	7cfb      	ldrb	r3, [r7, #19]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_FMAC_ErrorCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_ErrorCallback(FMAC_HandleTypeDef *hfmac)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_ErrorCallback can be implemented in the user file.
   */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_FMAC_GetDataCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_GetDataCallback(FMAC_HandleTypeDef *hfmac)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_GetDataCallback can be implemented in the user file.
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_FMAC_HalfOutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_HalfOutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_HalfOutputDataReadyCallback can be implemented in the user file.
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_FMAC_OutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_OutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_OutputDataReadyCallback can be implemented in the user file.
   */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HAL_FMAC_FilterConfigCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_FilterConfigCallback(FMAC_HandleTypeDef *hfmac)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_FilterConfigCallback can be implemented in the user file.
   */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <HAL_FMAC_FilterPreloadCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_FilterPreloadCallback(FMAC_HandleTypeDef *hfmac)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_FilterPreloadCallback can be implemented in the user file.
   */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <HAL_FMAC_IRQHandler>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
void HAL_FMAC_IRQHandler(FMAC_HandleTypeDef *hfmac)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  uint32_t itsource;

  /* Check if the read interrupt is enabled and if Y buffer empty flag isn't set */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_RIEN);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_YEMPTY) == 0U) && (itsource != 0U))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d022      	beq.n	800191a <HAL_FMAC_IRQHandler+0x68>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01f      	beq.n	800191a <HAL_FMAC_IRQHandler+0x68>
  {
    /* Read some data if possible (Y size is used as a pseudo timeout in order
       to not get stuck too long under IT if FMAC keeps on processing input
       data reloaded via DMA for instance). */
    if (hfmac->pOutput != NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00a      	beq.n	80018f8 <HAL_FMAC_IRQHandler+0x46>
    {
      FMAC_ReadDataIncrementPtr(hfmac, (uint16_t)FMAC_GET_Y_SIZE(hfmac));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	0a1b      	lsrs	r3, r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4619      	mov	r1, r3
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fc12 	bl	800211c <FMAC_ReadDataIncrementPtr>
    }

    /* Indicate that data is ready to be read */
    if ((hfmac->pOutput == NULL) || (hfmac->OutputCurrentSize == *(hfmac->pOutputSize)))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_FMAC_IRQHandler+0x5c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	8b9a      	ldrh	r2, [r3, #28]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d105      	bne.n	800191a <HAL_FMAC_IRQHandler+0x68>
    {
      /* Reset the pointers to indicate new data will be needed */
      FMAC_ResetOutputStateAndDataPointers(hfmac);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f8e6 	bl	8001ae0 <FMAC_ResetOutputStateAndDataPointers>

      /* Call the output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->OutputDataReadyCallback(hfmac);
#else
      HAL_FMAC_OutputDataReadyCallback(hfmac);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffae 	bl	8001876 <HAL_FMAC_OutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
    }
  }

  /* Check if the write interrupt is enabled and if X1 buffer full flag isn't set */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_WIEN);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_X1FULL) == 0U) && (itsource != 0U))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b02      	cmp	r3, #2
 8001932:	d022      	beq.n	800197a <HAL_FMAC_IRQHandler+0xc8>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d01f      	beq.n	800197a <HAL_FMAC_IRQHandler+0xc8>
  {
    /* Write some data if possible (X1 size is used as a pseudo timeout in order
       to not get stuck too long under IT if FMAC keep on processing input
       data whereas its output emptied via DMA for instance). */
    if (hfmac->pInput != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00a      	beq.n	8001958 <HAL_FMAC_IRQHandler+0xa6>
    {
      FMAC_WriteDataIncrementPtr(hfmac, (uint16_t)FMAC_GET_X1_SIZE(hfmac));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	b29b      	uxth	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	b29b      	uxth	r3, r3
 8001950:	4619      	mov	r1, r3
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 fc74 	bl	8002240 <FMAC_WriteDataIncrementPtr>
    }

    /* Indicate that new data will be needed */
    if ((hfmac->pInput == NULL) || (hfmac->InputCurrentSize == *(hfmac->pInputSize)))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_FMAC_IRQHandler+0xbc>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	8a1a      	ldrh	r2, [r3, #16]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d105      	bne.n	800197a <HAL_FMAC_IRQHandler+0xc8>
    {
      /* Reset the pointers to indicate new data will be needed */
      FMAC_ResetInputStateAndDataPointers(hfmac);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f89f 	bl	8001ab2 <FMAC_ResetInputStateAndDataPointers>

      /* Call the get data callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->GetDataCallback(hfmac);
#else
      HAL_FMAC_GetDataCallback(hfmac);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff6a 	bl	800184e <HAL_FMAC_GetDataCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
    }
  }

  /* Check if the overflow error interrupt is enabled and if overflow error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_OVFLIEN);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_OVFL) != 0U) && (itsource != 0U))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001994:	d101      	bne.n	800199a <HAL_FMAC_IRQHandler+0xe8>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_FMAC_IRQHandler+0xea>
 800199a:	2300      	movs	r3, #0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_FMAC_IRQHandler+0x100>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_FMAC_IRQHandler+0x100>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_OVFL;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019aa:	f043 0204 	orr.w	r2, r3, #4
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Check if the underflow error interrupt is enabled and if underflow error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_UNFLIEN);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_UNFL) != 0U) && (itsource != 0U))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019cc:	d101      	bne.n	80019d2 <HAL_FMAC_IRQHandler+0x120>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_FMAC_IRQHandler+0x122>
 80019d2:	2300      	movs	r3, #0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_FMAC_IRQHandler+0x138>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_FMAC_IRQHandler+0x138>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_UNFL;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Check if the saturation error interrupt is enabled and if saturation error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_SATIEN);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_SAT) != 0U) && (itsource != 0U))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a04:	d101      	bne.n	8001a0a <HAL_FMAC_IRQHandler+0x158>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_FMAC_IRQHandler+0x15a>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_FMAC_IRQHandler+0x170>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_FMAC_IRQHandler+0x170>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_SAT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1a:	f043 0201 	orr.w	r2, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Call the error callback if an error occurred */
  if (hfmac->ErrorCode != HAL_FMAC_ERROR_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_FMAC_IRQHandler+0x17e>
  {
    /* Call the error callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
    hfmac->ErrorCallback(hfmac);
#else
    HAL_FMAC_ErrorCallback(hfmac);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ff05 	bl	800183a <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }
}
 8001a30:	bf00      	nop
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a40:	f7ff f82a 	bl	8000a98 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a54:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8001a56:	e00f      	b.n	8001a78 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8001a58:	f7ff f81e 	bl	8000a98 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a66:	d907      	bls.n	8001a78 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e00a      	b.n	8001a8e <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1e8      	bne.n	8001a58 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f807 	bl	8001ab2 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f81b 	bl	8001ae0 <FMAC_ResetOutputStateAndDataPointers>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <FMAC_FilterConfig>:
  * @param  PreloadAccess access mode used for the preload (polling or DMA).
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_FilterConfig(FMAC_HandleTypeDef *hfmac, FMAC_FilterConfigTypeDef *pConfig,
                                           uint8_t PreloadAccess)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FMAC_PARAM_P(pConfig->Filter, pConfig->P));
  assert_param(IS_FMAC_PARAM_Q(pConfig->Filter, pConfig->Q));
  assert_param(IS_FMAC_PARAM_R(pConfig->Filter, pConfig->R));

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da01      	bge.n	8001b2c <FMAC_FilterConfig+0x1c>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e124      	b.n	8001d76 <FMAC_FilterConfig+0x266>
  }

  /* Check handle state is ready */
  if (hfmac->State != HAL_FMAC_STATE_READY)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	d001      	beq.n	8001b3c <FMAC_FilterConfig+0x2c>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e11c      	b.n	8001d76 <FMAC_FilterConfig+0x266>
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_BUSY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2224      	movs	r2, #36	; 0x24
 8001b40:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b44:	f7fe ffa8 	bl	8000a98 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

  /* Indicate that there is no valid configuration done */
  hfmac->FilterParam = 0U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]

  /* FMAC_X1BUFCFG: Configure the input buffer within the internal memory if required */
  if (pConfig->InputBufferSize != 0U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	785b      	ldrb	r3, [r3, #1]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d010      	beq.n	8001b7a <FMAC_FilterConfig+0x6a>
  {
    MODIFY_REG(hfmac->Instance->X1BUFCFG,                                                                   \
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	4611      	mov	r1, r2
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	7852      	ldrb	r2, [r2, #1]
 8001b6c:	0212      	lsls	r2, r2, #8
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	4311      	orrs	r1, r2
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	430b      	orrs	r3, r1
 8001b78:	6013      	str	r3, [r2, #0]
                ((((uint32_t)(pConfig->InputBufferSize))  << FMAC_X1BUFCFG_X1_BUF_SIZE_Pos) & \
                 FMAC_X1BUFCFG_X1_BUF_SIZE)));
  }

  /* FMAC_X1BUFCFG: Configure the input threshold if valid when compared to the configured X1 size */
  if (pConfig->InputThreshold != FMAC_THRESHOLD_NO_VALUE)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b82:	d00c      	beq.n	8001b9e <FMAC_FilterConfig+0x8e>
  {
    /* Check the parameter */
    assert_param(IS_FMAC_THRESHOLD_APPLICABLE(FMAC_GET_X1_SIZE(hfmac), pConfig->InputThreshold, pConfig->InputAccess));

    MODIFY_REG(hfmac->Instance->X1BUFCFG, \
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]
               FMAC_X1BUFCFG_FULL_WM,     \
               ((pConfig->InputThreshold) & FMAC_X1BUFCFG_FULL_WM));
  }

  /* FMAC_X2BUFCFG: Configure the coefficient buffer within the internal memory */
  if (pConfig->CoeffBufferSize != 0U)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	7a5b      	ldrb	r3, [r3, #9]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d010      	beq.n	8001bc8 <FMAC_FilterConfig+0xb8>
  {
    MODIFY_REG(hfmac->Instance->X2BUFCFG,                                                                   \
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	7a12      	ldrb	r2, [r2, #8]
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	7a52      	ldrb	r2, [r2, #9]
 8001bba:	0212      	lsls	r2, r2, #8
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6053      	str	r3, [r2, #4]
                ((((uint32_t)(pConfig->CoeffBufferSize))  << FMAC_X2BUFCFG_X2_BUF_SIZE_Pos) &\
                 FMAC_X2BUFCFG_X2_BUF_SIZE)));
  }

  /* FMAC_YBUFCFG: Configure the output buffer within the internal memory if required */
  if (pConfig->OutputBufferSize != 0U)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	7adb      	ldrb	r3, [r3, #11]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d010      	beq.n	8001bf2 <FMAC_FilterConfig+0xe2>
  {
    MODIFY_REG(hfmac->Instance->YBUFCFG,                                                                    \
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0c1b      	lsrs	r3, r3, #16
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	7a92      	ldrb	r2, [r2, #10]
 8001bde:	4611      	mov	r1, r2
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	7ad2      	ldrb	r2, [r2, #11]
 8001be4:	0212      	lsls	r2, r2, #8
 8001be6:	b292      	uxth	r2, r2
 8001be8:	4311      	orrs	r1, r2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	430b      	orrs	r3, r1
 8001bf0:	6093      	str	r3, [r2, #8]
               (((((uint32_t)(pConfig->OutputBaseAddress)) << FMAC_YBUFCFG_Y_BASE_Pos)     & FMAC_YBUFCFG_Y_BASE) |    \
                ((((uint32_t)(pConfig->OutputBufferSize))  << FMAC_YBUFCFG_Y_BUF_SIZE_Pos) & FMAC_YBUFCFG_Y_BUF_SIZE)));
  }

  /* FMAC_YBUFCFG: Configure the output threshold if valid when compared to the configured Y size */
  if (pConfig->OutputThreshold != FMAC_THRESHOLD_NO_VALUE)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d00c      	beq.n	8001c16 <FMAC_FilterConfig+0x106>
  {
    /* Check the parameter */
    assert_param(IS_FMAC_THRESHOLD_APPLICABLE(FMAC_GET_Y_SIZE(hfmac), pConfig->OutputThreshold, pConfig->OutputAccess));

    MODIFY_REG(hfmac->Instance->YBUFCFG, \
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	609a      	str	r2, [r3, #8]
               FMAC_YBUFCFG_EMPTY_WM,    \
               ((pConfig->OutputThreshold) & FMAC_YBUFCFG_EMPTY_WM));
  }

  /* FMAC_CR: Configure the clip feature */
  tmpcr = pConfig->Clip & FMAC_CR_CLIPEN;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c1e:	617b      	str	r3, [r7, #20]

  /* FMAC_CR: If IT or DMA will be used, enable error interrupts.
    * Being more a debugging feature, FMAC_CR_SATIEN isn't enabled by default. */
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	7f5b      	ldrb	r3, [r3, #29]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d00b      	beq.n	8001c40 <FMAC_FilterConfig+0x130>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	7f5b      	ldrb	r3, [r3, #29]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d007      	beq.n	8001c40 <FMAC_FilterConfig+0x130>
      (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_DMA) || (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_IT))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	7f9b      	ldrb	r3, [r3, #30]
  if ((pConfig->InputAccess  == FMAC_BUFFER_ACCESS_DMA) || (pConfig->InputAccess  == FMAC_BUFFER_ACCESS_IT) ||
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d003      	beq.n	8001c40 <FMAC_FilterConfig+0x130>
      (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_DMA) || (pConfig->OutputAccess == FMAC_BUFFER_ACCESS_IT))
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	7f9b      	ldrb	r3, [r3, #30]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d103      	bne.n	8001c48 <FMAC_FilterConfig+0x138>
  {
    tmpcr |= FMAC_IT_UNFLIEN | FMAC_IT_OVFLIEN;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f043 030c 	orr.w	r3, r3, #12
 8001c46:	617b      	str	r3, [r7, #20]
  }

  /* FMAC_CR: write the value */
  WRITE_REG(hfmac->Instance->CR, tmpcr);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	611a      	str	r2, [r3, #16]

  /* Save the input/output accesses in order to configure RIEN, WIEN, DMAREN and DMAWEN during filter start */
  hfmac->InputAccess = pConfig->InputAccess;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	7f5a      	ldrb	r2, [r3, #29]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	721a      	strb	r2, [r3, #8]
  hfmac->OutputAccess = pConfig->OutputAccess;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	7f9a      	ldrb	r2, [r3, #30]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	725a      	strb	r2, [r3, #9]
  assert_param(((pConfig->Filter == FMAC_FUNC_CONVO_FIR) && (x2size >= pConfig->P)) || \
               ((pConfig->Filter == FMAC_FUNC_IIR_DIRECT_FORM_1) && \
                (x2size >= ((uint32_t)pConfig->P + (uint32_t)pConfig->Q))));

  /* Build the PARAM value that will be used when starting the filter */
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((((uint32_t)(pConfig->P)) << FMAC_PARAM_P_Pos) & FMAC_PARAM_P) | \
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8001c6a:	431a      	orrs	r2, r3
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b29b      	uxth	r3, r3
                        ((((uint32_t)(pConfig->P)) << FMAC_PARAM_P_Pos) & FMAC_PARAM_P) | \
 8001c76:	431a      	orrs	r2, r3
                        ((((uint32_t)(pConfig->R)) << FMAC_PARAM_R_Pos) & FMAC_PARAM_R));
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                        ((((uint32_t)(pConfig->Q)) << FMAC_PARAM_Q_Pos) & FMAC_PARAM_Q) | \
 8001c84:	4313      	orrs	r3, r2
 8001c86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
  hfmac->FilterParam = (FMAC_PARAM_START | pConfig->Filter |                   \
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	605a      	str	r2, [r3, #4]

  /* Initialize the coefficient buffer if required (pCoeffA for FIR only) */
  if ((pConfig->pCoeffB != NULL) && (pConfig->CoeffBSize != 0U))
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d06a      	beq.n	8001d6c <FMAC_FilterConfig+0x25c>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	7f1b      	ldrb	r3, [r3, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d066      	beq.n	8001d6c <FMAC_FilterConfig+0x25c>
                 ((pConfig->Filter == FMAC_FUNC_IIR_DIRECT_FORM_1) &&
                  (pConfig->pCoeffA != NULL) && (pConfig->CoeffASize != 0U) &&
                  (pConfig->CoeffASize >= pConfig->Q)));

    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM,                      \
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	7f1b      	ldrb	r3, [r3, #28]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	7d1b      	ldrb	r3, [r3, #20]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	431a      	orrs	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 4202 	orr.w	r2, r2, #2181038080	; 0x82000000
 8001cb4:	60da      	str	r2, [r3, #12]
              (((uint32_t)(pConfig->CoeffBSize) << FMAC_PARAM_P_Pos) | \
               ((uint32_t)(pConfig->CoeffASize) << FMAC_PARAM_Q_Pos) | \
               FMAC_FUNC_LOAD_X2 | FMAC_PARAM_START));

    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d133      	bne.n	8001d24 <FMAC_FilterConfig+0x214>
    {
      /* Load the buffer into the internal memory */
      FMAC_WritePreloadDataIncrementPtr(hfmac, &(pConfig->pCoeffB), pConfig->CoeffBSize);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f103 0118 	add.w	r1, r3, #24
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	7f1b      	ldrb	r3, [r3, #28]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f977 	bl	8001fbc <FMAC_WritePreloadDataIncrementPtr>

      /* Load pCoeffA if needed */
      if ((pConfig->pCoeffA != NULL) && (pConfig->CoeffASize != 0U))
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00c      	beq.n	8001cf0 <FMAC_FilterConfig+0x1e0>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	7d1b      	ldrb	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <FMAC_FilterConfig+0x1e0>
      {
        /* Load the buffer into the internal memory */
        FMAC_WritePreloadDataIncrementPtr(hfmac, &(pConfig->pCoeffA), pConfig->CoeffASize);
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f103 0110 	add.w	r1, r3, #16
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	7d1b      	ldrb	r3, [r3, #20]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 f966 	bl	8001fbc <FMAC_WritePreloadDataIncrementPtr>
      }

      /* Wait for the end of the writing */
      if (FMAC_WaitOnStartUntilTimeout(hfmac, tickstart, HAL_FMAC_TIMEOUT_VALUE) != HAL_OK)
 8001cf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cf4:	6939      	ldr	r1, [r7, #16]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f985 	bl	8002006 <FMAC_WaitOnStartUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <FMAC_FilterConfig+0x20a>
      {
        hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34
        hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	22a0      	movs	r2, #160	; 0xa0
 8001d12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e02d      	b.n	8001d76 <FMAC_FilterConfig+0x266>
      }

      /* Change the FMAC state */
      hfmac->State = HAL_FMAC_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8001d22:	e027      	b.n	8001d74 <FMAC_FilterConfig+0x264>
    }
    else
    {
      hfmac->pInput = pConfig->pCoeffA;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = pConfig->CoeffASize;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	7d1b      	ldrb	r3, [r3, #20]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	821a      	strh	r2, [r3, #16]

      /* Set the FMAC DMA transfer complete callback */
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <FMAC_FilterConfig+0x270>)
 8001d44:	62da      	str	r2, [r3, #44]	; 0x2c
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <FMAC_FilterConfig+0x274>)
 8001d4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pConfig->pCoeffB, (uint32_t)&hfmac->Instance->WDATA,
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	4619      	mov	r1, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3318      	adds	r3, #24
 8001d5e:	461a      	mov	r2, r3
                               pConfig->CoeffBSize));
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	7f1b      	ldrb	r3, [r3, #28]
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pConfig->pCoeffB, (uint32_t)&hfmac->Instance->WDATA,
 8001d64:	f7ff fad0 	bl	8001308 <HAL_DMA_Start_IT>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	e004      	b.n	8001d76 <FMAC_FilterConfig+0x266>
    }
  }
  else
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	080023a1 	.word	0x080023a1
 8001d84:	0800255d 	.word	0x0800255d

08001d88 <FMAC_FilterPreload>:
  *         all these calls), an error will be returned.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_FilterPreload(FMAC_HandleTypeDef *hfmac, int16_t *pInput, uint8_t InputSize,
                                            int16_t *pOutput, uint8_t OutputSize, uint8_t PreloadAccess)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the START bit state */
  if (FMAC_GET_START_BIT(hfmac) != 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da01      	bge.n	8001da6 <FMAC_FilterPreload+0x1e>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e102      	b.n	8001fac <FMAC_FilterPreload+0x224>
  }

  /* Check that a valid configuration was done previously */
  if (hfmac->FilterParam == 0U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <FMAC_FilterPreload+0x2a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0fc      	b.n	8001fac <FMAC_FilterPreload+0x224>
  }

  /* Check the preload input buffers isn't too big */
  if ((InputSize > FMAC_GET_X1_SIZE(hfmac)) && (pInput != NULL))
 8001db2:	79fa      	ldrb	r2, [r7, #7]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d904      	bls.n	8001dcc <FMAC_FilterPreload+0x44>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <FMAC_FilterPreload+0x44>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0ef      	b.n	8001fac <FMAC_FilterPreload+0x224>
  }

  /* Check the preload output buffer isn't too big */
  if ((OutputSize > FMAC_GET_Y_SIZE(hfmac)) && (pOutput != NULL))
 8001dcc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d904      	bls.n	8001de8 <FMAC_FilterPreload+0x60>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <FMAC_FilterPreload+0x60>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0e1      	b.n	8001fac <FMAC_FilterPreload+0x224>
  }

  /* Check handle state is ready */
  if (hfmac->State != HAL_FMAC_STATE_READY)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d001      	beq.n	8001df8 <FMAC_FilterPreload+0x70>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0d9      	b.n	8001fac <FMAC_FilterPreload+0x224>
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_BUSY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2224      	movs	r2, #36	; 0x24
 8001dfc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e00:	f7fe fe4a 	bl	8000a98 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

  /* Preload the input buffer if required */
  if ((pInput != NULL) && (InputSize != 0U))
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d049      	beq.n	8001ea0 <FMAC_FilterPreload+0x118>
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d046      	beq.n	8001ea0 <FMAC_FilterPreload+0x118>
  {
    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM, \
 8001e12:	79fa      	ldrb	r2, [r7, #7]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 4201 	orr.w	r2, r2, #2164260864	; 0x81000000
 8001e1c:	60da      	str	r2, [r3, #12]
              (((uint32_t)InputSize << FMAC_PARAM_P_Pos) | FMAC_FUNC_LOAD_X1 | FMAC_PARAM_START));

    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8001e1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d11b      	bne.n	8001e5e <FMAC_FilterPreload+0xd6>
    {
      /* Load the buffer into the internal memory */
      FMAC_WritePreloadDataIncrementPtr(hfmac, &pInput, InputSize);
 8001e26:	79fa      	ldrb	r2, [r7, #7]
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f8c4 	bl	8001fbc <FMAC_WritePreloadDataIncrementPtr>

      /* Wait for the end of the writing */
      if (FMAC_WaitOnStartUntilTimeout(hfmac, tickstart, HAL_FMAC_TIMEOUT_VALUE) != HAL_OK)
 8001e34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e38:	6939      	ldr	r1, [r7, #16]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f8e3 	bl	8002006 <FMAC_WaitOnStartUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d02c      	beq.n	8001ea0 <FMAC_FilterPreload+0x118>
      {
        hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
        hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	22a0      	movs	r2, #160	; 0xa0
 8001e56:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0a6      	b.n	8001fac <FMAC_FilterPreload+0x224>
      }
    }
    else
    {
      hfmac->pInput = pOutput;
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = OutputSize;
 8001e64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	821a      	strh	r2, [r3, #16]

      /* Set the FMAC DMA transfer complete callback */
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterPreload;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	4a4e      	ldr	r2, [pc, #312]	; (8001fb4 <FMAC_FilterPreload+0x22c>)
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	4a4d      	ldr	r2, [pc, #308]	; (8001fb8 <FMAC_FilterPreload+0x230>)
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pInput, (uint32_t)&hfmac->Instance->WDATA, InputSize));
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	3318      	adds	r3, #24
 8001e94:	461a      	mov	r2, r3
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f7ff fa36 	bl	8001308 <HAL_DMA_Start_IT>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	e085      	b.n	8001fac <FMAC_FilterPreload+0x224>
    }
  }

  /* Preload the output buffer if required */
  if ((pOutput != NULL) && (OutputSize != 0U))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d04a      	beq.n	8001f3c <FMAC_FilterPreload+0x1b4>
 8001ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d046      	beq.n	8001f3c <FMAC_FilterPreload+0x1b4>
  {
    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM, \
 8001eae:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 4203 	orr.w	r2, r2, #2197815296	; 0x83000000
 8001eba:	60da      	str	r2, [r3, #12]
              (((uint32_t)OutputSize << FMAC_PARAM_P_Pos) | FMAC_FUNC_LOAD_Y | FMAC_PARAM_START));

    if (PreloadAccess == PRELOAD_ACCESS_POLLING)
 8001ebc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d11b      	bne.n	8001efc <FMAC_FilterPreload+0x174>
    {
      /* Load the buffer into the internal memory */
      FMAC_WritePreloadDataIncrementPtr(hfmac, &pOutput, OutputSize);
 8001ec4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4619      	mov	r1, r3
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f875 	bl	8001fbc <FMAC_WritePreloadDataIncrementPtr>

      /* Wait for the end of the writing */
      if (FMAC_WaitOnStartUntilTimeout(hfmac, tickstart, HAL_FMAC_TIMEOUT_VALUE) != HAL_OK)
 8001ed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed6:	6939      	ldr	r1, [r7, #16]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f894 	bl	8002006 <FMAC_WaitOnStartUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d02b      	beq.n	8001f3c <FMAC_FilterPreload+0x1b4>
      {
        hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	635a      	str	r2, [r3, #52]	; 0x34
        hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	22a0      	movs	r2, #160	; 0xa0
 8001ef4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e057      	b.n	8001fac <FMAC_FilterPreload+0x224>
      }
    }
    else
    {
      hfmac->pInput = NULL;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = 0U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	821a      	strh	r2, [r3, #16]

      /* Set the FMAC DMA transfer complete callback */
      hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterPreload;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f14:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <FMAC_FilterPreload+0x22c>)
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
      /* Set the DMA error callback */
      hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <FMAC_FilterPreload+0x230>)
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA stream managing FMAC preload data write */
      return (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)pOutput, (uint32_t)&hfmac->Instance->WDATA, OutputSize));
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4619      	mov	r1, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3318      	adds	r3, #24
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f34:	f7ff f9e8 	bl	8001308 <HAL_DMA_Start_IT>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	e037      	b.n	8001fac <FMAC_FilterPreload+0x224>
    }
  }

  /* Update the error codes */
  if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_OVFL))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f4a:	d105      	bne.n	8001f58 <FMAC_FilterPreload+0x1d0>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_OVFL;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f50:	f043 0204 	orr.w	r2, r3, #4
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_UNFL))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f66:	d105      	bne.n	8001f74 <FMAC_FilterPreload+0x1ec>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_UNFL;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6c:	f043 0202 	orr.w	r2, r3, #2
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_SAT))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f82:	d105      	bne.n	8001f90 <FMAC_FilterPreload+0x208>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_SAT;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Change the FMAC state */
  hfmac->State = HAL_FMAC_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Return function status */
  if (hfmac->ErrorCode == HAL_FMAC_ERROR_NONE)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <FMAC_FilterPreload+0x21e>
  {
    status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	75fb      	strb	r3, [r7, #23]
 8001fa4:	e001      	b.n	8001faa <FMAC_FilterPreload+0x222>
  }
  else
  {
    status = HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	0800246d 	.word	0x0800246d
 8001fb8:	0800255d 	.word	0x0800255d

08001fbc <FMAC_WritePreloadDataIncrementPtr>:
  * @param  ppData pointer to pointer to the data buffer.
  * @param  Size size of the data buffer.
  * @retval None
  */
static void FMAC_WritePreloadDataIncrementPtr(FMAC_HandleTypeDef *hfmac, int16_t **ppData, uint8_t Size)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	71fb      	strb	r3, [r7, #7]
  uint8_t index;

  /* Load the buffer into the internal memory */
  for (index = Size; index > 0U; index--)
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	75fb      	strb	r3, [r7, #23]
 8001fce:	e010      	b.n	8001ff2 <FMAC_WritePreloadDataIncrementPtr+0x36>
  {
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(*ppData))) & FMAC_WDATA_WDATA));
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	619a      	str	r2, [r3, #24]
    (*ppData)++;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	1c9a      	adds	r2, r3, #2
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	601a      	str	r2, [r3, #0]
  for (index = Size; index > 0U; index--)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	75fb      	strb	r3, [r7, #23]
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1eb      	bne.n	8001fd0 <FMAC_WritePreloadDataIncrementPtr+0x14>
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	371c      	adds	r7, #28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <FMAC_WaitOnStartUntilTimeout>:
  * @param  Tickstart Tick start value.
  * @param  Timeout Timeout duration.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_WaitOnStartUntilTimeout(FMAC_HandleTypeDef *hfmac, uint32_t Tickstart, uint32_t Timeout)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
  /* Wait until flag changes */
  while (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 8002012:	e00f      	b.n	8002034 <FMAC_WaitOnStartUntilTimeout+0x2e>
  {
    if ((HAL_GetTick() - Tickstart) > Timeout)
 8002014:	f7fe fd40 	bl	8000a98 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	d207      	bcs.n	8002034 <FMAC_WaitOnStartUntilTimeout+0x2e>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	635a      	str	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e005      	b.n	8002040 <FMAC_WaitOnStartUntilTimeout+0x3a>
  while (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	dbea      	blt.n	8002014 <FMAC_WaitOnStartUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <FMAC_ConfigFilterOutputBufferUpdateState>:
  *         of data read from FMAC).
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_ConfigFilterOutputBufferUpdateState(FMAC_HandleTypeDef *hfmac, int16_t *pOutput,
                                                                  uint16_t *pOutputSize)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  /* Reset the current size */
  hfmac->OutputCurrentSize = 0U;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	839a      	strh	r2, [r3, #28]

  /* Check whether a valid pointer was provided */
  if ((pOutput == NULL) || (pOutputSize == NULL) || (*pOutputSize == 0U))
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <FMAC_ConfigFilterOutputBufferUpdateState+0x26>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <FMAC_ConfigFilterOutputBufferUpdateState+0x26>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10a      	bne.n	8002084 <FMAC_ConfigFilterOutputBufferUpdateState+0x3c>
  {
    /* The user will have to provide a valid configuration later */
    hfmac->pOutput = NULL;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8002082:	e03f      	b.n	8002104 <FMAC_ConfigFilterOutputBufferUpdateState+0xbc>
  }
  /* Handle the pointer depending on the input access */
  else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_DMA)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	7a5b      	ldrb	r3, [r3, #9]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d122      	bne.n	80020d2 <FMAC_ConfigFilterOutputBufferUpdateState+0x8a>
  {
    hfmac->pOutput = NULL;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_BUSY_RD;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2225      	movs	r2, #37	; 0x25
 800209c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaOut->XferHalfCpltCallback = FMAC_DMAHalfOutputDataReady;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	4a1a      	ldr	r2, [pc, #104]	; (8002110 <FMAC_ConfigFilterOutputBufferUpdateState+0xc8>)
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
    hfmac->hdmaOut->XferCpltCallback = FMAC_DMAOutputDataReady;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	4a19      	ldr	r2, [pc, #100]	; (8002114 <FMAC_ConfigFilterOutputBufferUpdateState+0xcc>)
 80020ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaOut->XferErrorCallback = FMAC_DMAError;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	4a18      	ldr	r2, [pc, #96]	; (8002118 <FMAC_ConfigFilterOutputBufferUpdateState+0xd0>)
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA stream managing FMAC output data read */
    return (HAL_DMA_Start_IT(hfmac->hdmaOut, (uint32_t)&hfmac->Instance->RDATA, (uint32_t)pOutput, *pOutputSize));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	331c      	adds	r3, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	f7ff f91d 	bl	8001308 <HAL_DMA_Start_IT>
 80020ce:	4603      	mov	r3, r0
 80020d0:	e019      	b.n	8002106 <FMAC_ConfigFilterOutputBufferUpdateState+0xbe>
  }
  else if (hfmac->OutputAccess == FMAC_BUFFER_ACCESS_NONE)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	7a5b      	ldrb	r3, [r3, #9]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10a      	bne.n	80020f0 <FMAC_ConfigFilterOutputBufferUpdateState+0xa8>
  {
    hfmac->pOutput = NULL;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = NULL;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_READY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80020ee:	e009      	b.n	8002104 <FMAC_ConfigFilterOutputBufferUpdateState+0xbc>
  }
  else
  {
    /* Update the output data information (polling, IT) */
    hfmac->pOutput = pOutput;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	619a      	str	r2, [r3, #24]
    hfmac->pOutputSize = pOutputSize;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	621a      	str	r2, [r3, #32]
    hfmac->RdState = HAL_FMAC_STATE_BUSY_RD;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2225      	movs	r2, #37	; 0x25
 8002100:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  }

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	08002361 	.word	0x08002361
 8002114:	0800237d 	.word	0x0800237d
 8002118:	0800255d 	.word	0x0800255d

0800211c <FMAC_ReadDataIncrementPtr>:
  * @param  MaxSizeToRead Maximum number of data to read (this serves as a timeout
  *         if FMAC continuously writes into the output buffer).
  * @retval None
  */
static void FMAC_ReadDataIncrementPtr(FMAC_HandleTypeDef *hfmac, uint16_t MaxSizeToRead)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  uint16_t maxsize;
  uint16_t threshold;
  uint32_t tmpvalue;

  /* Check if there is data to read */
  if (READ_BIT(hfmac->Instance->SR, FMAC_SR_YEMPTY) != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d17c      	bne.n	8002230 <FMAC_ReadDataIncrementPtr+0x114>
  {
    return;
  }

  /* Get the maximum index (no wait allowed, no overstepping of the output buffer) */
  if ((hfmac->OutputCurrentSize + MaxSizeToRead) > *(hfmac->pOutputSize))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8b9b      	ldrh	r3, [r3, #28]
 800213a:	461a      	mov	r2, r3
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	4413      	add	r3, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6a12      	ldr	r2, [r2, #32]
 8002144:	8812      	ldrh	r2, [r2, #0]
 8002146:	4293      	cmp	r3, r2
 8002148:	dd04      	ble.n	8002154 <FMAC_ReadDataIncrementPtr+0x38>
  {
    maxsize = *(hfmac->pOutputSize);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	82fb      	strh	r3, [r7, #22]
 8002152:	e004      	b.n	800215e <FMAC_ReadDataIncrementPtr+0x42>
  }
  else
  {
    maxsize = hfmac->OutputCurrentSize + MaxSizeToRead;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	8b9a      	ldrh	r2, [r3, #28]
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	4413      	add	r3, r2
 800215c:	82fb      	strh	r3, [r7, #22]

  /* Read until there is no more room or no more data */
  do
  {
    /* If there is no more room, return */
    if (!(hfmac->OutputCurrentSize < maxsize))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	8b9b      	ldrh	r3, [r3, #28]
 8002162:	8afa      	ldrh	r2, [r7, #22]
 8002164:	429a      	cmp	r2, r3
 8002166:	d965      	bls.n	8002234 <FMAC_ReadDataIncrementPtr+0x118>
    {
      return;
    }

    /* Read the available data */
    tmpvalue = ((READ_REG(hfmac->Instance->RDATA))& FMAC_RDATA_RDATA);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	b29b      	uxth	r3, r3
 8002170:	613b      	str	r3, [r7, #16]
    *(hfmac->pOutput) = (int16_t)tmpvalue;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	b212      	sxth	r2, r2
 800217a:	801a      	strh	r2, [r3, #0]
    hfmac->pOutput++;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	1c9a      	adds	r2, r3, #2
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
    hfmac->OutputCurrentSize++;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	8b9b      	ldrh	r3, [r3, #28]
 800218a:	3301      	adds	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	839a      	strh	r2, [r3, #28]
  } while (READ_BIT(hfmac->Instance->SR, FMAC_SR_YEMPTY) == 0U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0de      	beq.n	800215e <FMAC_ReadDataIncrementPtr+0x42>

  /* Y buffer empty flag has just be raised, read the threshold */
  threshold = (uint16_t)FMAC_GET_THRESHOLD_FROM_WM(FMAC_GET_Y_EMPTY_WM(hfmac)) - 1U;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <FMAC_ReadDataIncrementPtr+0xbe>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d00b      	beq.n	80021d6 <FMAC_ReadDataIncrementPtr+0xba>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80021c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021cc:	d101      	bne.n	80021d2 <FMAC_ReadDataIncrementPtr+0xb6>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e004      	b.n	80021dc <FMAC_ReadDataIncrementPtr+0xc0>
 80021d2:	2307      	movs	r3, #7
 80021d4:	e002      	b.n	80021dc <FMAC_ReadDataIncrementPtr+0xc0>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <FMAC_ReadDataIncrementPtr+0xc0>
 80021da:	2300      	movs	r3, #0
 80021dc:	81fb      	strh	r3, [r7, #14]

  /* Update the maximum size if needed (limited data available) */
  if ((hfmac->OutputCurrentSize + threshold) < maxsize)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	8b9b      	ldrh	r3, [r3, #28]
 80021e2:	461a      	mov	r2, r3
 80021e4:	89fb      	ldrh	r3, [r7, #14]
 80021e6:	441a      	add	r2, r3
 80021e8:	8afb      	ldrh	r3, [r7, #22]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	da1a      	bge.n	8002224 <FMAC_ReadDataIncrementPtr+0x108>
  {
    maxsize = hfmac->OutputCurrentSize + threshold;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8b9a      	ldrh	r2, [r3, #28]
 80021f2:	89fb      	ldrh	r3, [r7, #14]
 80021f4:	4413      	add	r3, r2
 80021f6:	82fb      	strh	r3, [r7, #22]
  }

  /* Read the available data */
  while (hfmac->OutputCurrentSize < maxsize)
 80021f8:	e014      	b.n	8002224 <FMAC_ReadDataIncrementPtr+0x108>
  {
    tmpvalue = ((READ_REG(hfmac->Instance->RDATA))& FMAC_RDATA_RDATA);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	b29b      	uxth	r3, r3
 8002202:	613b      	str	r3, [r7, #16]
    *(hfmac->pOutput) = (int16_t)tmpvalue;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	b212      	sxth	r2, r2
 800220c:	801a      	strh	r2, [r3, #0]
    hfmac->pOutput++;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	1c9a      	adds	r2, r3, #2
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
    hfmac->OutputCurrentSize++;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	8b9b      	ldrh	r3, [r3, #28]
 800221c:	3301      	adds	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	839a      	strh	r2, [r3, #28]
  while (hfmac->OutputCurrentSize < maxsize)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	8b9b      	ldrh	r3, [r3, #28]
 8002228:	8afa      	ldrh	r2, [r7, #22]
 800222a:	429a      	cmp	r2, r3
 800222c:	d8e5      	bhi.n	80021fa <FMAC_ReadDataIncrementPtr+0xde>
 800222e:	e002      	b.n	8002236 <FMAC_ReadDataIncrementPtr+0x11a>
    return;
 8002230:	bf00      	nop
 8002232:	e000      	b.n	8002236 <FMAC_ReadDataIncrementPtr+0x11a>
      return;
 8002234:	bf00      	nop
  }
}
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <FMAC_WriteDataIncrementPtr>:
  * @param  MaxSizeToWrite Maximum number of data to write (this serves as a timeout
  *         if FMAC continuously empties the input buffer).
  * @retval None
  */
static void FMAC_WriteDataIncrementPtr(FMAC_HandleTypeDef *hfmac, uint16_t MaxSizeToWrite)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	807b      	strh	r3, [r7, #2]
  uint16_t maxsize;
  uint16_t threshold;

  /* Check if there is room in FMAC */
  if (READ_BIT(hfmac->Instance->SR, FMAC_SR_X1FULL) != 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d17a      	bne.n	8002350 <FMAC_WriteDataIncrementPtr+0x110>
  {
    return;
  }

  /* Get the maximum index (no wait allowed, no overstepping of the output buffer) */
  if ((hfmac->InputCurrentSize + MaxSizeToWrite) > *(hfmac->pInputSize))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	8a1b      	ldrh	r3, [r3, #16]
 800225e:	461a      	mov	r2, r3
 8002260:	887b      	ldrh	r3, [r7, #2]
 8002262:	4413      	add	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6952      	ldr	r2, [r2, #20]
 8002268:	8812      	ldrh	r2, [r2, #0]
 800226a:	4293      	cmp	r3, r2
 800226c:	dd04      	ble.n	8002278 <FMAC_WriteDataIncrementPtr+0x38>
  {
    maxsize = *(hfmac->pInputSize);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	81fb      	strh	r3, [r7, #14]
 8002276:	e004      	b.n	8002282 <FMAC_WriteDataIncrementPtr+0x42>
  }
  else
  {
    maxsize = hfmac->InputCurrentSize + MaxSizeToWrite;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8a1a      	ldrh	r2, [r3, #16]
 800227c:	887b      	ldrh	r3, [r7, #2]
 800227e:	4413      	add	r3, r2
 8002280:	81fb      	strh	r3, [r7, #14]

  /* Write until there is no more room or no more data */
  do
  {
    /* If there is no more room, return */
    if (!(hfmac->InputCurrentSize < maxsize))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	8a1b      	ldrh	r3, [r3, #16]
 8002286:	89fa      	ldrh	r2, [r7, #14]
 8002288:	429a      	cmp	r2, r3
 800228a:	d963      	bls.n	8002354 <FMAC_WriteDataIncrementPtr+0x114>
    {
      return;
    }

    /* Write the available data */
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(hfmac->pInput))) & FMAC_WDATA_WDATA));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002294:	461a      	mov	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b292      	uxth	r2, r2
 800229c:	619a      	str	r2, [r3, #24]
    hfmac->pInput++;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	1c9a      	adds	r2, r3, #2
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	60da      	str	r2, [r3, #12]
    hfmac->InputCurrentSize++;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	8a1b      	ldrh	r3, [r3, #16]
 80022ac:	3301      	adds	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	821a      	strh	r2, [r3, #16]
  } while (READ_BIT(hfmac->Instance->SR, FMAC_SR_X1FULL) == 0U);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0df      	beq.n	8002282 <FMAC_WriteDataIncrementPtr+0x42>

  /* X1 buffer full flag has just be raised, read the threshold */
  threshold = (uint16_t)FMAC_GET_THRESHOLD_FROM_WM(FMAC_GET_X1_FULL_WM(hfmac)) - 1U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <FMAC_WriteDataIncrementPtr+0xbc>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80022da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022de:	d00b      	beq.n	80022f8 <FMAC_WriteDataIncrementPtr+0xb8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80022ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ee:	d101      	bne.n	80022f4 <FMAC_WriteDataIncrementPtr+0xb4>
 80022f0:	2303      	movs	r3, #3
 80022f2:	e004      	b.n	80022fe <FMAC_WriteDataIncrementPtr+0xbe>
 80022f4:	2307      	movs	r3, #7
 80022f6:	e002      	b.n	80022fe <FMAC_WriteDataIncrementPtr+0xbe>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <FMAC_WriteDataIncrementPtr+0xbe>
 80022fc:	2300      	movs	r3, #0
 80022fe:	81bb      	strh	r3, [r7, #12]

  /* Update the maximum size if needed (limited data available) */
  if ((hfmac->InputCurrentSize + threshold) < maxsize)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8a1b      	ldrh	r3, [r3, #16]
 8002304:	461a      	mov	r2, r3
 8002306:	89bb      	ldrh	r3, [r7, #12]
 8002308:	441a      	add	r2, r3
 800230a:	89fb      	ldrh	r3, [r7, #14]
 800230c:	429a      	cmp	r2, r3
 800230e:	da19      	bge.n	8002344 <FMAC_WriteDataIncrementPtr+0x104>
  {
    maxsize = hfmac->InputCurrentSize + threshold;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	8a1a      	ldrh	r2, [r3, #16]
 8002314:	89bb      	ldrh	r3, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	81fb      	strh	r3, [r7, #14]
  }

  /* Write the available data */
  while (hfmac->InputCurrentSize < maxsize)
 800231a:	e013      	b.n	8002344 <FMAC_WriteDataIncrementPtr+0x104>
  {
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(hfmac->pInput))) & FMAC_WDATA_WDATA));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002324:	461a      	mov	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b292      	uxth	r2, r2
 800232c:	619a      	str	r2, [r3, #24]
    hfmac->pInput++;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	1c9a      	adds	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	60da      	str	r2, [r3, #12]
    hfmac->InputCurrentSize++;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	8a1b      	ldrh	r3, [r3, #16]
 800233c:	3301      	adds	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	821a      	strh	r2, [r3, #16]
  while (hfmac->InputCurrentSize < maxsize)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	8a1b      	ldrh	r3, [r3, #16]
 8002348:	89fa      	ldrh	r2, [r7, #14]
 800234a:	429a      	cmp	r2, r3
 800234c:	d8e6      	bhi.n	800231c <FMAC_WriteDataIncrementPtr+0xdc>
 800234e:	e002      	b.n	8002356 <FMAC_WriteDataIncrementPtr+0x116>
    return;
 8002350:	bf00      	nop
 8002352:	e000      	b.n	8002356 <FMAC_WriteDataIncrementPtr+0x116>
      return;
 8002354:	bf00      	nop
  }
}
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <FMAC_DMAHalfOutputDataReady>:
  * @brief  DMA FMAC Output Data process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAHalfOutputDataReady(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	60fb      	str	r3, [r7, #12]

  /* Call half output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->HalfOutputDataReadyCallback(hfmac);
#else
  HAL_FMAC_HalfOutputDataReadyCallback(hfmac);
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7ff fa77 	bl	8001862 <HAL_FMAC_HalfOutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <FMAC_DMAOutputDataReady>:
  * @brief  DMA FMAC Output Data process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAOutputDataReady(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	60fb      	str	r3, [r7, #12]

  /* Reset the pointers to indicate new data will be needed */
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f7ff fba8 	bl	8001ae0 <FMAC_ResetOutputStateAndDataPointers>

  /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->OutputDataReadyCallback(hfmac);
#else
  HAL_FMAC_OutputDataReadyCallback(hfmac);
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff fa70 	bl	8001876 <HAL_FMAC_OutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <FMAC_DMAFilterConfig>:
  * @brief  DMA FMAC Filter Configuration process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAFilterConfig(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint8_t index;

  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	60bb      	str	r3, [r7, #8]

  /* If needed, write CoeffA and exit */
  if (hfmac->pInput != NULL)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d027      	beq.n	8002406 <FMAC_DMAFilterConfig+0x66>
  {
    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	2200      	movs	r2, #0
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
    hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterConfig;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	4a28      	ldr	r2, [pc, #160]	; (8002464 <FMAC_DMAFilterConfig+0xc4>)
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	4a27      	ldr	r2, [pc, #156]	; (8002468 <FMAC_DMAFilterConfig+0xc8>)
 80023cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA stream managing FMAC preload data write */
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4619      	mov	r1, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3318      	adds	r3, #24
 80023de:	461a      	mov	r2, r3
                         hfmac->InputCurrentSize) == HAL_OK)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	8a1b      	ldrh	r3, [r3, #16]
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 80023e4:	f7fe ff90 	bl	8001308 <HAL_DMA_Start_IT>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <FMAC_DMAFilterConfig+0x5c>
    {
      hfmac->pInput = NULL;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = 0U;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2200      	movs	r2, #0
 80023f8:	821a      	strh	r2, [r3, #16]
      return;
 80023fa:	e02f      	b.n	800245c <FMAC_DMAFilterConfig+0xbc>
    }

    /* If not exited, there was an error: set FMAC handle state to error */
    hfmac->State = HAL_FMAC_STATE_ERROR;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	22e0      	movs	r2, #224	; 0xe0
 8002400:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8002404:	e021      	b.n	800244a <FMAC_DMAFilterConfig+0xaa>
  }
  else
  {
    /* Wait for the end of the writing */
    for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 8002406:	2300      	movs	r3, #0
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e007      	b.n	800241c <FMAC_DMAFilterConfig+0x7c>
    {
      if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) == 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	da06      	bge.n	8002424 <FMAC_DMAFilterConfig+0x84>
    for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	3301      	adds	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2bff      	cmp	r3, #255	; 0xff
 8002420:	d1f4      	bne.n	800240c <FMAC_DMAFilterConfig+0x6c>
 8002422:	e000      	b.n	8002426 <FMAC_DMAFilterConfig+0x86>
      {
        break;
 8002424:	bf00      	nop
      }
    }

    /* If 'START' is still set, there was a timeout: set FMAC handle state to timeout */
    if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	da04      	bge.n	800243a <FMAC_DMAFilterConfig+0x9a>
    {
      hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	22a0      	movs	r2, #160	; 0xa0
 8002434:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8002438:	e007      	b.n	800244a <FMAC_DMAFilterConfig+0xaa>
    }
    else
    {
      /* Change the FMAC state */
      hfmac->State = HAL_FMAC_STATE_READY;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

      /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->FilterConfigCallback(hfmac);
#else
      HAL_FMAC_FilterConfigCallback(hfmac);
 8002442:	68b8      	ldr	r0, [r7, #8]
 8002444:	f7ff fa21 	bl	800188a <HAL_FMAC_FilterConfigCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
      return;
 8002448:	e008      	b.n	800245c <FMAC_DMAFilterConfig+0xbc>
    }
  }

  /* If not exited, there was an error: set FMAC handle error code to DMA error */
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244e:	f043 0208 	orr.w	r2, r3, #8
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	635a      	str	r2, [r3, #52]	; 0x34

  /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->ErrorCallback(hfmac);
#else
  HAL_FMAC_ErrorCallback(hfmac);
 8002456:	68b8      	ldr	r0, [r7, #8]
 8002458:	f7ff f9ef 	bl	800183a <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */

}
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	080023a1 	.word	0x080023a1
 8002468:	0800255d 	.word	0x0800255d

0800246c <FMAC_DMAFilterPreload>:
  * @brief  DMA FMAC Filter Configuration process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAFilterPreload(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint8_t index;

  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	60bb      	str	r3, [r7, #8]

  /* Wait for the end of the X1 writing */
  for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	e007      	b.n	8002490 <FMAC_DMAFilterPreload+0x24>
  {
    if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) == 0U)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	da06      	bge.n	8002498 <FMAC_DMAFilterPreload+0x2c>
  for (index = 0U; index < MAX_PRELOAD_INDEX; index++)
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	3301      	adds	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2bff      	cmp	r3, #255	; 0xff
 8002494:	d1f4      	bne.n	8002480 <FMAC_DMAFilterPreload+0x14>
 8002496:	e000      	b.n	800249a <FMAC_DMAFilterPreload+0x2e>
    {
      break;
 8002498:	bf00      	nop
    }
  }

  /* If 'START' is still set, there was an error: set FMAC handle state to error */
  if (READ_BIT(hfmac->Instance->PARAM, FMAC_PARAM_START) != 0U)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0a      	bge.n	80024ba <FMAC_DMAFilterPreload+0x4e>
  {
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	22a0      	movs	r2, #160	; 0xa0
 80024a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	635a      	str	r2, [r3, #52]	; 0x34
 80024b8:	e039      	b.n	800252e <FMAC_DMAFilterPreload+0xc2>
  }
  /* If needed, preload Y buffer */
  else if ((hfmac->pInput != NULL) && (hfmac->InputCurrentSize != 0U))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d035      	beq.n	800252e <FMAC_DMAFilterPreload+0xc2>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	8a1b      	ldrh	r3, [r3, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d031      	beq.n	800252e <FMAC_DMAFilterPreload+0xc2>
  {
    /* Write number of values to be loaded, the data load function and start the operation */
    WRITE_REG(hfmac->Instance->PARAM, \
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	8a1b      	ldrh	r3, [r3, #16]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 4203 	orr.w	r2, r2, #2197815296	; 0x83000000
 80024d8:	60da      	str	r2, [r3, #12]
              (((uint32_t)(hfmac->InputCurrentSize) << FMAC_PARAM_P_Pos) | FMAC_FUNC_LOAD_Y | FMAC_PARAM_START));

    /* Set the FMAC DMA transfer complete callback */
    hfmac->hdmaPreload->XferHalfCpltCallback = NULL;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	2200      	movs	r2, #0
 80024e0:	631a      	str	r2, [r3, #48]	; 0x30
    hfmac->hdmaPreload->XferCpltCallback = FMAC_DMAFilterPreload;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <FMAC_DMAFilterPreload+0xe8>)
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Set the DMA error callback */
    hfmac->hdmaPreload->XferErrorCallback = FMAC_DMAError;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <FMAC_DMAFilterPreload+0xec>)
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA stream managing FMAC preload data write */
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	4619      	mov	r1, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3318      	adds	r3, #24
 8002502:	461a      	mov	r2, r3
                         hfmac->InputCurrentSize) == HAL_OK)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	8a1b      	ldrh	r3, [r3, #16]
    if (HAL_DMA_Start_IT(hfmac->hdmaPreload, (uint32_t)hfmac->pInput, (uint32_t)&hfmac->Instance->WDATA,
 8002508:	f7fe fefe 	bl	8001308 <HAL_DMA_Start_IT>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <FMAC_DMAFilterPreload+0xb4>
    {
      hfmac->pInput = NULL;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
      hfmac->InputCurrentSize = 0U;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2200      	movs	r2, #0
 800251c:	821a      	strh	r2, [r3, #16]
      return;
 800251e:	e015      	b.n	800254c <FMAC_DMAFilterPreload+0xe0>
    }

    /* If not exited, there was an error */
    hfmac->ErrorCode = HAL_FMAC_ERROR_DMA;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2208      	movs	r2, #8
 8002524:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_ERROR;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	22e0      	movs	r2, #224	; 0xe0
 800252a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  else
  {
    /* nothing to do */
  }

  if (hfmac->ErrorCode == HAL_FMAC_ERROR_NONE)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <FMAC_DMAFilterPreload+0xda>
  {
    /* Change the FMAC state */
    hfmac->State = HAL_FMAC_STATE_READY;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    /* Call output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
    hfmac->FilterPreloadCallback(hfmac);
#else
    HAL_FMAC_FilterPreloadCallback(hfmac);
 800253e:	68b8      	ldr	r0, [r7, #8]
 8002540:	f7ff f9ad 	bl	800189e <HAL_FMAC_FilterPreloadCallback>
 8002544:	e002      	b.n	800254c <FMAC_DMAFilterPreload+0xe0>
  {
    /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
    hfmac->ErrorCallback(hfmac);
#else
    HAL_FMAC_ErrorCallback(hfmac);
 8002546:	68b8      	ldr	r0, [r7, #8]
 8002548:	f7ff f977 	bl	800183a <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }
}
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	0800246d 	.word	0x0800246d
 8002558:	0800255d 	.word	0x0800255d

0800255c <FMAC_DMAError>:
  * @brief  DMA FMAC communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void FMAC_DMAError(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  FMAC_HandleTypeDef *hfmac = (FMAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	60fb      	str	r3, [r7, #12]

  /* Set FMAC handle state to error */
  hfmac->State = HAL_FMAC_STATE_ERROR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	22e0      	movs	r2, #224	; 0xe0
 800256e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Set FMAC handle error code to DMA error */
  hfmac->ErrorCode |= HAL_FMAC_ERROR_DMA;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002576:	f043 0208 	orr.w	r2, r3, #8
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Call user callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
  hfmac->ErrorCallback(hfmac);
#else
  HAL_FMAC_ErrorCallback(hfmac);
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff f95b 	bl	800183a <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800259a:	e15a      	b.n	8002852 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	2101      	movs	r1, #1
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	4013      	ands	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 814c 	beq.w	800284c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d005      	beq.n	80025cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d130      	bne.n	800262e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002602:	2201      	movs	r2, #1
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	f003 0201 	and.w	r2, r3, #1
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b03      	cmp	r3, #3
 8002638:	d017      	beq.n	800266a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	2203      	movs	r2, #3
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d123      	bne.n	80026be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	220f      	movs	r2, #15
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	08da      	lsrs	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3208      	adds	r2, #8
 80026b8:	6939      	ldr	r1, [r7, #16]
 80026ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0203 	and.w	r2, r3, #3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 80a6 	beq.w	800284c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002700:	4b5b      	ldr	r3, [pc, #364]	; (8002870 <HAL_GPIO_Init+0x2e4>)
 8002702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002704:	4a5a      	ldr	r2, [pc, #360]	; (8002870 <HAL_GPIO_Init+0x2e4>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6613      	str	r3, [r2, #96]	; 0x60
 800270c:	4b58      	ldr	r3, [pc, #352]	; (8002870 <HAL_GPIO_Init+0x2e4>)
 800270e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002718:	4a56      	ldr	r2, [pc, #344]	; (8002874 <HAL_GPIO_Init+0x2e8>)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	089b      	lsrs	r3, r3, #2
 800271e:	3302      	adds	r3, #2
 8002720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002724:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	220f      	movs	r2, #15
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002742:	d01f      	beq.n	8002784 <HAL_GPIO_Init+0x1f8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a4c      	ldr	r2, [pc, #304]	; (8002878 <HAL_GPIO_Init+0x2ec>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d019      	beq.n	8002780 <HAL_GPIO_Init+0x1f4>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a4b      	ldr	r2, [pc, #300]	; (800287c <HAL_GPIO_Init+0x2f0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <HAL_GPIO_Init+0x1f0>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a4a      	ldr	r2, [pc, #296]	; (8002880 <HAL_GPIO_Init+0x2f4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00d      	beq.n	8002778 <HAL_GPIO_Init+0x1ec>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a49      	ldr	r2, [pc, #292]	; (8002884 <HAL_GPIO_Init+0x2f8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <HAL_GPIO_Init+0x1e8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a48      	ldr	r2, [pc, #288]	; (8002888 <HAL_GPIO_Init+0x2fc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d101      	bne.n	8002770 <HAL_GPIO_Init+0x1e4>
 800276c:	2305      	movs	r3, #5
 800276e:	e00a      	b.n	8002786 <HAL_GPIO_Init+0x1fa>
 8002770:	2306      	movs	r3, #6
 8002772:	e008      	b.n	8002786 <HAL_GPIO_Init+0x1fa>
 8002774:	2304      	movs	r3, #4
 8002776:	e006      	b.n	8002786 <HAL_GPIO_Init+0x1fa>
 8002778:	2303      	movs	r3, #3
 800277a:	e004      	b.n	8002786 <HAL_GPIO_Init+0x1fa>
 800277c:	2302      	movs	r3, #2
 800277e:	e002      	b.n	8002786 <HAL_GPIO_Init+0x1fa>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_GPIO_Init+0x1fa>
 8002784:	2300      	movs	r3, #0
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	f002 0203 	and.w	r2, r2, #3
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	4093      	lsls	r3, r2
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002796:	4937      	ldr	r1, [pc, #220]	; (8002874 <HAL_GPIO_Init+0x2e8>)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_GPIO_Init+0x300>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027c8:	4a30      	ldr	r2, [pc, #192]	; (800288c <HAL_GPIO_Init+0x300>)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ce:	4b2f      	ldr	r3, [pc, #188]	; (800288c <HAL_GPIO_Init+0x300>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027f2:	4a26      	ldr	r2, [pc, #152]	; (800288c <HAL_GPIO_Init+0x300>)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_GPIO_Init+0x300>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	43db      	mvns	r3, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800281c:	4a1b      	ldr	r2, [pc, #108]	; (800288c <HAL_GPIO_Init+0x300>)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_GPIO_Init+0x300>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002846:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_GPIO_Init+0x300>)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3301      	adds	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	f47f ae9d 	bne.w	800259c <HAL_GPIO_Init+0x10>
  }
}
 8002862:	bf00      	nop
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40021000 	.word	0x40021000
 8002874:	40010000 	.word	0x40010000
 8002878:	48000400 	.word	0x48000400
 800287c:	48000800 	.word	0x48000800
 8002880:	48000c00 	.word	0x48000c00
 8002884:	48001000 	.word	0x48001000
 8002888:	48001400 	.word	0x48001400
 800288c:	40010400 	.word	0x40010400

08002890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028a0:	787b      	ldrb	r3, [r7, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d006      	beq.n	80028e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028d6:	4a05      	ldr	r2, [pc, #20]	; (80028ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f806 	bl	80028f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40010400 	.word	0x40010400

080028f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d141      	bne.n	800299a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002916:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002922:	d131      	bne.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002924:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800292a:	4a46      	ldr	r2, [pc, #280]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800292c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002930:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002934:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800293c:	4a41      	ldr	r2, [pc, #260]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800293e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002942:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002944:	4b40      	ldr	r3, [pc, #256]	; (8002a48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2232      	movs	r2, #50	; 0x32
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	4a3f      	ldr	r2, [pc, #252]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002950:	fba2 2303 	umull	r2, r3, r2, r3
 8002954:	0c9b      	lsrs	r3, r3, #18
 8002956:	3301      	adds	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800295a:	e002      	b.n	8002962 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3b01      	subs	r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296e:	d102      	bne.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f2      	bne.n	800295c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002976:	4b33      	ldr	r3, [pc, #204]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002982:	d158      	bne.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e057      	b.n	8002a38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002988:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800298a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800298e:	4a2d      	ldr	r2, [pc, #180]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002994:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002998:	e04d      	b.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a0:	d141      	bne.n	8002a26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029a2:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ae:	d131      	bne.n	8002a14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029b6:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029c8:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2232      	movs	r2, #50	; 0x32
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	0c9b      	lsrs	r3, r3, #18
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e6:	e002      	b.n	80029ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fa:	d102      	bne.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f2      	bne.n	80029e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0e:	d112      	bne.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e011      	b.n	8002a38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a24:	e007      	b.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a2e:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40007000 	.word	0x40007000
 8002a48:	20000204 	.word	0x20000204
 8002a4c:	431bde83 	.word	0x431bde83

08002a50 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a5e:	6093      	str	r3, [r2, #8]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40007000 	.word	0x40007000

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e2fe      	b.n	8003080 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d075      	beq.n	8002b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8e:	4b97      	ldr	r3, [pc, #604]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a98:	4b94      	ldr	r3, [pc, #592]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_OscConfig+0x3e>
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d002      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x44>
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d10b      	bne.n	8002acc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	4b8d      	ldr	r3, [pc, #564]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d05b      	beq.n	8002b78 <HAL_RCC_OscConfig+0x108>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d157      	bne.n	8002b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e2d9      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad4:	d106      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x74>
 8002ad6:	4b85      	ldr	r3, [pc, #532]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a84      	ldr	r2, [pc, #528]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e01d      	b.n	8002b20 <HAL_RCC_OscConfig+0xb0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x98>
 8002aee:	4b7f      	ldr	r3, [pc, #508]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7e      	ldr	r2, [pc, #504]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b7c      	ldr	r3, [pc, #496]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a7b      	ldr	r2, [pc, #492]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e00b      	b.n	8002b20 <HAL_RCC_OscConfig+0xb0>
 8002b08:	4b78      	ldr	r3, [pc, #480]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a77      	ldr	r2, [pc, #476]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b75      	ldr	r3, [pc, #468]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a74      	ldr	r2, [pc, #464]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d013      	beq.n	8002b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fd ffb6 	bl	8000a98 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fd ffb2 	bl	8000a98 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e29e      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b42:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0xc0>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fd ffa2 	bl	8000a98 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b58:	f7fd ff9e 	bl	8000a98 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e28a      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b6a:	4b60      	ldr	r3, [pc, #384]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0xe8>
 8002b76:	e000      	b.n	8002b7a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d075      	beq.n	8002c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b86:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b90:	4b56      	ldr	r3, [pc, #344]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b0c      	cmp	r3, #12
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x136>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d002      	beq.n	8002bac <HAL_RCC_OscConfig+0x13c>
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d11f      	bne.n	8002bec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bac:	4b4f      	ldr	r3, [pc, #316]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x154>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e25d      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b49      	ldr	r3, [pc, #292]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	4946      	ldr	r1, [pc, #280]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bd8:	4b45      	ldr	r3, [pc, #276]	; (8002cf0 <HAL_RCC_OscConfig+0x280>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd ff0f 	bl	8000a00 <HAL_InitTick>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d043      	beq.n	8002c70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e249      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d023      	beq.n	8002c3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a3c      	ldr	r2, [pc, #240]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fd ff4a 	bl	8000a98 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7fd ff46 	bl	8000a98 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e232      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	061b      	lsls	r3, r3, #24
 8002c34:	492d      	ldr	r1, [pc, #180]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
 8002c3a:	e01a      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2a      	ldr	r2, [pc, #168]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fd ff26 	bl	8000a98 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c50:	f7fd ff22 	bl	8000a98 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e20e      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1e0>
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d041      	beq.n	8002d02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c8c:	4a17      	ldr	r2, [pc, #92]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c96:	f7fd feff 	bl	8000a98 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9e:	f7fd fefb 	bl	8000a98 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e1e7      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0ef      	beq.n	8002c9e <HAL_RCC_OscConfig+0x22e>
 8002cbe:	e020      	b.n	8002d02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <HAL_RCC_OscConfig+0x27c>)
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fd fee2 	bl	8000a98 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd6:	e00d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fd fede 	bl	8000a98 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d906      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1ca      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	20000208 	.word	0x20000208
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf4:	4b8c      	ldr	r3, [pc, #560]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ea      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80a6 	beq.w	8002e5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d10:	2300      	movs	r3, #0
 8002d12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d14:	4b84      	ldr	r3, [pc, #528]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2b4>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x2b6>
 8002d24:	2300      	movs	r3, #0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d2a:	4b7f      	ldr	r3, [pc, #508]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	4a7e      	ldr	r2, [pc, #504]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d34:	6593      	str	r3, [r2, #88]	; 0x58
 8002d36:	4b7c      	ldr	r3, [pc, #496]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d42:	2301      	movs	r3, #1
 8002d44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d46:	4b79      	ldr	r3, [pc, #484]	; (8002f2c <HAL_RCC_OscConfig+0x4bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d118      	bne.n	8002d84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d52:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <HAL_RCC_OscConfig+0x4bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a75      	ldr	r2, [pc, #468]	; (8002f2c <HAL_RCC_OscConfig+0x4bc>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5e:	f7fd fe9b 	bl	8000a98 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7fd fe97 	bl	8000a98 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e183      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d78:	4b6c      	ldr	r3, [pc, #432]	; (8002f2c <HAL_RCC_OscConfig+0x4bc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d108      	bne.n	8002d9e <HAL_RCC_OscConfig+0x32e>
 8002d8c:	4b66      	ldr	r3, [pc, #408]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	4a65      	ldr	r2, [pc, #404]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d9c:	e024      	b.n	8002de8 <HAL_RCC_OscConfig+0x378>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d110      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x358>
 8002da6:	4b60      	ldr	r3, [pc, #384]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dac:	4a5e      	ldr	r2, [pc, #376]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002db6:	4b5c      	ldr	r3, [pc, #368]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbc:	4a5a      	ldr	r2, [pc, #360]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dc6:	e00f      	b.n	8002de8 <HAL_RCC_OscConfig+0x378>
 8002dc8:	4b57      	ldr	r3, [pc, #348]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dce:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d016      	beq.n	8002e1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df0:	f7fd fe52 	bl	8000a98 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002df6:	e00a      	b.n	8002e0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fd fe4e 	bl	8000a98 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e138      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0e:	4b46      	ldr	r3, [pc, #280]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ed      	beq.n	8002df8 <HAL_RCC_OscConfig+0x388>
 8002e1c:	e015      	b.n	8002e4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fd fe3b 	bl	8000a98 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e26:	f7fd fe37 	bl	8000a98 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e121      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e3c:	4b3a      	ldr	r3, [pc, #232]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1ed      	bne.n	8002e26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e4a:	7ffb      	ldrb	r3, [r7, #31]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e50:	4b35      	ldr	r3, [pc, #212]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	4a34      	ldr	r2, [pc, #208]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d03c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01c      	beq.n	8002eaa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002e72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e76:	4a2c      	ldr	r2, [pc, #176]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fd fe0a 	bl	8000a98 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e88:	f7fd fe06 	bl	8000a98 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e0f2      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e9a:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ef      	beq.n	8002e88 <HAL_RCC_OscConfig+0x418>
 8002ea8:	e01b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eaa:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7fd fded 	bl	8000a98 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec2:	f7fd fde9 	bl	8000a98 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0d5      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ef      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80c9 	beq.w	800307e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 030c 	and.w	r3, r3, #12
 8002ef4:	2b0c      	cmp	r3, #12
 8002ef6:	f000 8083 	beq.w	8003000 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d15e      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a08      	ldr	r2, [pc, #32]	; (8002f28 <HAL_RCC_OscConfig+0x4b8>)
 8002f08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0e:	f7fd fdc3 	bl	8000a98 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f14:	e00c      	b.n	8002f30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fd fdbf 	bl	8000a98 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d905      	bls.n	8002f30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0ab      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f30:	4b55      	ldr	r3, [pc, #340]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ec      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f3c:	4b52      	ldr	r3, [pc, #328]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	4b52      	ldr	r3, [pc, #328]	; (800308c <HAL_RCC_OscConfig+0x61c>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6a11      	ldr	r1, [r2, #32]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f4c:	3a01      	subs	r2, #1
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	4311      	orrs	r1, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f56:	0212      	lsls	r2, r2, #8
 8002f58:	4311      	orrs	r1, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f5e:	0852      	lsrs	r2, r2, #1
 8002f60:	3a01      	subs	r2, #1
 8002f62:	0552      	lsls	r2, r2, #21
 8002f64:	4311      	orrs	r1, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f6a:	0852      	lsrs	r2, r2, #1
 8002f6c:	3a01      	subs	r2, #1
 8002f6e:	0652      	lsls	r2, r2, #25
 8002f70:	4311      	orrs	r1, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f76:	06d2      	lsls	r2, r2, #27
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	4943      	ldr	r1, [pc, #268]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f80:	4b41      	ldr	r3, [pc, #260]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a40      	ldr	r2, [pc, #256]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f8c:	4b3e      	ldr	r3, [pc, #248]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a3d      	ldr	r2, [pc, #244]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fd fd7e 	bl	8000a98 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fd fd7a 	bl	8000a98 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e066      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb2:	4b35      	ldr	r3, [pc, #212]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x530>
 8002fbe:	e05e      	b.n	800307e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b31      	ldr	r3, [pc, #196]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a30      	ldr	r2, [pc, #192]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fd fd64 	bl	8000a98 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fd fd60 	bl	8000a98 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e04c      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe6:	4b28      	ldr	r3, [pc, #160]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002ff2:	4b25      	ldr	r3, [pc, #148]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	4924      	ldr	r1, [pc, #144]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 8002ff8:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_RCC_OscConfig+0x620>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	60cb      	str	r3, [r1, #12]
 8002ffe:	e03e      	b.n	800307e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e039      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800300c:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <HAL_RCC_OscConfig+0x618>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0203 	and.w	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	429a      	cmp	r2, r3
 800301e:	d12c      	bne.n	800307a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	3b01      	subs	r3, #1
 800302c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d123      	bne.n	800307a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d11b      	bne.n	800307a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d113      	bne.n	800307a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	3b01      	subs	r3, #1
 8003060:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d109      	bne.n	800307a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003070:	085b      	lsrs	r3, r3, #1
 8003072:	3b01      	subs	r3, #1
 8003074:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3720      	adds	r7, #32
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	019f800c 	.word	0x019f800c
 8003090:	feeefffc 	.word	0xfeeefffc

08003094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e11e      	b.n	80032ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030ac:	4b91      	ldr	r3, [pc, #580]	; (80032f4 <HAL_RCC_ClockConfig+0x260>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d910      	bls.n	80030dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ba:	4b8e      	ldr	r3, [pc, #568]	; (80032f4 <HAL_RCC_ClockConfig+0x260>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 020f 	bic.w	r2, r3, #15
 80030c2:	498c      	ldr	r1, [pc, #560]	; (80032f4 <HAL_RCC_ClockConfig+0x260>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ca:	4b8a      	ldr	r3, [pc, #552]	; (80032f4 <HAL_RCC_ClockConfig+0x260>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e106      	b.n	80032ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d073      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d129      	bne.n	8003144 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f0:	4b81      	ldr	r3, [pc, #516]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0f4      	b.n	80032ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003100:	f000 f972 	bl	80033e8 <RCC_GetSysClockFreqFromPLLSource>
 8003104:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4a7c      	ldr	r2, [pc, #496]	; (80032fc <HAL_RCC_ClockConfig+0x268>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d93f      	bls.n	800318e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800310e:	4b7a      	ldr	r3, [pc, #488]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003122:	2b00      	cmp	r3, #0
 8003124:	d033      	beq.n	800318e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800312a:	2b00      	cmp	r3, #0
 800312c:	d12f      	bne.n	800318e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800312e:	4b72      	ldr	r3, [pc, #456]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003136:	4a70      	ldr	r2, [pc, #448]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 8003138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e024      	b.n	800318e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d107      	bne.n	800315c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314c:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0c6      	b.n	80032ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800315c:	4b66      	ldr	r3, [pc, #408]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0be      	b.n	80032ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800316c:	f000 f8ce 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8003170:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4a61      	ldr	r2, [pc, #388]	; (80032fc <HAL_RCC_ClockConfig+0x268>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d909      	bls.n	800318e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800317a:	4b5f      	ldr	r3, [pc, #380]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003182:	4a5d      	ldr	r2, [pc, #372]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 8003184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003188:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800318e:	4b5a      	ldr	r3, [pc, #360]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4957      	ldr	r1, [pc, #348]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a0:	f7fd fc7a 	bl	8000a98 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7fd fc76 	bl	8000a98 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e095      	b.n	80032ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	4b4e      	ldr	r3, [pc, #312]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 020c 	and.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1eb      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d023      	beq.n	8003224 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a42      	ldr	r2, [pc, #264]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 80031ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003200:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003208:	4a3b      	ldr	r2, [pc, #236]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 800320a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800320e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4936      	ldr	r1, [pc, #216]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
 8003222:	e008      	b.n	8003236 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b80      	cmp	r3, #128	; 0x80
 8003228:	d105      	bne.n	8003236 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800322a:	4b33      	ldr	r3, [pc, #204]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4a32      	ldr	r2, [pc, #200]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 8003230:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003234:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003236:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <HAL_RCC_ClockConfig+0x260>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d21d      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_ClockConfig+0x260>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f023 020f 	bic.w	r2, r3, #15
 800324c:	4929      	ldr	r1, [pc, #164]	; (80032f4 <HAL_RCC_ClockConfig+0x260>)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003254:	f7fd fc20 	bl	8000a98 <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	e00a      	b.n	8003272 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7fd fc1c 	bl	8000a98 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e03b      	b.n	80032ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <HAL_RCC_ClockConfig+0x260>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d1ed      	bne.n	800325c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4917      	ldr	r1, [pc, #92]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490f      	ldr	r1, [pc, #60]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032be:	f000 f825 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_RCC_ClockConfig+0x264>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490c      	ldr	r1, [pc, #48]	; (8003300 <HAL_RCC_ClockConfig+0x26c>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	fa22 f303 	lsr.w	r3, r2, r3
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <HAL_RCC_ClockConfig+0x270>)
 80032dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_RCC_ClockConfig+0x274>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd fb8c 	bl	8000a00 <HAL_InitTick>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40022000 	.word	0x40022000
 80032f8:	40021000 	.word	0x40021000
 80032fc:	04c4b400 	.word	0x04c4b400
 8003300:	08003918 	.word	0x08003918
 8003304:	20000204 	.word	0x20000204
 8003308:	20000208 	.word	0x20000208

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003312:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b04      	cmp	r3, #4
 800331c:	d102      	bne.n	8003324 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	e047      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003324:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b08      	cmp	r3, #8
 800332e:	d102      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003330:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	e03e      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003336:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d136      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800334c:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	3301      	adds	r3, #1
 8003358:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d10c      	bne.n	800337a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003360:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	fbb2 f3f3 	udiv	r3, r2, r3
 8003368:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800336a:	68d2      	ldr	r2, [r2, #12]
 800336c:	0a12      	lsrs	r2, r2, #8
 800336e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	617b      	str	r3, [r7, #20]
      break;
 8003378:	e00c      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800337a:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003382:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003384:	68d2      	ldr	r2, [r2, #12]
 8003386:	0a12      	lsrs	r2, r2, #8
 8003388:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
      break;
 8003392:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003394:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0e5b      	lsrs	r3, r3, #25
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	3301      	adds	r3, #1
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e001      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033b4:	693b      	ldr	r3, [r7, #16]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	00f42400 	.word	0x00f42400
 80033cc:	016e3600 	.word	0x016e3600

080033d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000204 	.word	0x20000204

080033e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	3301      	adds	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d10c      	bne.n	8003426 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800340c:	4a17      	ldr	r2, [pc, #92]	; (800346c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003416:	68d2      	ldr	r2, [r2, #12]
 8003418:	0a12      	lsrs	r2, r2, #8
 800341a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	617b      	str	r3, [r7, #20]
    break;
 8003424:	e00c      	b.n	8003440 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003426:	4a12      	ldr	r2, [pc, #72]	; (8003470 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003430:	68d2      	ldr	r2, [r2, #12]
 8003432:	0a12      	lsrs	r2, r2, #8
 8003434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
    break;
 800343e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0e5b      	lsrs	r3, r3, #25
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800345a:	687b      	ldr	r3, [r7, #4]
}
 800345c:	4618      	mov	r0, r3
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40021000 	.word	0x40021000
 800346c:	016e3600 	.word	0x016e3600
 8003470:	00f42400 	.word	0x00f42400

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e049      	b.n	800351a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd f98a 	bl	80007b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 f8ae 	bl	8003614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	d001      	beq.n	800353c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e054      	b.n	80035e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d022      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x80>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003566:	d01d      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x80>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x80>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a21      	ldr	r2, [pc, #132]	; (80035fc <HAL_TIM_Base_Start_IT+0xd8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x80>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <HAL_TIM_Base_Start_IT+0xdc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00e      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x80>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1e      	ldr	r2, [pc, #120]	; (8003604 <HAL_TIM_Base_Start_IT+0xe0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x80>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1c      	ldr	r2, [pc, #112]	; (8003608 <HAL_TIM_Base_Start_IT+0xe4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x80>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1b      	ldr	r2, [pc, #108]	; (800360c <HAL_TIM_Base_Start_IT+0xe8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d115      	bne.n	80035d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	4b19      	ldr	r3, [pc, #100]	; (8003610 <HAL_TIM_Base_Start_IT+0xec>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d015      	beq.n	80035e2 <HAL_TIM_Base_Start_IT+0xbe>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035bc:	d011      	beq.n	80035e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ce:	e008      	b.n	80035e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e000      	b.n	80035e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800
 8003600:	40000c00 	.word	0x40000c00
 8003604:	40013400 	.word	0x40013400
 8003608:	40014000 	.word	0x40014000
 800360c:	40015000 	.word	0x40015000
 8003610:	00010007 	.word	0x00010007

08003614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a4c      	ldr	r2, [pc, #304]	; (8003758 <TIM_Base_SetConfig+0x144>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d017      	beq.n	800365c <TIM_Base_SetConfig+0x48>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003632:	d013      	beq.n	800365c <TIM_Base_SetConfig+0x48>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a49      	ldr	r2, [pc, #292]	; (800375c <TIM_Base_SetConfig+0x148>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00f      	beq.n	800365c <TIM_Base_SetConfig+0x48>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a48      	ldr	r2, [pc, #288]	; (8003760 <TIM_Base_SetConfig+0x14c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00b      	beq.n	800365c <TIM_Base_SetConfig+0x48>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a47      	ldr	r2, [pc, #284]	; (8003764 <TIM_Base_SetConfig+0x150>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <TIM_Base_SetConfig+0x48>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a46      	ldr	r2, [pc, #280]	; (8003768 <TIM_Base_SetConfig+0x154>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0x48>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a45      	ldr	r2, [pc, #276]	; (800376c <TIM_Base_SetConfig+0x158>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d108      	bne.n	800366e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a39      	ldr	r2, [pc, #228]	; (8003758 <TIM_Base_SetConfig+0x144>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d023      	beq.n	80036be <TIM_Base_SetConfig+0xaa>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367c:	d01f      	beq.n	80036be <TIM_Base_SetConfig+0xaa>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a36      	ldr	r2, [pc, #216]	; (800375c <TIM_Base_SetConfig+0x148>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01b      	beq.n	80036be <TIM_Base_SetConfig+0xaa>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a35      	ldr	r2, [pc, #212]	; (8003760 <TIM_Base_SetConfig+0x14c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d017      	beq.n	80036be <TIM_Base_SetConfig+0xaa>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a34      	ldr	r2, [pc, #208]	; (8003764 <TIM_Base_SetConfig+0x150>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <TIM_Base_SetConfig+0xaa>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a33      	ldr	r2, [pc, #204]	; (8003768 <TIM_Base_SetConfig+0x154>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00f      	beq.n	80036be <TIM_Base_SetConfig+0xaa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a33      	ldr	r2, [pc, #204]	; (8003770 <TIM_Base_SetConfig+0x15c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <TIM_Base_SetConfig+0xaa>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a32      	ldr	r2, [pc, #200]	; (8003774 <TIM_Base_SetConfig+0x160>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <TIM_Base_SetConfig+0xaa>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a31      	ldr	r2, [pc, #196]	; (8003778 <TIM_Base_SetConfig+0x164>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_Base_SetConfig+0xaa>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2c      	ldr	r2, [pc, #176]	; (800376c <TIM_Base_SetConfig+0x158>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a18      	ldr	r2, [pc, #96]	; (8003758 <TIM_Base_SetConfig+0x144>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <TIM_Base_SetConfig+0x110>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <TIM_Base_SetConfig+0x154>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00f      	beq.n	8003724 <TIM_Base_SetConfig+0x110>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <TIM_Base_SetConfig+0x15c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00b      	beq.n	8003724 <TIM_Base_SetConfig+0x110>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a19      	ldr	r2, [pc, #100]	; (8003774 <TIM_Base_SetConfig+0x160>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d007      	beq.n	8003724 <TIM_Base_SetConfig+0x110>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a18      	ldr	r2, [pc, #96]	; (8003778 <TIM_Base_SetConfig+0x164>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_Base_SetConfig+0x110>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a13      	ldr	r2, [pc, #76]	; (800376c <TIM_Base_SetConfig+0x158>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f023 0201 	bic.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	611a      	str	r2, [r3, #16]
  }
}
 800374a:	bf00      	nop
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40013400 	.word	0x40013400
 800376c:	40015000 	.word	0x40015000
 8003770:	40014000 	.word	0x40014000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800

0800377c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003790:	2302      	movs	r3, #2
 8003792:	e074      	b.n	800387e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a34      	ldr	r2, [pc, #208]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a33      	ldr	r2, [pc, #204]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a31      	ldr	r2, [pc, #196]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d108      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a21      	ldr	r2, [pc, #132]	; (800388c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d022      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003814:	d01d      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1f      	ldr	r2, [pc, #124]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d018      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1d      	ldr	r2, [pc, #116]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d013      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d00e      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a15      	ldr	r2, [pc, #84]	; (8003890 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d009      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d004      	beq.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a11      	ldr	r2, [pc, #68]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10c      	bne.n	800386c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	4313      	orrs	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40015000 	.word	0x40015000
 8003898:	40000400 	.word	0x40000400
 800389c:	40000800 	.word	0x40000800
 80038a0:	40000c00 	.word	0x40000c00
 80038a4:	40014000 	.word	0x40014000

080038a8 <memset>:
 80038a8:	4402      	add	r2, r0
 80038aa:	4603      	mov	r3, r0
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d100      	bne.n	80038b2 <memset+0xa>
 80038b0:	4770      	bx	lr
 80038b2:	f803 1b01 	strb.w	r1, [r3], #1
 80038b6:	e7f9      	b.n	80038ac <memset+0x4>

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4d0d      	ldr	r5, [pc, #52]	; (80038f0 <__libc_init_array+0x38>)
 80038bc:	4c0d      	ldr	r4, [pc, #52]	; (80038f4 <__libc_init_array+0x3c>)
 80038be:	1b64      	subs	r4, r4, r5
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	2600      	movs	r6, #0
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	4d0b      	ldr	r5, [pc, #44]	; (80038f8 <__libc_init_array+0x40>)
 80038ca:	4c0c      	ldr	r4, [pc, #48]	; (80038fc <__libc_init_array+0x44>)
 80038cc:	f000 f818 	bl	8003900 <_init>
 80038d0:	1b64      	subs	r4, r4, r5
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	2600      	movs	r6, #0
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	08003928 	.word	0x08003928
 80038f4:	08003928 	.word	0x08003928
 80038f8:	08003928 	.word	0x08003928
 80038fc:	0800392c 	.word	0x0800392c

08003900 <_init>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr

0800390c <_fini>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr
