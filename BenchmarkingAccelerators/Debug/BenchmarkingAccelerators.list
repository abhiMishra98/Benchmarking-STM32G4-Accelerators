
BenchmarkingAccelerators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001c84  08001c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c94  08001c94  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08001c94  08001c94  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c94  08001c94  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c94  08001c94  00011c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c98  08001c98  00011c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08001c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000034  08001cd0  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001cd0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000056b8  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001315  00000000  00000000  000257d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005c0  00000000  00000000  00026af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000419  00000000  00000000  000270b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e84  00000000  00000000  000274c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006910  00000000  00000000  0004b34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e34f5  00000000  00000000  00051c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000014e4  00000000  00000000  00135154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00136638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001363  00000000  00000000  001366ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00137a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001c6c 	.word	0x08001c6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	08001c6c 	.word	0x08001c6c

08000218 <main>:
float a[5] = {1,2,4,5,6};
float b[5] = {1,2,3,4,5};
float c[9];

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 f976 	bl	800050e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f811 	bl	8000248 <SystemClock_Config>
  arm_conv_f32(a,5,b,5,c);
 8000226:	4b05      	ldr	r3, [pc, #20]	; (800023c <main+0x24>)
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	2305      	movs	r3, #5
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <main+0x28>)
 800022e:	2105      	movs	r1, #5
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <main+0x2c>)
 8000232:	f001 fa55 	bl	80016e0 <arm_conv_f32>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f853 	bl	80002e0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023a:	e7fe      	b.n	800023a <main+0x22>
 800023c:	20000050 	.word	0x20000050
 8000240:	20000014 	.word	0x20000014
 8000244:	20000000 	.word	0x20000000

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b094      	sub	sp, #80	; 0x50
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2238      	movs	r2, #56	; 0x38
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fcdc 	bl	8001c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800026a:	2000      	movs	r0, #0
 800026c:	f000 fc8e 	bl	8000b8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000270:	2302      	movs	r3, #2
 8000272:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000278:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027a:	2340      	movs	r3, #64	; 0x40
 800027c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	2302      	movs	r3, #2
 8000280:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000282:	2302      	movs	r3, #2
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000286:	2304      	movs	r3, #4
 8000288:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800028a:	2355      	movs	r3, #85	; 0x55
 800028c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800028e:	2302      	movs	r3, #2
 8000290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000292:	2302      	movs	r3, #2
 8000294:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000296:	2302      	movs	r3, #2
 8000298:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0318 	add.w	r3, r7, #24
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fd28 	bl	8000cf4 <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002aa:	f000 f899 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2104      	movs	r1, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 f826 	bl	8001318 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002d2:	f000 f885 	bl	80003e0 <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3750      	adds	r7, #80	; 0x50
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	; 0x28
 80002e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f6:	4b38      	ldr	r3, [pc, #224]	; (80003d8 <MX_GPIO_Init+0xf8>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	4a37      	ldr	r2, [pc, #220]	; (80003d8 <MX_GPIO_Init+0xf8>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000302:	4b35      	ldr	r3, [pc, #212]	; (80003d8 <MX_GPIO_Init+0xf8>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	f003 0304 	and.w	r3, r3, #4
 800030a:	613b      	str	r3, [r7, #16]
 800030c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800030e:	4b32      	ldr	r3, [pc, #200]	; (80003d8 <MX_GPIO_Init+0xf8>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	4a31      	ldr	r2, [pc, #196]	; (80003d8 <MX_GPIO_Init+0xf8>)
 8000314:	f043 0320 	orr.w	r3, r3, #32
 8000318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031a:	4b2f      	ldr	r3, [pc, #188]	; (80003d8 <MX_GPIO_Init+0xf8>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	f003 0320 	and.w	r3, r3, #32
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <MX_GPIO_Init+0xf8>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	4a2b      	ldr	r2, [pc, #172]	; (80003d8 <MX_GPIO_Init+0xf8>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <MX_GPIO_Init+0xf8>)
 8000334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <MX_GPIO_Init+0xf8>)
 8000340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000342:	4a25      	ldr	r2, [pc, #148]	; (80003d8 <MX_GPIO_Init+0xf8>)
 8000344:	f043 0302 	orr.w	r3, r3, #2
 8000348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034a:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <MX_GPIO_Init+0xf8>)
 800034c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034e:	f003 0302 	and.w	r3, r3, #2
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2120      	movs	r1, #32
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f000 fbd9 	bl	8000b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000368:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800036c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	4619      	mov	r1, r3
 8000378:	4818      	ldr	r0, [pc, #96]	; (80003dc <MX_GPIO_Init+0xfc>)
 800037a:	f000 fa49 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800037e:	230c      	movs	r3, #12
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000382:	2302      	movs	r3, #2
 8000384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038a:	2300      	movs	r3, #0
 800038c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800038e:	230c      	movs	r3, #12
 8000390:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000392:	f107 0314 	add.w	r3, r7, #20
 8000396:	4619      	mov	r1, r3
 8000398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039c:	f000 fa38 	bl	8000810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a0:	2320      	movs	r3, #32
 80003a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a4:	2301      	movs	r3, #1
 80003a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ac:	2300      	movs	r3, #0
 80003ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b0:	f107 0314 	add.w	r3, r7, #20
 80003b4:	4619      	mov	r1, r3
 80003b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ba:	f000 fa29 	bl	8000810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2100      	movs	r1, #0
 80003c2:	2028      	movs	r0, #40	; 0x28
 80003c4:	f000 f9ef 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003c8:	2028      	movs	r0, #40	; 0x28
 80003ca:	f000 fa06 	bl	80007da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ce:	bf00      	nop
 80003d0:	3728      	adds	r7, #40	; 0x28
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	48000800 	.word	0x48000800

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x44>)
 80003f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6613      	str	r3, [r2, #96]	; 0x60
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x44>)
 8000400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_MspInit+0x44>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	6593      	str	r3, [r2, #88]	; 0x58
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_MspInit+0x44>)
 8000418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000422:	f000 fc57 	bl	8000cd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000438:	e7fe      	b.n	8000438 <NMI_Handler+0x4>

0800043a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <HardFault_Handler+0x4>

08000440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <MemManage_Handler+0x4>

08000446 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <BusFault_Handler+0x4>

0800044c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <UsageFault_Handler+0x4>

08000452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000480:	f000 f898 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800048c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000490:	f000 fb58 	bl	8000b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}

08000498 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <SystemInit+0x20>)
 800049e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a2:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <SystemInit+0x20>)
 80004a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	e000ed00 	.word	0xe000ed00

080004bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004bc:	480d      	ldr	r0, [pc, #52]	; (80004f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c0:	f7ff ffea 	bl	8000498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c6:	490d      	ldr	r1, [pc, #52]	; (80004fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <LoopForever+0xe>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80004cc:	e002      	b.n	80004d4 <LoopCopyDataInit>

080004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d2:	3304      	adds	r3, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d8:	d3f9      	bcc.n	80004ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004da:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004dc:	4c0a      	ldr	r4, [pc, #40]	; (8000508 <LoopForever+0x16>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e0:	e001      	b.n	80004e6 <LoopFillZerobss>

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e4:	3204      	adds	r2, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ea:	f001 fb9b 	bl	8001c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ee:	f7ff fe93 	bl	8000218 <main>

080004f2 <LoopForever>:

LoopForever:
    b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   r0, =_estack
 80004f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004fc:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000500:	08001c9c 	.word	0x08001c9c
  ldr r2, =_sbss
 8000504:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000508:	20000078 	.word	0x20000078

0800050c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_2_IRQHandler>

0800050e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000514:	2300      	movs	r3, #0
 8000516:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f939 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800051e:	2000      	movs	r0, #0
 8000520:	f000 f80e 	bl	8000540 <HAL_InitTick>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	e001      	b.n	8000534 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000530:	f7ff ff5c 	bl	80003ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000534:	79fb      	ldrb	r3, [r7, #7]

}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000548:	2300      	movs	r3, #0
 800054a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <HAL_InitTick+0x68>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d022      	beq.n	800059a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_InitTick+0x6c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <HAL_InitTick+0x68>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000560:	fbb1 f3f3 	udiv	r3, r1, r3
 8000564:	fbb2 f3f3 	udiv	r3, r2, r3
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f944 	bl	80007f6 <HAL_SYSTICK_Config>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d10f      	bne.n	8000594 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0f      	cmp	r3, #15
 8000578:	d809      	bhi.n	800058e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057a:	2200      	movs	r2, #0
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	f04f 30ff 	mov.w	r0, #4294967295
 8000582:	f000 f910 	bl	80007a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_InitTick+0x70>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	e007      	b.n	800059e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e004      	b.n	800059e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e001      	b.n	800059e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800059e:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000030 	.word	0x20000030
 80005ac:	20000028 	.word	0x20000028
 80005b0:	2000002c 	.word	0x2000002c

080005b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_IncTick+0x1c>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x20>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4413      	add	r3, r2
 80005c2:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <HAL_IncTick+0x1c>)
 80005c4:	6013      	str	r3, [r2, #0]
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	20000074 	.word	0x20000074
 80005d4:	20000030 	.word	0x20000030

080005d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  return uwTick;
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <HAL_GetTick+0x14>)
 80005de:	681b      	ldr	r3, [r3, #0]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000074 	.word	0x20000074

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b4:	f7ff ff40 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	68b9      	ldr	r1, [r7, #8]
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f7ff ff90 	bl	80006e4 <NVIC_EncodePriority>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ff5f 	bl	8000690 <__NVIC_SetPriority>
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff33 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffa4 	bl	800074c <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800081e:	e15a      	b.n	8000ad6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	2101      	movs	r1, #1
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	fa01 f303 	lsl.w	r3, r1, r3
 800082c:	4013      	ands	r3, r2
 800082e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 814c 	beq.w	8000ad0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f003 0303 	and.w	r3, r3, #3
 8000840:	2b01      	cmp	r3, #1
 8000842:	d005      	beq.n	8000850 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800084c:	2b02      	cmp	r3, #2
 800084e:	d130      	bne.n	80008b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	2203      	movs	r2, #3
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	693a      	ldr	r2, [r7, #16]
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	68da      	ldr	r2, [r3, #12]
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	693a      	ldr	r2, [r7, #16]
 8000876:	4313      	orrs	r3, r2
 8000878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000886:	2201      	movs	r2, #1
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	091b      	lsrs	r3, r3, #4
 800089c:	f003 0201 	and.w	r2, r3, #1
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d017      	beq.n	80008ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	2203      	movs	r2, #3
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 0303 	and.w	r3, r3, #3
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d123      	bne.n	8000942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	08da      	lsrs	r2, r3, #3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3208      	adds	r2, #8
 8000902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	220f      	movs	r2, #15
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	691a      	ldr	r2, [r3, #16]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f003 0307 	and.w	r3, r3, #7
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	08da      	lsrs	r2, r3, #3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3208      	adds	r2, #8
 800093c:	6939      	ldr	r1, [r7, #16]
 800093e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	2203      	movs	r2, #3
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43db      	mvns	r3, r3
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	4013      	ands	r3, r2
 8000958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	f003 0203 	and.w	r2, r3, #3
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 80a6 	beq.w	8000ad0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000984:	4b5b      	ldr	r3, [pc, #364]	; (8000af4 <HAL_GPIO_Init+0x2e4>)
 8000986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000988:	4a5a      	ldr	r2, [pc, #360]	; (8000af4 <HAL_GPIO_Init+0x2e4>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6613      	str	r3, [r2, #96]	; 0x60
 8000990:	4b58      	ldr	r3, [pc, #352]	; (8000af4 <HAL_GPIO_Init+0x2e4>)
 8000992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800099c:	4a56      	ldr	r2, [pc, #344]	; (8000af8 <HAL_GPIO_Init+0x2e8>)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	3302      	adds	r3, #2
 80009a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	220f      	movs	r2, #15
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	4013      	ands	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009c6:	d01f      	beq.n	8000a08 <HAL_GPIO_Init+0x1f8>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a4c      	ldr	r2, [pc, #304]	; (8000afc <HAL_GPIO_Init+0x2ec>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d019      	beq.n	8000a04 <HAL_GPIO_Init+0x1f4>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a4b      	ldr	r2, [pc, #300]	; (8000b00 <HAL_GPIO_Init+0x2f0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d013      	beq.n	8000a00 <HAL_GPIO_Init+0x1f0>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a4a      	ldr	r2, [pc, #296]	; (8000b04 <HAL_GPIO_Init+0x2f4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d00d      	beq.n	80009fc <HAL_GPIO_Init+0x1ec>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a49      	ldr	r2, [pc, #292]	; (8000b08 <HAL_GPIO_Init+0x2f8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d007      	beq.n	80009f8 <HAL_GPIO_Init+0x1e8>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a48      	ldr	r2, [pc, #288]	; (8000b0c <HAL_GPIO_Init+0x2fc>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d101      	bne.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009f0:	2305      	movs	r3, #5
 80009f2:	e00a      	b.n	8000a0a <HAL_GPIO_Init+0x1fa>
 80009f4:	2306      	movs	r3, #6
 80009f6:	e008      	b.n	8000a0a <HAL_GPIO_Init+0x1fa>
 80009f8:	2304      	movs	r3, #4
 80009fa:	e006      	b.n	8000a0a <HAL_GPIO_Init+0x1fa>
 80009fc:	2303      	movs	r3, #3
 80009fe:	e004      	b.n	8000a0a <HAL_GPIO_Init+0x1fa>
 8000a00:	2302      	movs	r3, #2
 8000a02:	e002      	b.n	8000a0a <HAL_GPIO_Init+0x1fa>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <HAL_GPIO_Init+0x1fa>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	f002 0203 	and.w	r2, r2, #3
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	4093      	lsls	r3, r2
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a1a:	4937      	ldr	r1, [pc, #220]	; (8000af8 <HAL_GPIO_Init+0x2e8>)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3302      	adds	r3, #2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a28:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a4c:	4a30      	ldr	r2, [pc, #192]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a76:	4a26      	ldr	r2, [pc, #152]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <HAL_GPIO_Init+0x300>)
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f47f ae9d 	bne.w	8000820 <HAL_GPIO_Init+0x10>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	bf00      	nop
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40010000 	.word	0x40010000
 8000afc:	48000400 	.word	0x48000400
 8000b00:	48000800 	.word	0x48000800
 8000b04:	48000c00 	.word	0x48000c00
 8000b08:	48001000 	.word	0x48001000
 8000b0c:	48001400 	.word	0x48001400
 8000b10:	40010400 	.word	0x40010400

08000b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	807b      	strh	r3, [r7, #2]
 8000b20:	4613      	mov	r3, r2
 8000b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b24:	787b      	ldrb	r3, [r7, #1]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b2a:	887a      	ldrh	r2, [r7, #2]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b30:	e002      	b.n	8000b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b50:	695a      	ldr	r2, [r3, #20]
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	4013      	ands	r3, r2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f806 	bl	8000b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40010400 	.word	0x40010400

08000b74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d141      	bne.n	8000c1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b9a:	4b4b      	ldr	r3, [pc, #300]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ba6:	d131      	bne.n	8000c0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ba8:	4b47      	ldr	r3, [pc, #284]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bae:	4a46      	ldr	r2, [pc, #280]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb8:	4b43      	ldr	r3, [pc, #268]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bc0:	4a41      	ldr	r2, [pc, #260]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bc8:	4b40      	ldr	r3, [pc, #256]	; (8000ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2232      	movs	r2, #50	; 0x32
 8000bce:	fb02 f303 	mul.w	r3, r2, r3
 8000bd2:	4a3f      	ldr	r2, [pc, #252]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd8:	0c9b      	lsrs	r3, r3, #18
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bde:	e002      	b.n	8000be6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000be6:	4b38      	ldr	r3, [pc, #224]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf2:	d102      	bne.n	8000bfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1f2      	bne.n	8000be0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c06:	d158      	bne.n	8000cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e057      	b.n	8000cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c12:	4a2d      	ldr	r2, [pc, #180]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000c1c:	e04d      	b.n	8000cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c24:	d141      	bne.n	8000caa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c32:	d131      	bne.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c3a:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c44:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c4c:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2232      	movs	r2, #50	; 0x32
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	0c9b      	lsrs	r3, r3, #18
 8000c66:	3301      	adds	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c6a:	e002      	b.n	8000c72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c7e:	d102      	bne.n	8000c86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1f2      	bne.n	8000c6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c92:	d112      	bne.n	8000cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e011      	b.n	8000cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ca8:	e007      	b.n	8000cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40007000 	.word	0x40007000
 8000ccc:	20000028 	.word	0x20000028
 8000cd0:	431bde83 	.word	0x431bde83

08000cd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce2:	6093      	str	r3, [r2, #8]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40007000 	.word	0x40007000

08000cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e2fe      	b.n	8001304 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d075      	beq.n	8000dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d12:	4b97      	ldr	r3, [pc, #604]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d1c:	4b94      	ldr	r3, [pc, #592]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	2b0c      	cmp	r3, #12
 8000d2a:	d102      	bne.n	8000d32 <HAL_RCC_OscConfig+0x3e>
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d002      	beq.n	8000d38 <HAL_RCC_OscConfig+0x44>
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d10b      	bne.n	8000d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d38:	4b8d      	ldr	r3, [pc, #564]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d05b      	beq.n	8000dfc <HAL_RCC_OscConfig+0x108>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d157      	bne.n	8000dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e2d9      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d58:	d106      	bne.n	8000d68 <HAL_RCC_OscConfig+0x74>
 8000d5a:	4b85      	ldr	r3, [pc, #532]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a84      	ldr	r2, [pc, #528]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e01d      	b.n	8000da4 <HAL_RCC_OscConfig+0xb0>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d70:	d10c      	bne.n	8000d8c <HAL_RCC_OscConfig+0x98>
 8000d72:	4b7f      	ldr	r3, [pc, #508]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a7e      	ldr	r2, [pc, #504]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4b7c      	ldr	r3, [pc, #496]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a7b      	ldr	r2, [pc, #492]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e00b      	b.n	8000da4 <HAL_RCC_OscConfig+0xb0>
 8000d8c:	4b78      	ldr	r3, [pc, #480]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a77      	ldr	r2, [pc, #476]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b75      	ldr	r3, [pc, #468]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a74      	ldr	r2, [pc, #464]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d013      	beq.n	8000dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dac:	f7ff fc14 	bl	80005d8 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db4:	f7ff fc10 	bl	80005d8 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b64      	cmp	r3, #100	; 0x64
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e29e      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dc6:	4b6a      	ldr	r3, [pc, #424]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0xc0>
 8000dd2:	e014      	b.n	8000dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fc00 	bl	80005d8 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fbfc 	bl	80005d8 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b64      	cmp	r3, #100	; 0x64
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e28a      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dee:	4b60      	ldr	r3, [pc, #384]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f0      	bne.n	8000ddc <HAL_RCC_OscConfig+0xe8>
 8000dfa:	e000      	b.n	8000dfe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d075      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e0a:	4b59      	ldr	r3, [pc, #356]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e14:	4b56      	ldr	r3, [pc, #344]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2b0c      	cmp	r3, #12
 8000e22:	d102      	bne.n	8000e2a <HAL_RCC_OscConfig+0x136>
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d002      	beq.n	8000e30 <HAL_RCC_OscConfig+0x13c>
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d11f      	bne.n	8000e70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e30:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d005      	beq.n	8000e48 <HAL_RCC_OscConfig+0x154>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d101      	bne.n	8000e48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e25d      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e48:	4b49      	ldr	r3, [pc, #292]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	061b      	lsls	r3, r3, #24
 8000e56:	4946      	ldr	r1, [pc, #280]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e5c:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <HAL_RCC_OscConfig+0x280>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fb6d 	bl	8000540 <HAL_InitTick>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d043      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e249      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d023      	beq.n	8000ec0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e78:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a3c      	ldr	r2, [pc, #240]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e84:	f7ff fba8 	bl	80005d8 <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e8a:	e008      	b.n	8000e9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fba4 	bl	80005d8 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d901      	bls.n	8000e9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e232      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e9e:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f0      	beq.n	8000e8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	061b      	lsls	r3, r3, #24
 8000eb8:	492d      	ldr	r1, [pc, #180]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	604b      	str	r3, [r1, #4]
 8000ebe:	e01a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ec0:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a2a      	ldr	r2, [pc, #168]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000ec6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fb84 	bl	80005d8 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fb80 	bl	80005d8 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e20e      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f0      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x1e0>
 8000ef2:	e000      	b.n	8000ef6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ef4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d041      	beq.n	8000f86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d01c      	beq.n	8000f44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f10:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fb5d 	bl	80005d8 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f20:	e008      	b.n	8000f34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f22:	f7ff fb59 	bl	80005d8 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d901      	bls.n	8000f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e1e7      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d0ef      	beq.n	8000f22 <HAL_RCC_OscConfig+0x22e>
 8000f42:	e020      	b.n	8000f86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f54:	f7ff fb40 	bl	80005d8 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f5a:	e00d      	b.n	8000f78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fb3c 	bl	80005d8 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d906      	bls.n	8000f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e1ca      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f78:	4b8c      	ldr	r3, [pc, #560]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8000f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1ea      	bne.n	8000f5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80a6 	beq.w	80010e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f98:	4b84      	ldr	r3, [pc, #528]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x2b4>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x2b6>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00d      	beq.n	8000fca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b7f      	ldr	r3, [pc, #508]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a7e      	ldr	r2, [pc, #504]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b7c      	ldr	r3, [pc, #496]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fca:	4b79      	ldr	r3, [pc, #484]	; (80011b0 <HAL_RCC_OscConfig+0x4bc>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d118      	bne.n	8001008 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fd6:	4b76      	ldr	r3, [pc, #472]	; (80011b0 <HAL_RCC_OscConfig+0x4bc>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a75      	ldr	r2, [pc, #468]	; (80011b0 <HAL_RCC_OscConfig+0x4bc>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff faf9 	bl	80005d8 <HAL_GetTick>
 8000fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe8:	e008      	b.n	8000ffc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fea:	f7ff faf5 	bl	80005d8 <HAL_GetTick>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e183      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ffc:	4b6c      	ldr	r3, [pc, #432]	; (80011b0 <HAL_RCC_OscConfig+0x4bc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f0      	beq.n	8000fea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d108      	bne.n	8001022 <HAL_RCC_OscConfig+0x32e>
 8001010:	4b66      	ldr	r3, [pc, #408]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001016:	4a65      	ldr	r2, [pc, #404]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001020:	e024      	b.n	800106c <HAL_RCC_OscConfig+0x378>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b05      	cmp	r3, #5
 8001028:	d110      	bne.n	800104c <HAL_RCC_OscConfig+0x358>
 800102a:	4b60      	ldr	r3, [pc, #384]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 800102c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001030:	4a5e      	ldr	r2, [pc, #376]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800103a:	4b5c      	ldr	r3, [pc, #368]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 800103c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001040:	4a5a      	ldr	r2, [pc, #360]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800104a:	e00f      	b.n	800106c <HAL_RCC_OscConfig+0x378>
 800104c:	4b57      	ldr	r3, [pc, #348]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 800104e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001052:	4a56      	ldr	r2, [pc, #344]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 800105e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001062:	4a52      	ldr	r2, [pc, #328]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001064:	f023 0304 	bic.w	r3, r3, #4
 8001068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d016      	beq.n	80010a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001074:	f7ff fab0 	bl	80005d8 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800107a:	e00a      	b.n	8001092 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107c:	f7ff faac 	bl	80005d8 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	f241 3288 	movw	r2, #5000	; 0x1388
 800108a:	4293      	cmp	r3, r2
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e138      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001092:	4b46      	ldr	r3, [pc, #280]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001098:	f003 0302 	and.w	r3, r3, #2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0ed      	beq.n	800107c <HAL_RCC_OscConfig+0x388>
 80010a0:	e015      	b.n	80010ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a2:	f7ff fa99 	bl	80005d8 <HAL_GetTick>
 80010a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010a8:	e00a      	b.n	80010c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010aa:	f7ff fa95 	bl	80005d8 <HAL_GetTick>
 80010ae:	4602      	mov	r2, r0
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e121      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 80010c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1ed      	bne.n	80010aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010ce:	7ffb      	ldrb	r3, [r7, #31]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d105      	bne.n	80010e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	4a34      	ldr	r2, [pc, #208]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 80010da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d03c      	beq.n	8001166 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d01c      	beq.n	800112e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 80010f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010fa:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001104:	f7ff fa68 	bl	80005d8 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800110c:	f7ff fa64 	bl	80005d8 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e0f2      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0ef      	beq.n	800110c <HAL_RCC_OscConfig+0x418>
 800112c:	e01b      	b.n	8001166 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001134:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001136:	f023 0301 	bic.w	r3, r3, #1
 800113a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800113e:	f7ff fa4b 	bl	80005d8 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001146:	f7ff fa47 	bl	80005d8 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e0d5      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 800115a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1ef      	bne.n	8001146 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 80c9 	beq.w	8001302 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 030c 	and.w	r3, r3, #12
 8001178:	2b0c      	cmp	r3, #12
 800117a:	f000 8083 	beq.w	8001284 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d15e      	bne.n	8001244 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a08      	ldr	r2, [pc, #32]	; (80011ac <HAL_RCC_OscConfig+0x4b8>)
 800118c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001192:	f7ff fa21 	bl	80005d8 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001198:	e00c      	b.n	80011b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fa1d 	bl	80005d8 <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d905      	bls.n	80011b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e0ab      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011b4:	4b55      	ldr	r3, [pc, #340]	; (800130c <HAL_RCC_OscConfig+0x618>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ec      	bne.n	800119a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c0:	4b52      	ldr	r3, [pc, #328]	; (800130c <HAL_RCC_OscConfig+0x618>)
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	4b52      	ldr	r3, [pc, #328]	; (8001310 <HAL_RCC_OscConfig+0x61c>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6a11      	ldr	r1, [r2, #32]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011d0:	3a01      	subs	r2, #1
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	4311      	orrs	r1, r2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80011da:	0212      	lsls	r2, r2, #8
 80011dc:	4311      	orrs	r1, r2
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011e2:	0852      	lsrs	r2, r2, #1
 80011e4:	3a01      	subs	r2, #1
 80011e6:	0552      	lsls	r2, r2, #21
 80011e8:	4311      	orrs	r1, r2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011ee:	0852      	lsrs	r2, r2, #1
 80011f0:	3a01      	subs	r2, #1
 80011f2:	0652      	lsls	r2, r2, #25
 80011f4:	4311      	orrs	r1, r2
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011fa:	06d2      	lsls	r2, r2, #27
 80011fc:	430a      	orrs	r2, r1
 80011fe:	4943      	ldr	r1, [pc, #268]	; (800130c <HAL_RCC_OscConfig+0x618>)
 8001200:	4313      	orrs	r3, r2
 8001202:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001204:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_RCC_OscConfig+0x618>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a40      	ldr	r2, [pc, #256]	; (800130c <HAL_RCC_OscConfig+0x618>)
 800120a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800120e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001210:	4b3e      	ldr	r3, [pc, #248]	; (800130c <HAL_RCC_OscConfig+0x618>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4a3d      	ldr	r2, [pc, #244]	; (800130c <HAL_RCC_OscConfig+0x618>)
 8001216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800121a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff f9dc 	bl	80005d8 <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001224:	f7ff f9d8 	bl	80005d8 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e066      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001236:	4b35      	ldr	r3, [pc, #212]	; (800130c <HAL_RCC_OscConfig+0x618>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0f0      	beq.n	8001224 <HAL_RCC_OscConfig+0x530>
 8001242:	e05e      	b.n	8001302 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_RCC_OscConfig+0x618>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a30      	ldr	r2, [pc, #192]	; (800130c <HAL_RCC_OscConfig+0x618>)
 800124a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800124e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff f9c2 	bl	80005d8 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001258:	f7ff f9be 	bl	80005d8 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e04c      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_RCC_OscConfig+0x618>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_RCC_OscConfig+0x618>)
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	4924      	ldr	r1, [pc, #144]	; (800130c <HAL_RCC_OscConfig+0x618>)
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_RCC_OscConfig+0x620>)
 800127e:	4013      	ands	r3, r2
 8001280:	60cb      	str	r3, [r1, #12]
 8001282:	e03e      	b.n	8001302 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e039      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_OscConfig+0x618>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d12c      	bne.n	80012fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	3b01      	subs	r3, #1
 80012b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d123      	bne.n	80012fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d11b      	bne.n	80012fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d113      	bne.n	80012fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	3b01      	subs	r3, #1
 80012e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d109      	bne.n	80012fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f4:	085b      	lsrs	r3, r3, #1
 80012f6:	3b01      	subs	r3, #1
 80012f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000
 8001310:	019f800c 	.word	0x019f800c
 8001314:	feeefffc 	.word	0xfeeefffc

08001318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e11e      	b.n	800156e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4b91      	ldr	r3, [pc, #580]	; (8001578 <HAL_RCC_ClockConfig+0x260>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d910      	bls.n	8001360 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4b8e      	ldr	r3, [pc, #568]	; (8001578 <HAL_RCC_ClockConfig+0x260>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 020f 	bic.w	r2, r3, #15
 8001346:	498c      	ldr	r1, [pc, #560]	; (8001578 <HAL_RCC_ClockConfig+0x260>)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134e:	4b8a      	ldr	r3, [pc, #552]	; (8001578 <HAL_RCC_ClockConfig+0x260>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d001      	beq.n	8001360 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e106      	b.n	800156e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d073      	beq.n	8001454 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d129      	bne.n	80013c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001374:	4b81      	ldr	r3, [pc, #516]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0f4      	b.n	800156e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001384:	f000 f966 	bl	8001654 <RCC_GetSysClockFreqFromPLLSource>
 8001388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4a7c      	ldr	r2, [pc, #496]	; (8001580 <HAL_RCC_ClockConfig+0x268>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d93f      	bls.n	8001412 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001392:	4b7a      	ldr	r3, [pc, #488]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d009      	beq.n	80013b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d033      	beq.n	8001412 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d12f      	bne.n	8001412 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013b2:	4b72      	ldr	r3, [pc, #456]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ba:	4a70      	ldr	r2, [pc, #448]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 80013bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e024      	b.n	8001412 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d107      	bne.n	80013e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d0:	4b6a      	ldr	r3, [pc, #424]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d109      	bne.n	80013f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0c6      	b.n	800156e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e0:	4b66      	ldr	r3, [pc, #408]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e0be      	b.n	800156e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80013f0:	f000 f8ce 	bl	8001590 <HAL_RCC_GetSysClockFreq>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4a61      	ldr	r2, [pc, #388]	; (8001580 <HAL_RCC_ClockConfig+0x268>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d909      	bls.n	8001412 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001406:	4a5d      	ldr	r2, [pc, #372]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800140c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001412:	4b5a      	ldr	r3, [pc, #360]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f023 0203 	bic.w	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4957      	ldr	r1, [pc, #348]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001424:	f7ff f8d8 	bl	80005d8 <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	e00a      	b.n	8001442 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142c:	f7ff f8d4 	bl	80005d8 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e095      	b.n	800156e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	4b4e      	ldr	r3, [pc, #312]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 020c 	and.w	r2, r3, #12
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	429a      	cmp	r2, r3
 8001452:	d1eb      	bne.n	800142c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d023      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800146c:	4b43      	ldr	r3, [pc, #268]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a42      	ldr	r2, [pc, #264]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001476:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001484:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800148c:	4a3b      	ldr	r2, [pc, #236]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 800148e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4936      	ldr	r1, [pc, #216]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
 80014a6:	e008      	b.n	80014ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2b80      	cmp	r3, #128	; 0x80
 80014ac:	d105      	bne.n	80014ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80014ae:	4b33      	ldr	r3, [pc, #204]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	4a32      	ldr	r2, [pc, #200]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 80014b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014ba:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <HAL_RCC_ClockConfig+0x260>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d21d      	bcs.n	8001504 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_RCC_ClockConfig+0x260>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 020f 	bic.w	r2, r3, #15
 80014d0:	4929      	ldr	r1, [pc, #164]	; (8001578 <HAL_RCC_ClockConfig+0x260>)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014d8:	f7ff f87e 	bl	80005d8 <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e0:	f7ff f87a 	bl	80005d8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e03b      	b.n	800156e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <HAL_RCC_ClockConfig+0x260>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d1ed      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d008      	beq.n	8001522 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4917      	ldr	r1, [pc, #92]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 800151e:	4313      	orrs	r3, r2
 8001520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	490f      	ldr	r1, [pc, #60]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 800153e:	4313      	orrs	r3, r2
 8001540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001542:	f000 f825 	bl	8001590 <HAL_RCC_GetSysClockFreq>
 8001546:	4602      	mov	r2, r0
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_RCC_ClockConfig+0x264>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	490c      	ldr	r1, [pc, #48]	; (8001584 <HAL_RCC_ClockConfig+0x26c>)
 8001554:	5ccb      	ldrb	r3, [r1, r3]
 8001556:	f003 031f 	and.w	r3, r3, #31
 800155a:	fa22 f303 	lsr.w	r3, r2, r3
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_RCC_ClockConfig+0x270>)
 8001560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_RCC_ClockConfig+0x274>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ffea 	bl	8000540 <HAL_InitTick>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40022000 	.word	0x40022000
 800157c:	40021000 	.word	0x40021000
 8001580:	04c4b400 	.word	0x04c4b400
 8001584:	08001c84 	.word	0x08001c84
 8001588:	20000028 	.word	0x20000028
 800158c:	2000002c 	.word	0x2000002c

08001590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d102      	bne.n	80015a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	e047      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d102      	bne.n	80015ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	e03e      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d136      	bne.n	8001634 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	3301      	adds	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d10c      	bne.n	80015fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015e4:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ec:	4a16      	ldr	r2, [pc, #88]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ee:	68d2      	ldr	r2, [r2, #12]
 80015f0:	0a12      	lsrs	r2, r2, #8
 80015f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]
      break;
 80015fc:	e00c      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015fe:	4a13      	ldr	r2, [pc, #76]	; (800164c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001608:	68d2      	ldr	r2, [r2, #12]
 800160a:	0a12      	lsrs	r2, r2, #8
 800160c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	617b      	str	r3, [r7, #20]
      break;
 8001616:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0e5b      	lsrs	r3, r3, #25
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	3301      	adds	r3, #1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	e001      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001638:	693b      	ldr	r3, [r7, #16]
}
 800163a:	4618      	mov	r0, r3
 800163c:	371c      	adds	r7, #28
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	00f42400 	.word	0x00f42400
 8001650:	016e3600 	.word	0x016e3600

08001654 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3301      	adds	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d10c      	bne.n	8001692 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001682:	68d2      	ldr	r2, [r2, #12]
 8001684:	0a12      	lsrs	r2, r2, #8
 8001686:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800168a:	fb02 f303 	mul.w	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
    break;
 8001690:	e00c      	b.n	80016ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800169c:	68d2      	ldr	r2, [r2, #12]
 800169e:	0a12      	lsrs	r2, r2, #8
 80016a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	617b      	str	r3, [r7, #20]
    break;
 80016aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016ac:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0e5b      	lsrs	r3, r3, #25
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	3301      	adds	r3, #1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80016c6:	687b      	ldr	r3, [r7, #4]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000
 80016d8:	016e3600 	.word	0x016e3600
 80016dc:	00f42400 	.word	0x00f42400

080016e0 <arm_conv_f32>:
 80016e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e4:	b08b      	sub	sp, #44	; 0x2c
 80016e6:	4299      	cmp	r1, r3
 80016e8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80016ea:	d205      	bcs.n	80016f8 <arm_conv_f32+0x18>
 80016ec:	4606      	mov	r6, r0
 80016ee:	460c      	mov	r4, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	4632      	mov	r2, r6
 80016f6:	4623      	mov	r3, r4
 80016f8:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 80016fc:	3101      	adds	r1, #1
 80016fe:	1ac9      	subs	r1, r1, r3
 8001700:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001704:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001708:	9101      	str	r1, [sp, #4]
 800170a:	1e59      	subs	r1, r3, #1
 800170c:	eb02 070b 	add.w	r7, r2, fp
 8001710:	f000 8277 	beq.w	8001c02 <arm_conv_f32+0x522>
 8001714:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80019d4 <arm_conv_f32+0x2f4>
 8001718:	f102 0904 	add.w	r9, r2, #4
 800171c:	46aa      	mov	sl, r5
 800171e:	4680      	mov	r8, r0
 8001720:	2401      	movs	r4, #1
 8001722:	f014 0603 	ands.w	r6, r4, #3
 8001726:	d01b      	beq.n	8001760 <arm_conv_f32+0x80>
 8001728:	ed92 7a00 	vldr	s14, [r2]
 800172c:	edd8 6a00 	vldr	s13, [r8]
 8001730:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001734:	3e01      	subs	r6, #1
 8001736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800173a:	d011      	beq.n	8001760 <arm_conv_f32+0x80>
 800173c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8001740:	edd8 6a01 	vldr	s13, [r8, #4]
 8001744:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001748:	2e01      	cmp	r6, #1
 800174a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800174e:	d007      	beq.n	8001760 <arm_conv_f32+0x80>
 8001750:	ed98 7a02 	vldr	s14, [r8, #8]
 8001754:	ed52 6a02 	vldr	s13, [r2, #-8]
 8001758:	ee27 7a26 	vmul.f32	s14, s14, s13
 800175c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001760:	3401      	adds	r4, #1
 8001762:	42a3      	cmp	r3, r4
 8001764:	ecea 7a01 	vstmia	sl!, {s15}
 8001768:	464a      	mov	r2, r9
 800176a:	d03a      	beq.n	80017e2 <arm_conv_f32+0x102>
 800176c:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8001770:	f000 824c 	beq.w	8001c0c <arm_conv_f32+0x52c>
 8001774:	f100 0210 	add.w	r2, r0, #16
 8001778:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800177c:	eddf 7a95 	vldr	s15, [pc, #596]	; 80019d4 <arm_conv_f32+0x2f4>
 8001780:	eb02 0c08 	add.w	ip, r2, r8
 8001784:	f1a9 0610 	sub.w	r6, r9, #16
 8001788:	ed12 7a04 	vldr	s14, [r2, #-16]
 800178c:	edd6 3a04 	vldr	s7, [r6, #16]
 8001790:	ed12 6a03 	vldr	s12, [r2, #-12]
 8001794:	ed96 4a03 	vldr	s8, [r6, #12]
 8001798:	ed52 6a02 	vldr	s13, [r2, #-8]
 800179c:	edd6 4a02 	vldr	s9, [r6, #8]
 80017a0:	ed52 5a01 	vldr	s11, [r2, #-4]
 80017a4:	ed96 5a01 	vldr	s10, [r6, #4]
 80017a8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80017ac:	ee26 6a04 	vmul.f32	s12, s12, s8
 80017b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b4:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80017b8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80017bc:	ee65 6a85 	vmul.f32	s13, s11, s10
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	3210      	adds	r2, #16
 80017c6:	4594      	cmp	ip, r2
 80017c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017cc:	f1a6 0610 	sub.w	r6, r6, #16
 80017d0:	d1da      	bne.n	8001788 <arm_conv_f32+0xa8>
 80017d2:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 80017d6:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 80017da:	4480      	add	r8, r0
 80017dc:	f109 0904 	add.w	r9, r9, #4
 80017e0:	e79f      	b.n	8001722 <arm_conv_f32+0x42>
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	445d      	add	r5, fp
 80017e6:	f240 80e9 	bls.w	80019bc <arm_conv_f32+0x2dc>
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	089a      	lsrs	r2, r3, #2
 80017ee:	9202      	str	r2, [sp, #8]
 80017f0:	f000 8203 	beq.w	8001bfa <arm_conv_f32+0x51a>
 80017f4:	ea4f 0894 	mov.w	r8, r4, lsr #2
 80017f8:	ea4f 1308 	mov.w	r3, r8, lsl #4
 80017fc:	0112      	lsls	r2, r2, #4
 80017fe:	f004 0603 	and.w	r6, r4, #3
 8001802:	9203      	str	r2, [sp, #12]
 8001804:	f1a3 0a10 	sub.w	sl, r3, #16
 8001808:	f1a3 020c 	sub.w	r2, r3, #12
 800180c:	3b08      	subs	r3, #8
 800180e:	9204      	str	r2, [sp, #16]
 8001810:	9305      	str	r3, [sp, #20]
 8001812:	f106 39ff 	add.w	r9, r6, #4294967295
 8001816:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800181a:	9a03      	ldr	r2, [sp, #12]
 800181c:	f100 0c1c 	add.w	ip, r0, #28
 8001820:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8001824:	464c      	mov	r4, r9
 8001826:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800182a:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800182e:	f1a7 0310 	sub.w	r3, r7, #16
 8001832:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 8001836:	eb05 0b02 	add.w	fp, r5, r2
 800183a:	461f      	mov	r7, r3
 800183c:	3510      	adds	r5, #16
 800183e:	ed9f 6a65 	vldr	s12, [pc, #404]	; 80019d4 <arm_conv_f32+0x2f4>
 8001842:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8001846:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 800184a:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 800184e:	eeb0 5a46 	vmov.f32	s10, s12
 8001852:	eef0 4a46 	vmov.f32	s9, s12
 8001856:	eef0 5a46 	vmov.f32	s11, s12
 800185a:	463a      	mov	r2, r7
 800185c:	4663      	mov	r3, ip
 800185e:	4641      	mov	r1, r8
 8001860:	edd2 6a04 	vldr	s13, [r2, #16]
 8001864:	ed13 0a04 	vldr	s0, [r3, #-16]
 8001868:	ed92 7a03 	vldr	s14, [r2, #12]
 800186c:	edd2 7a02 	vldr	s15, [r2, #8]
 8001870:	edd2 0a01 	vldr	s1, [r2, #4]
 8001874:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8001878:	ee62 3a26 	vmul.f32	s7, s4, s13
 800187c:	ee61 2a26 	vmul.f32	s5, s2, s13
 8001880:	ed13 1a03 	vldr	s2, [r3, #-12]
 8001884:	ee66 6a80 	vmul.f32	s13, s13, s0
 8001888:	ee21 4a87 	vmul.f32	s8, s3, s14
 800188c:	ee73 4a24 	vadd.f32	s9, s6, s9
 8001890:	ee33 5a85 	vadd.f32	s10, s7, s10
 8001894:	ee22 3a07 	vmul.f32	s6, s4, s14
 8001898:	ed53 1a02 	vldr	s3, [r3, #-8]
 800189c:	ee72 2aa5 	vadd.f32	s5, s5, s11
 80018a0:	ee36 6a86 	vadd.f32	s12, s13, s12
 80018a4:	ee60 3a07 	vmul.f32	s7, s0, s14
 80018a8:	ee27 7a01 	vmul.f32	s14, s14, s2
 80018ac:	ee33 3a24 	vadd.f32	s6, s6, s9
 80018b0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80018b4:	ee74 2a22 	vadd.f32	s5, s8, s5
 80018b8:	ee60 4a27 	vmul.f32	s9, s0, s15
 80018bc:	ee22 4a27 	vmul.f32	s8, s4, s15
 80018c0:	ee73 3a85 	vadd.f32	s7, s7, s10
 80018c4:	ed13 2a01 	vldr	s4, [r3, #-4]
 80018c8:	ee21 5a27 	vmul.f32	s10, s2, s15
 80018cc:	ee67 7aa1 	vmul.f32	s15, s15, s3
 80018d0:	ee74 4a83 	vadd.f32	s9, s9, s6
 80018d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018d8:	ee34 4a22 	vadd.f32	s8, s8, s5
 80018dc:	ee60 5a20 	vmul.f32	s11, s0, s1
 80018e0:	ee21 3a20 	vmul.f32	s6, s2, s1
 80018e4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80018e8:	ee21 7aa0 	vmul.f32	s14, s3, s1
 80018ec:	ee20 6a82 	vmul.f32	s12, s1, s4
 80018f0:	3901      	subs	r1, #1
 80018f2:	f1a2 0210 	sub.w	r2, r2, #16
 80018f6:	ee75 5a84 	vadd.f32	s11, s11, s8
 80018fa:	ee73 4a24 	vadd.f32	s9, s6, s9
 80018fe:	ee37 5a05 	vadd.f32	s10, s14, s10
 8001902:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001906:	f103 0310 	add.w	r3, r3, #16
 800190a:	d1a9      	bne.n	8001860 <arm_conv_f32+0x180>
 800190c:	eb0a 030c 	add.w	r3, sl, ip
 8001910:	2e00      	cmp	r6, #0
 8001912:	d042      	beq.n	800199a <arm_conv_f32+0x2ba>
 8001914:	edde 7a00 	vldr	s15, [lr]
 8001918:	ed93 4a00 	vldr	s8, [r3]
 800191c:	ee61 6a27 	vmul.f32	s13, s2, s15
 8001920:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8001924:	ee22 7a27 	vmul.f32	s14, s4, s15
 8001928:	ee64 7a27 	vmul.f32	s15, s8, s15
 800192c:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8001930:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8001934:	ee35 5a07 	vadd.f32	s10, s10, s14
 8001938:	ee36 6a27 	vadd.f32	s12, s12, s15
 800193c:	eb09 030c 	add.w	r3, r9, ip
 8001940:	b35c      	cbz	r4, 800199a <arm_conv_f32+0x2ba>
 8001942:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8001946:	edd3 6a00 	vldr	s13, [r3]
 800194a:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800194e:	ee22 3a27 	vmul.f32	s6, s4, s15
 8001952:	ee67 3a84 	vmul.f32	s7, s15, s8
 8001956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195a:	2c01      	cmp	r4, #1
 800195c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8001960:	ee74 4a83 	vadd.f32	s9, s9, s6
 8001964:	ee35 5a23 	vadd.f32	s10, s10, s7
 8001968:	ee36 6a27 	vadd.f32	s12, s12, s15
 800196c:	eb00 030c 	add.w	r3, r0, ip
 8001970:	d013      	beq.n	800199a <arm_conv_f32+0x2ba>
 8001972:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8001976:	edd3 3a00 	vldr	s7, [r3]
 800197a:	ee62 7a07 	vmul.f32	s15, s4, s14
 800197e:	ee27 4a04 	vmul.f32	s8, s14, s8
 8001982:	ee67 6a26 	vmul.f32	s13, s14, s13
 8001986:	ee27 7a23 	vmul.f32	s14, s14, s7
 800198a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800198e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8001992:	ee35 5a26 	vadd.f32	s10, s10, s13
 8001996:	ee36 6a07 	vadd.f32	s12, s12, s14
 800199a:	45ab      	cmp	fp, r5
 800199c:	ed45 5a04 	vstr	s11, [r5, #-16]
 80019a0:	ed45 4a03 	vstr	s9, [r5, #-12]
 80019a4:	ed05 5a02 	vstr	s10, [r5, #-8]
 80019a8:	ed05 6a01 	vstr	s12, [r5, #-4]
 80019ac:	f10c 0c10 	add.w	ip, ip, #16
 80019b0:	f105 0310 	add.w	r3, r5, #16
 80019b4:	f000 809e 	beq.w	8001af4 <arm_conv_f32+0x414>
 80019b8:	461d      	mov	r5, r3
 80019ba:	e740      	b.n	800183e <arm_conv_f32+0x15e>
 80019bc:	9a01      	ldr	r2, [sp, #4]
 80019be:	46ac      	mov	ip, r5
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d037      	beq.n	8001a34 <arm_conv_f32+0x354>
 80019c4:	9a01      	ldr	r2, [sp, #4]
 80019c6:	ed9f 6a03 	vldr	s12, [pc, #12]	; 80019d4 <arm_conv_f32+0x2f4>
 80019ca:	0096      	lsls	r6, r2, #2
 80019cc:	eb05 0c06 	add.w	ip, r5, r6
 80019d0:	4604      	mov	r4, r0
 80019d2:	e021      	b.n	8001a18 <arm_conv_f32+0x338>
 80019d4:	00000000 	.word	0x00000000
 80019d8:	edd7 7a00 	vldr	s15, [r7]
 80019dc:	ecb2 7a01 	vldmia	r2!, {s14}
 80019e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019e4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80019e8:	b189      	cbz	r1, 8001a0e <arm_conv_f32+0x32e>
 80019ea:	ed17 7a01 	vldr	s14, [r7, #-4]
 80019ee:	edd4 6a01 	vldr	s13, [r4, #4]
 80019f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019fc:	d007      	beq.n	8001a0e <arm_conv_f32+0x32e>
 80019fe:	ed94 7a02 	vldr	s14, [r4, #8]
 8001a02:	ed57 6a02 	vldr	s13, [r7, #-8]
 8001a06:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001a0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a0e:	ece5 7a01 	vstmia	r5!, {s15}
 8001a12:	4565      	cmp	r5, ip
 8001a14:	4614      	mov	r4, r2
 8001a16:	d00a      	beq.n	8001a2e <arm_conv_f32+0x34e>
 8001a18:	4622      	mov	r2, r4
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1dc      	bne.n	80019d8 <arm_conv_f32+0x2f8>
 8001a1e:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80019d4 <arm_conv_f32+0x2f4>
 8001a22:	ece5 7a01 	vstmia	r5!, {s15}
 8001a26:	1d22      	adds	r2, r4, #4
 8001a28:	4565      	cmp	r5, ip
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	d1f4      	bne.n	8001a18 <arm_conv_f32+0x338>
 8001a2e:	4430      	add	r0, r6
 8001a30:	2900      	cmp	r1, #0
 8001a32:	d059      	beq.n	8001ae8 <arm_conv_f32+0x408>
 8001a34:	088d      	lsrs	r5, r1, #2
 8001a36:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 80019d4 <arm_conv_f32+0x2f4>
 8001a3a:	d058      	beq.n	8001aee <arm_conv_f32+0x40e>
 8001a3c:	f100 0210 	add.w	r2, r0, #16
 8001a40:	f1a7 0310 	sub.w	r3, r7, #16
 8001a44:	462c      	mov	r4, r5
 8001a46:	ed52 6a04 	vldr	s13, [r2, #-16]
 8001a4a:	edd3 3a04 	vldr	s7, [r3, #16]
 8001a4e:	ed12 7a03 	vldr	s14, [r2, #-12]
 8001a52:	ed93 4a03 	vldr	s8, [r3, #12]
 8001a56:	ed52 7a02 	vldr	s15, [r2, #-8]
 8001a5a:	edd3 4a02 	vldr	s9, [r3, #8]
 8001a5e:	ed12 6a01 	vldr	s12, [r2, #-4]
 8001a62:	ed93 5a01 	vldr	s10, [r3, #4]
 8001a66:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8001a6a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8001a6e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8001a72:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001a76:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001a7a:	ee66 6a05 	vmul.f32	s13, s12, s10
 8001a7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a82:	3c01      	subs	r4, #1
 8001a84:	f102 0210 	add.w	r2, r2, #16
 8001a88:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8001a8c:	f1a3 0310 	sub.w	r3, r3, #16
 8001a90:	d1d9      	bne.n	8001a46 <arm_conv_f32+0x366>
 8001a92:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8001a96:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8001a9a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8001a9e:	f011 0203 	ands.w	r2, r1, #3
 8001aa2:	d01b      	beq.n	8001adc <arm_conv_f32+0x3fc>
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ed95 7a00 	vldr	s14, [r5]
 8001aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab0:	3a01      	subs	r2, #1
 8001ab2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ab6:	d011      	beq.n	8001adc <arm_conv_f32+0x3fc>
 8001ab8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8001abc:	ed95 7a01 	vldr	s14, [r5, #4]
 8001ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac4:	2a01      	cmp	r2, #1
 8001ac6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001aca:	d007      	beq.n	8001adc <arm_conv_f32+0x3fc>
 8001acc:	edd5 7a02 	vldr	s15, [r5, #8]
 8001ad0:	ed13 7a02 	vldr	s14, [r3, #-8]
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001adc:	3901      	subs	r1, #1
 8001ade:	ecec 5a01 	vstmia	ip!, {s11}
 8001ae2:	f100 0004 	add.w	r0, r0, #4
 8001ae6:	d1a5      	bne.n	8001a34 <arm_conv_f32+0x354>
 8001ae8:	b00b      	add	sp, #44	; 0x2c
 8001aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aee:	463b      	mov	r3, r7
 8001af0:	4605      	mov	r5, r0
 8001af2:	e7d4      	b.n	8001a9e <arm_conv_f32+0x3be>
 8001af4:	9b02      	ldr	r3, [sp, #8]
 8001af6:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	9b03      	ldr	r3, [sp, #12]
 8001b00:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8001b04:	4403      	add	r3, r0
 8001b06:	465d      	mov	r5, fp
 8001b08:	469e      	mov	lr, r3
 8001b0a:	9b01      	ldr	r3, [sp, #4]
 8001b0c:	f013 0c03 	ands.w	ip, r3, #3
 8001b10:	d075      	beq.n	8001bfe <arm_conv_f32+0x51e>
 8001b12:	9b02      	ldr	r3, [sp, #8]
 8001b14:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8001b18:	f004 0403 	and.w	r4, r4, #3
 8001b1c:	f104 3bff 	add.w	fp, r4, #4294967295
 8001b20:	f103 0801 	add.w	r8, r3, #1
 8001b24:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8001b28:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8001b2c:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8001b30:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8001b34:	f1a7 0210 	sub.w	r2, r7, #16
 8001b38:	4618      	mov	r0, r3
 8001b3a:	465b      	mov	r3, fp
 8001b3c:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8001b40:	468b      	mov	fp, r1
 8001b42:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 8001b46:	4621      	mov	r1, r4
 8001b48:	4617      	mov	r7, r2
 8001b4a:	461c      	mov	r4, r3
 8001b4c:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 80019d4 <arm_conv_f32+0x2f4>
 8001b50:	f10e 0210 	add.w	r2, lr, #16
 8001b54:	463b      	mov	r3, r7
 8001b56:	4656      	mov	r6, sl
 8001b58:	ed12 7a04 	vldr	s14, [r2, #-16]
 8001b5c:	edd3 3a04 	vldr	s7, [r3, #16]
 8001b60:	ed12 6a03 	vldr	s12, [r2, #-12]
 8001b64:	ed93 4a03 	vldr	s8, [r3, #12]
 8001b68:	ed52 6a02 	vldr	s13, [r2, #-8]
 8001b6c:	edd3 4a02 	vldr	s9, [r3, #8]
 8001b70:	ed52 5a01 	vldr	s11, [r2, #-4]
 8001b74:	ed93 5a01 	vldr	s10, [r3, #4]
 8001b78:	ee27 7a23 	vmul.f32	s14, s14, s7
 8001b7c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8001b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b84:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8001b88:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001b8c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8001b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b94:	3e01      	subs	r6, #1
 8001b96:	f102 0210 	add.w	r2, r2, #16
 8001b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b9e:	f1a3 0310 	sub.w	r3, r3, #16
 8001ba2:	d1d9      	bne.n	8001b58 <arm_conv_f32+0x478>
 8001ba4:	4486      	add	lr, r0
 8001ba6:	b1d1      	cbz	r1, 8001bde <arm_conv_f32+0x4fe>
 8001ba8:	ed99 7a00 	vldr	s14, [r9]
 8001bac:	edde 6a00 	vldr	s13, [lr]
 8001bb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001bb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bb8:	b18c      	cbz	r4, 8001bde <arm_conv_f32+0x4fe>
 8001bba:	ed19 7a01 	vldr	s14, [r9, #-4]
 8001bbe:	edde 6a01 	vldr	s13, [lr, #4]
 8001bc2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001bc6:	2c01      	cmp	r4, #1
 8001bc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bcc:	d007      	beq.n	8001bde <arm_conv_f32+0x4fe>
 8001bce:	ed9e 7a02 	vldr	s14, [lr, #8]
 8001bd2:	ed59 6a02 	vldr	s13, [r9, #-8]
 8001bd6:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001bda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bde:	ece5 7a01 	vstmia	r5!, {s15}
 8001be2:	4565      	cmp	r5, ip
 8001be4:	46c6      	mov	lr, r8
 8001be6:	f108 0804 	add.w	r8, r8, #4
 8001bea:	d1af      	bne.n	8001b4c <arm_conv_f32+0x46c>
 8001bec:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	9b01      	ldr	r3, [sp, #4]
 8001bf4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001bf8:	e71c      	b.n	8001a34 <arm_conv_f32+0x354>
 8001bfa:	4686      	mov	lr, r0
 8001bfc:	e785      	b.n	8001b0a <arm_conv_f32+0x42a>
 8001bfe:	46ac      	mov	ip, r5
 8001c00:	e7f7      	b.n	8001bf2 <arm_conv_f32+0x512>
 8001c02:	9a01      	ldr	r2, [sp, #4]
 8001c04:	2a00      	cmp	r2, #0
 8001c06:	f47f aedd 	bne.w	80019c4 <arm_conv_f32+0x2e4>
 8001c0a:	e76d      	b.n	8001ae8 <arm_conv_f32+0x408>
 8001c0c:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80019d4 <arm_conv_f32+0x2f4>
 8001c10:	4680      	mov	r8, r0
 8001c12:	e5e3      	b.n	80017dc <arm_conv_f32+0xfc>

08001c14 <memset>:
 8001c14:	4402      	add	r2, r0
 8001c16:	4603      	mov	r3, r0
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d100      	bne.n	8001c1e <memset+0xa>
 8001c1c:	4770      	bx	lr
 8001c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c22:	e7f9      	b.n	8001c18 <memset+0x4>

08001c24 <__libc_init_array>:
 8001c24:	b570      	push	{r4, r5, r6, lr}
 8001c26:	4d0d      	ldr	r5, [pc, #52]	; (8001c5c <__libc_init_array+0x38>)
 8001c28:	4c0d      	ldr	r4, [pc, #52]	; (8001c60 <__libc_init_array+0x3c>)
 8001c2a:	1b64      	subs	r4, r4, r5
 8001c2c:	10a4      	asrs	r4, r4, #2
 8001c2e:	2600      	movs	r6, #0
 8001c30:	42a6      	cmp	r6, r4
 8001c32:	d109      	bne.n	8001c48 <__libc_init_array+0x24>
 8001c34:	4d0b      	ldr	r5, [pc, #44]	; (8001c64 <__libc_init_array+0x40>)
 8001c36:	4c0c      	ldr	r4, [pc, #48]	; (8001c68 <__libc_init_array+0x44>)
 8001c38:	f000 f818 	bl	8001c6c <_init>
 8001c3c:	1b64      	subs	r4, r4, r5
 8001c3e:	10a4      	asrs	r4, r4, #2
 8001c40:	2600      	movs	r6, #0
 8001c42:	42a6      	cmp	r6, r4
 8001c44:	d105      	bne.n	8001c52 <__libc_init_array+0x2e>
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
 8001c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c4c:	4798      	blx	r3
 8001c4e:	3601      	adds	r6, #1
 8001c50:	e7ee      	b.n	8001c30 <__libc_init_array+0xc>
 8001c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c56:	4798      	blx	r3
 8001c58:	3601      	adds	r6, #1
 8001c5a:	e7f2      	b.n	8001c42 <__libc_init_array+0x1e>
 8001c5c:	08001c94 	.word	0x08001c94
 8001c60:	08001c94 	.word	0x08001c94
 8001c64:	08001c94 	.word	0x08001c94
 8001c68:	08001c98 	.word	0x08001c98

08001c6c <_init>:
 8001c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c6e:	bf00      	nop
 8001c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c72:	bc08      	pop	{r3}
 8001c74:	469e      	mov	lr, r3
 8001c76:	4770      	bx	lr

08001c78 <_fini>:
 8001c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c7a:	bf00      	nop
 8001c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c7e:	bc08      	pop	{r3}
 8001c80:	469e      	mov	lr, r3
 8001c82:	4770      	bx	lr
