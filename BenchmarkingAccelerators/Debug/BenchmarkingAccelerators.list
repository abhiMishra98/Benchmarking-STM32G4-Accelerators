
BenchmarkingAccelerators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003278  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800385c  0800385c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800385c  0800385c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800385c  0800385c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800385c  0800385c  0001385c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003870  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003870  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e166  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d4  00000000  00000000  0002e1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  000302c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265f3  00000000  00000000  00031158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103b1  00000000  00000000  0005774b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa16b  00000000  00000000  00067afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000b21  00000000  00000000  00161c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e14  00000000  00000000  00162788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0016659c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003438 	.word	0x08003438

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003438 	.word	0x08003438

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fbe1 	bl	80009e4 <HAL_Init>

  /* USER CODE BEGIN Init */
//  	generate_sine_q15();
  	arm_fir_init_q15(&A, NUMTAPS, fir_coeffs, firStateQ15, BLOCK_SIZE);
 8000222:	2301      	movs	r3, #1
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <main+0x38>)
 8000228:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <main+0x3c>)
 800022a:	2115      	movs	r1, #21
 800022c:	480a      	ldr	r0, [pc, #40]	; (8000258 <main+0x40>)
 800022e:	f000 fb06 	bl	800083e <arm_fir_init_q15>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f815 	bl	8000260 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f8ed 	bl	8000414 <MX_GPIO_Init>
  MX_FMAC_Init();
 800023a:	f000 f8a1 	bl	8000380 <MX_FMAC_Init>
  MX_DAC1_Init();
 800023e:	f000 f85b 	bl	80002f8 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000242:	f000 f8b1 	bl	80003a8 <MX_TIM6_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8000246:	4805      	ldr	r0, [pc, #20]	; (800025c <main+0x44>)
 8000248:	f002 f9ce 	bl	80025e8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024c:	e7fe      	b.n	800024c <main+0x34>
 800024e:	bf00      	nop
 8000250:	200000d4 	.word	0x200000d4
 8000254:	08003450 	.word	0x08003450
 8000258:	200000c8 	.word	0x200000c8
 800025c:	20000074 	.word	0x20000074

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b094      	sub	sp, #80	; 0x50
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	2238      	movs	r2, #56	; 0x38
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fb7c 	bl	800296c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000282:	2000      	movs	r0, #0
 8000284:	f001 fba2 	bl	80019cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000288:	2302      	movs	r3, #2
 800028a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000290:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000292:	2340      	movs	r3, #64	; 0x40
 8000294:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029a:	2302      	movs	r3, #2
 800029c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800029e:	2304      	movs	r3, #4
 80002a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80002a2:	2355      	movs	r3, #85	; 0x55
 80002a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ae:	2302      	movs	r3, #2
 80002b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fc3c 	bl	8001b34 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002c2:	f000 f935 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	2303      	movs	r3, #3
 80002cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 ff3a 	bl	8002158 <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002ea:	f000 f921 	bl	8000530 <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3750      	adds	r7, #80	; 0x50
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08c      	sub	sp, #48	; 0x30
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002fe:	463b      	mov	r3, r7
 8000300:	2230      	movs	r2, #48	; 0x30
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f002 fb31 	bl	800296c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_DAC1_Init+0x80>)
 800030c:	4a1b      	ldr	r2, [pc, #108]	; (800037c <MX_DAC1_Init+0x84>)
 800030e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000310:	4819      	ldr	r0, [pc, #100]	; (8000378 <MX_DAC1_Init+0x80>)
 8000312:	f000 fce6 	bl	8000ce2 <HAL_DAC_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800031c:	f000 f908 	bl	8000530 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000320:	2302      	movs	r3, #2
 8000322:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000328:	2300      	movs	r3, #0
 800032a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800032c:	2300      	movs	r3, #0
 800032e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800033c:	2301      	movs	r3, #1
 800033e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000340:	2300      	movs	r3, #0
 8000342:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	480b      	ldr	r0, [pc, #44]	; (8000378 <MX_DAC1_Init+0x80>)
 800034c:	f000 fd18 	bl	8000d80 <HAL_DAC_ConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000356:	f000 f8eb 	bl	8000530 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	2210      	movs	r2, #16
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	; (8000378 <MX_DAC1_Init+0x80>)
 8000362:	f000 fd0d 	bl	8000d80 <HAL_DAC_ConfigChannel>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800036c:	f000 f8e0 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	3730      	adds	r7, #48	; 0x30
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000028 	.word	0x20000028
 800037c:	50000800 	.word	0x50000800

08000380 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_FMAC_Init+0x20>)
 8000386:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <MX_FMAC_Init+0x24>)
 8000388:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_FMAC_Init+0x20>)
 800038c:	f000 feb0 	bl	80010f0 <HAL_FMAC_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8000396:	f000 f8cb 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000003c 	.word	0x2000003c
 80003a4:	40021400 	.word	0x40021400

080003a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80003b8:	4b14      	ldr	r3, [pc, #80]	; (800040c <MX_TIM6_Init+0x64>)
 80003ba:	4a15      	ldr	r2, [pc, #84]	; (8000410 <MX_TIM6_Init+0x68>)
 80003bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_TIM6_Init+0x64>)
 80003c0:	22a9      	movs	r2, #169	; 0xa9
 80003c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_TIM6_Init+0x64>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20;
 80003ca:	4b10      	ldr	r3, [pc, #64]	; (800040c <MX_TIM6_Init+0x64>)
 80003cc:	2214      	movs	r2, #20
 80003ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d0:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_TIM6_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003d6:	480d      	ldr	r0, [pc, #52]	; (800040c <MX_TIM6_Init+0x64>)
 80003d8:	f002 f8ae 	bl	8002538 <HAL_TIM_Base_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80003e2:	f000 f8a5 	bl	8000530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003e6:	2320      	movs	r3, #32
 80003e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	4619      	mov	r1, r3
 80003f2:	4806      	ldr	r0, [pc, #24]	; (800040c <MX_TIM6_Init+0x64>)
 80003f4:	f002 fa24 	bl	8002840 <HAL_TIMEx_MasterConfigSynchronization>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80003fe:	f000 f897 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000074 	.word	0x20000074
 8000410:	40001000 	.word	0x40001000

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	; 0x28
 8000418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0314 	add.w	r3, r7, #20
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042a:	4b3e      	ldr	r3, [pc, #248]	; (8000524 <MX_GPIO_Init+0x110>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	4a3d      	ldr	r2, [pc, #244]	; (8000524 <MX_GPIO_Init+0x110>)
 8000430:	f043 0304 	orr.w	r3, r3, #4
 8000434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000436:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <MX_GPIO_Init+0x110>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	f003 0304 	and.w	r3, r3, #4
 800043e:	613b      	str	r3, [r7, #16]
 8000440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000442:	4b38      	ldr	r3, [pc, #224]	; (8000524 <MX_GPIO_Init+0x110>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	4a37      	ldr	r2, [pc, #220]	; (8000524 <MX_GPIO_Init+0x110>)
 8000448:	f043 0320 	orr.w	r3, r3, #32
 800044c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044e:	4b35      	ldr	r3, [pc, #212]	; (8000524 <MX_GPIO_Init+0x110>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	f003 0320 	and.w	r3, r3, #32
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800045a:	4b32      	ldr	r3, [pc, #200]	; (8000524 <MX_GPIO_Init+0x110>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	4a31      	ldr	r2, [pc, #196]	; (8000524 <MX_GPIO_Init+0x110>)
 8000460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000466:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <MX_GPIO_Init+0x110>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <MX_GPIO_Init+0x110>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000476:	4a2b      	ldr	r2, [pc, #172]	; (8000524 <MX_GPIO_Init+0x110>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047e:	4b29      	ldr	r3, [pc, #164]	; (8000524 <MX_GPIO_Init+0x110>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b26      	ldr	r3, [pc, #152]	; (8000524 <MX_GPIO_Init+0x110>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048e:	4a25      	ldr	r2, [pc, #148]	; (8000524 <MX_GPIO_Init+0x110>)
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000496:	4b23      	ldr	r3, [pc, #140]	; (8000524 <MX_GPIO_Init+0x110>)
 8000498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049a:	f003 0302 	and.w	r3, r3, #2
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a8:	481f      	ldr	r0, [pc, #124]	; (8000528 <MX_GPIO_Init+0x114>)
 80004aa:	f001 fa53 	bl	8001954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	4619      	mov	r1, r3
 80004c4:	4819      	ldr	r0, [pc, #100]	; (800052c <MX_GPIO_Init+0x118>)
 80004c6:	f001 f8c3 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4619      	mov	r1, r3
 80004e2:	4811      	ldr	r0, [pc, #68]	; (8000528 <MX_GPIO_Init+0x114>)
 80004e4:	f001 f8b4 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80004e8:	230c      	movs	r3, #12
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ec:	2302      	movs	r3, #2
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80004f8:	230c      	movs	r3, #12
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	4619      	mov	r1, r3
 8000502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000506:	f001 f8a3 	bl	8001650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	2028      	movs	r0, #40	; 0x28
 8000510:	f000 fbb3 	bl	8000c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000514:	2028      	movs	r0, #40	; 0x28
 8000516:	f000 fbca 	bl	8000cae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051a:	bf00      	nop
 800051c:	3728      	adds	r7, #40	; 0x28
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000
 8000528:	48001800 	.word	0x48001800
 800052c:	48000800 	.word	0x48000800

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>
	...

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x44>)
 8000544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x44>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6613      	str	r3, [r2, #96]	; 0x60
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x44>)
 8000550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <HAL_MspInit+0x44>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <HAL_MspInit+0x44>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	6593      	str	r3, [r2, #88]	; 0x58
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_MspInit+0x44>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000572:	f001 facf 	bl	8001b14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a19      	ldr	r2, [pc, #100]	; (8000608 <HAL_DAC_MspInit+0x84>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d12c      	bne.n	8000600 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <HAL_DAC_MspInit+0x88>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	4a18      	ldr	r2, [pc, #96]	; (800060c <HAL_DAC_MspInit+0x88>)
 80005ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b2:	4b16      	ldr	r3, [pc, #88]	; (800060c <HAL_DAC_MspInit+0x88>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <HAL_DAC_MspInit+0x88>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	4a12      	ldr	r2, [pc, #72]	; (800060c <HAL_DAC_MspInit+0x88>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <HAL_DAC_MspInit+0x88>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005d6:	2330      	movs	r3, #48	; 0x30
 80005d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005da:	2303      	movs	r3, #3
 80005dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f001 f830 	bl	8001650 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2036      	movs	r0, #54	; 0x36
 80005f6:	f000 fb40 	bl	8000c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005fa:	2036      	movs	r0, #54	; 0x36
 80005fc:	f000 fb57 	bl	8000cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000600:	bf00      	nop
 8000602:	3728      	adds	r7, #40	; 0x28
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	50000800 	.word	0x50000800
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <HAL_FMAC_MspInit+0x44>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d113      	bne.n	800064a <HAL_FMAC_MspInit+0x3a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <HAL_FMAC_MspInit+0x48>)
 8000624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <HAL_FMAC_MspInit+0x48>)
 8000628:	f043 0310 	orr.w	r3, r3, #16
 800062c:	6493      	str	r3, [r2, #72]	; 0x48
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_FMAC_MspInit+0x48>)
 8000630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000632:	f003 0310 	and.w	r3, r3, #16
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    /* FMAC interrupt Init */
    HAL_NVIC_SetPriority(FMAC_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2065      	movs	r0, #101	; 0x65
 8000640:	f000 fb1b 	bl	8000c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FMAC_IRQn);
 8000644:	2065      	movs	r0, #101	; 0x65
 8000646:	f000 fb32 	bl	8000cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021400 	.word	0x40021400
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <HAL_TIM_Base_MspInit+0x44>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d113      	bne.n	8000696 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <HAL_TIM_Base_MspInit+0x48>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000672:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <HAL_TIM_Base_MspInit+0x48>)
 8000674:	f043 0310 	orr.w	r3, r3, #16
 8000678:	6593      	str	r3, [r2, #88]	; 0x58
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_TIM_Base_MspInit+0x48>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	f003 0310 	and.w	r3, r3, #16
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2036      	movs	r0, #54	; 0x36
 800068c:	f000 faf5 	bl	8000c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000690:	2036      	movs	r0, #54	; 0x36
 8000692:	f000 fb0c 	bl	8000cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40001000 	.word	0x40001000
 80006a4:	40021000 	.word	0x40021000

080006a8 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80006ac:	e7fe      	b.n	80006ac <NMI_Handler+0x4>

080006ae <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80006b2:	e7fe      	b.n	80006b2 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80006b8:	e7fe      	b.n	80006b8 <MemManage_Handler+0x4>

080006ba <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80006be:	e7fe      	b.n	80006be <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80006c4:	e7fe      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80006f4:	f000 f9c8 	bl	8000a88 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <EXTI15_10_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000700:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000704:	f001 f93e 	bl	8001984 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	static uint32_t sampleIndex = 0;
	float t = (float) sampleIndex++ / SAMPLE_RATE;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <TIM6_DAC_IRQHandler+0x88>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	1c53      	adds	r3, r2, #1
 8000718:	491e      	ldr	r1, [pc, #120]	; (8000794 <TIM6_DAC_IRQHandler+0x88>)
 800071a:	600b      	str	r3, [r1, #0]
 800071c:	ee07 2a90 	vmov	s15, r2
 8000720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000724:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8000798 <TIM6_DAC_IRQHandler+0x8c>
 8000728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800072c:	edc7 7a03 	vstr	s15, [r7, #12]
	float val = sinf(2 * PI * FREQ_HZ * t);  // -1.0 to 1.0
 8000730:	edd7 7a03 	vldr	s15, [r7, #12]
 8000734:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800079c <TIM6_DAC_IRQHandler+0x90>
 8000738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800073c:	eeb0 0a67 	vmov.f32	s0, s15
 8000740:	f002 f940 	bl	80029c4 <sinf>
 8000744:	ed87 0a02 	vstr	s0, [r7, #8]
	inputSample[0] = (int16_t) (val * 32767);    // Q15 scaling
 8000748:	edd7 7a02 	vldr	s15, [r7, #8]
 800074c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80007a0 <TIM6_DAC_IRQHandler+0x94>
 8000750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000758:	ee17 3a90 	vmov	r3, s15
 800075c:	b21a      	sxth	r2, r3
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <TIM6_DAC_IRQHandler+0x98>)
 8000760:	801a      	strh	r2, [r3, #0]

	arm_fir_q15(&A, inputSample, filteredSample, BLOCK_SIZE);
 8000762:	2301      	movs	r3, #1
 8000764:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <TIM6_DAC_IRQHandler+0x9c>)
 8000766:	490f      	ldr	r1, [pc, #60]	; (80007a4 <TIM6_DAC_IRQHandler+0x98>)
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <TIM6_DAC_IRQHandler+0xa0>)
 800076a:	f000 f892 	bl	8000892 <arm_fir_q15>
	int16_t q15_val = filteredSample[0];
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <TIM6_DAC_IRQHandler+0x9c>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	80fb      	strh	r3, [r7, #6]
	uint32_t dac_val = (uint32_t) (((int32_t) q15_val + 32768) >> 4); // Scale to 0–4095
 8000774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000778:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800077c:	111b      	asrs	r3, r3, #4
 800077e:	603b      	str	r3, [r7, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	480a      	ldr	r0, [pc, #40]	; (80007b0 <TIM6_DAC_IRQHandler+0xa4>)
 8000788:	f000 facd 	bl	8000d26 <HAL_DAC_SetValue>

	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000100 	.word	0x20000100
 8000798:	447a0000 	.word	0x447a0000
 800079c:	441d1463 	.word	0x441d1463
 80007a0:	46fffe00 	.word	0x46fffe00
 80007a4:	200000c0 	.word	0x200000c0
 80007a8:	200000c4 	.word	0x200000c4
 80007ac:	200000c8 	.word	0x200000c8
 80007b0:	20000028 	.word	0x20000028

080007b4 <FMAC_IRQHandler>:

/**
 * @brief This function handles FMAC interrupt.
 */
void FMAC_IRQHandler(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN FMAC_IRQn 0 */

	/* USER CODE END FMAC_IRQn 0 */
	HAL_FMAC_IRQHandler(&hfmac);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <FMAC_IRQHandler+0x10>)
 80007ba:	f000 fcf8 	bl	80011ae <HAL_FMAC_IRQHandler>
	/* USER CODE BEGIN FMAC_IRQn 1 */

	/* USER CODE END FMAC_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000003c 	.word	0x2000003c

080007c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <SystemInit+0x20>)
 80007ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <SystemInit+0x20>)
 80007d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f0:	f7ff ffea 	bl	80007c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f6:	490d      	ldr	r1, [pc, #52]	; (800082c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <LoopForever+0xe>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800080c:	4c0a      	ldr	r4, [pc, #40]	; (8000838 <LoopForever+0x16>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800081a:	f002 f8af 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800081e:	f7ff fcfb 	bl	8000218 <main>

08000822 <LoopForever>:

LoopForever:
    b LoopForever
 8000822:	e7fe      	b.n	8000822 <LoopForever>
  ldr   r0, =_estack
 8000824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000830:	08003864 	.word	0x08003864
  ldr r2, =_sbss
 8000834:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000838:	20000108 	.word	0x20000108

0800083c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC1_2_IRQHandler>

0800083e <arm_fir_init_q15>:
        arm_fir_instance_q15 * S,
        uint16_t numTaps,
  const q15_t * pCoeffs,
        q15_t * pState,
        uint32_t blockSize)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	607a      	str	r2, [r7, #4]
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	460b      	mov	r3, r1
 800084c:	817b      	strh	r3, [r7, #10]
  arm_status status;

#if defined (ARM_MATH_DSP)

  /* The Number of filter coefficients in the filter must be even and at least 4 */
  if (numTaps & 0x1U)
 800084e:	897b      	ldrh	r3, [r7, #10]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <arm_fir_init_q15+0x20>
  {
    status = ARM_MATH_ARGUMENT_ERROR;
 8000858:	23ff      	movs	r3, #255	; 0xff
 800085a:	75fb      	strb	r3, [r7, #23]
 800085c:	e013      	b.n	8000886 <arm_fir_init_q15+0x48>
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	897a      	ldrh	r2, [r7, #10]
 8000862:	801a      	strh	r2, [r3, #0]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	609a      	str	r2, [r3, #8]

    /* Clear the state buffer.  The size is always (blockSize + numTaps ) */
    memset(pState, 0, (numTaps + (blockSize)) * sizeof(q15_t));
 800086a:	897a      	ldrh	r2, [r7, #10]
 800086c:	6a3b      	ldr	r3, [r7, #32]
 800086e:	4413      	add	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	6838      	ldr	r0, [r7, #0]
 8000878:	f002 f878 	bl	800296c <memset>

    /* Assign state pointer */
    S->pState = pState;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	683a      	ldr	r2, [r7, #0]
 8000880:	605a      	str	r2, [r3, #4]

    status = ARM_MATH_SUCCESS;
 8000882:	2300      	movs	r3, #0
 8000884:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8000886:	f997 3017 	ldrsb.w	r3, [r7, #23]

  return (status);

#endif /* #if defined (ARM_MATH_DSP) */

}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <arm_fir_q15>:
void arm_fir_q15(
  const arm_fir_instance_q15 * S,
  const q15_t * pSrc,
        q15_t * pDst,
        uint32_t blockSize)
{
 8000892:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000896:	b093      	sub	sp, #76	; 0x4c
 8000898:	af00      	add	r7, sp, #0
 800089a:	6178      	str	r0, [r7, #20]
 800089c:	6139      	str	r1, [r7, #16]
 800089e:	60fa      	str	r2, [r7, #12]
 80008a0:	60bb      	str	r3, [r7, #8]
        q15_t *pState = S->pState;                     /* State pointer */
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	647b      	str	r3, [r7, #68]	; 0x44
  const q15_t *pCoeffs = S->pCoeffs;                   /* Coefficient pointer */
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
        q15_t *pStateCurnt;                            /* Points to the current sample of the state */
        q15_t *px;                                     /* Temporary pointer for state buffer */
  const q15_t *pb;                                     /* Temporary pointer for coefficient buffer */
        q63_t acc0;                                    /* Accumulators */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	623b      	str	r3, [r7, #32]
        q31_t x0, x1, x2, c0;                          /* Temporary variables to hold state and coefficient values */
#endif

  /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
  /* pStateCurnt points to the location where the new input data should be written */
  pStateCurnt = &(S->pState[(numTaps - 1U)]);
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80008be:	3b01      	subs	r3, #1
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	643b      	str	r3, [r7, #64]	; 0x40
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of taps */
  blkCnt = blockSize;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80008ca:	e06b      	b.n	80009a4 <arm_fir_q15+0x112>
  {
    /* Copy two samples into state buffer */
    *pStateCurnt++ = *pSrc++;
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	1c93      	adds	r3, r2, #2
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008d4:	1c99      	adds	r1, r3, #2
 80008d6:	6439      	str	r1, [r7, #64]	; 0x40
 80008d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80008dc:	801a      	strh	r2, [r3, #0]

    /* Set the accumulator to zero */
    acc0 = 0;
 80008de:	f04f 0200 	mov.w	r2, #0
 80008e2:	f04f 0300 	mov.w	r3, #0
 80008e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Use SIMD to hold states and coefficients */
    px = pState;
 80008ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    pb = pCoeffs;
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	63bb      	str	r3, [r7, #56]	; 0x38

    tapCnt = numTaps >> 1U;
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    do
    {
      acc0 += (q31_t) *px++ * *pb++;
 80008f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008fa:	1c9a      	adds	r2, r3, #2
 80008fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80008fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000902:	4619      	mov	r1, r3
 8000904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000906:	1c9a      	adds	r2, r3, #2
 8000908:	63ba      	str	r2, [r7, #56]	; 0x38
 800090a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800090e:	fb01 f303 	mul.w	r3, r1, r3
 8000912:	17da      	asrs	r2, r3, #31
 8000914:	461c      	mov	r4, r3
 8000916:	4615      	mov	r5, r2
 8000918:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800091c:	eb12 0a04 	adds.w	sl, r2, r4
 8000920:	eb43 0b05 	adc.w	fp, r3, r5
 8000924:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
	  acc0 += (q31_t) *px++ * *pb++;
 8000928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800092a:	1c9a      	adds	r2, r3, #2
 800092c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800092e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000932:	4619      	mov	r1, r3
 8000934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000936:	1c9a      	adds	r2, r3, #2
 8000938:	63ba      	str	r2, [r7, #56]	; 0x38
 800093a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093e:	fb01 f303 	mul.w	r3, r1, r3
 8000942:	17da      	asrs	r2, r3, #31
 8000944:	4698      	mov	r8, r3
 8000946:	4691      	mov	r9, r2
 8000948:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800094c:	eb12 0108 	adds.w	r1, r2, r8
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	eb43 0309 	adc.w	r3, r3, r9
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800095c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

      tapCnt--;
 8000960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000962:	3b01      	subs	r3, #1
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (tapCnt > 0U);
 8000966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1c5      	bne.n	80008f8 <arm_fir_q15+0x66>

    /* The result is in 2.30 format. Convert to 1.15 with saturation.
       Then store the output in the destination buffer. */
    *pDst++ = (q15_t) (__SSAT((acc0 >> 15), 16));
 800096c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000970:	f04f 0200 	mov.w	r2, #0
 8000974:	f04f 0300 	mov.w	r3, #0
 8000978:	0bc2      	lsrs	r2, r0, #15
 800097a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800097e:	13cb      	asrs	r3, r1, #15
 8000980:	4613      	mov	r3, r2
 8000982:	61fb      	str	r3, [r7, #28]
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	f303 030f 	ssat	r3, #16, r3
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69b9      	ldr	r1, [r7, #24]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	1c9a      	adds	r2, r3, #2
 8000992:	60fa      	str	r2, [r7, #12]
 8000994:	b20a      	sxth	r2, r1
 8000996:	801a      	strh	r2, [r3, #0]

    /* Advance state pointer by 1 for the next sample */
    pState = pState + 1U;
 8000998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800099a:	3302      	adds	r3, #2
 800099c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Decrement loop counter */
    blkCnt--;
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a0:	3b01      	subs	r3, #1
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  while (blkCnt > 0U)
 80009a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d190      	bne.n	80008cc <arm_fir_q15+0x3a>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the start of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCurnt = S->pState;
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  tapCnt = (numTaps - 1U) % 0x4U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy remaining data */
  while (tapCnt > 0U)
 80009b6:	e00b      	b.n	80009d0 <arm_fir_q15+0x13e>
  {
    *pStateCurnt++ = *pState++;
 80009b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009ba:	1c93      	adds	r3, r2, #2
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
 80009be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009c0:	1c99      	adds	r1, r3, #2
 80009c2:	6439      	str	r1, [r7, #64]	; 0x40
 80009c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80009c8:	801a      	strh	r2, [r3, #0]

    /* Decrement loop counter */
    tapCnt--;
 80009ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009cc:	3b01      	subs	r3, #1
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (tapCnt > 0U)
 80009d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1f0      	bne.n	80009b8 <arm_fir_q15+0x126>
  }

}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	374c      	adds	r7, #76	; 0x4c
 80009dc:	46bd      	mov	sp, r7
 80009de:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80009e2:	4770      	bx	lr

080009e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 f938 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 f80d 	bl	8000a14 <HAL_InitTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	e001      	b.n	8000a0a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a06:	f7ff fd99 	bl	800053c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]

}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_InitTick+0x68>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d022      	beq.n	8000a6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_InitTick+0x6c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_InitTick+0x68>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f944 	bl	8000cca <HAL_SYSTICK_Config>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10f      	bne.n	8000a68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	d809      	bhi.n	8000a62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295
 8000a56:	f000 f910 	bl	8000c7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_InitTick+0x70>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	e007      	b.n	8000a72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e004      	b.n	8000a72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e001      	b.n	8000a72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a03      	ldr	r2, [pc, #12]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a98:	6013      	str	r3, [r2, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	20000104 	.word	0x20000104
 8000aa8:	20000008 	.word	0x20000008

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000104 	.word	0x20000104

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af6:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	60d3      	str	r3, [r2, #12]
}
 8000afc:	bf00      	nop
 8000afe:	3714      	adds	r7, #20
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	; (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c30:	d301      	bcc.n	8000c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00f      	b.n	8000c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <SysTick_Config+0x40>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3e:	210f      	movs	r1, #15
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f7ff ff8e 	bl	8000b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SysTick_Config+0x40>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Config+0x40>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010

08000c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff29 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c88:	f7ff ff40 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff ff90 	bl	8000bb8 <NVIC_EncodePriority>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff5f 	bl	8000b64 <__NVIC_SetPriority>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff33 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffa4 	bl	8000c20 <SysTick_Config>
 8000cd8:	4603      	mov	r3, r0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d101      	bne.n	8000cf4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e014      	b.n	8000d1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d105      	bne.n	8000d0a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2200      	movs	r2, #0
 8000d02:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fc3d 	bl	8000584 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b087      	sub	sp, #28
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e018      	b.n	8000d74 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	e004      	b.n	8000d6a <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	3314      	adds	r3, #20
 8000d68:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <HAL_DAC_ConfigChannel+0x1c>
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e19e      	b.n	80010de <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	795b      	ldrb	r3, [r3, #5]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d101      	bne.n	8000dac <HAL_DAC_ConfigChannel+0x2c>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e198      	b.n	80010de <HAL_DAC_ConfigChannel+0x35e>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2201      	movs	r2, #1
 8000db0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2202      	movs	r2, #2
 8000db6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d17a      	bne.n	8000eb6 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000dc0:	f7ff fe74 	bl	8000aac <HAL_GetTick>
 8000dc4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d13d      	bne.n	8000e48 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000dcc:	e018      	b.n	8000e00 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000dce:	f7ff fe6d 	bl	8000aac <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d911      	bls.n	8000e00 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00a      	beq.n	8000e00 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	f043 0208 	orr.w	r2, r3, #8
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e16e      	b.n	80010de <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1df      	bne.n	8000dce <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e16:	641a      	str	r2, [r3, #64]	; 0x40
 8000e18:	e020      	b.n	8000e5c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000e1a:	f7ff fe47 	bl	8000aac <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d90f      	bls.n	8000e48 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	da0a      	bge.n	8000e48 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	f043 0208 	orr.w	r2, r3, #8
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	2203      	movs	r2, #3
 8000e42:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e14a      	b.n	80010de <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	dbe3      	blt.n	8000e1a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e5a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	ea02 0103 	and.w	r1, r2, r3
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	409a      	lsls	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	430a      	orrs	r2, r1
 8000e88:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	21ff      	movs	r1, #255	; 0xff
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	ea02 0103 	and.w	r1, r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f003 0310 	and.w	r3, r3, #16
 8000eac:	409a      	lsls	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d11d      	bne.n	8000efa <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f003 0310 	and.w	r3, r3, #16
 8000ecc:	221f      	movs	r2, #31
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f003 0310 	and.w	r3, r3, #16
 8000f08:	2207      	movs	r2, #7
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f12:	4013      	ands	r3, r2
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
 8000f22:	e00f      	b.n	8000f44 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d102      	bne.n	8000f32 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
 8000f30:	e008      	b.n	8000f44 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d102      	bne.n	8000f40 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	623b      	str	r3, [r7, #32]
 8000f3e:	e001      	b.n	8000f44 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	6a3a      	ldr	r2, [r7, #32]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f66:	4013      	ands	r3, r2
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	791b      	ldrb	r3, [r3, #4]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <HAL_DAC_ConfigChannel+0x1f8>
 8000f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f76:	e000      	b.n	8000f7a <HAL_DAC_ConfigChannel+0x1fa>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f92:	4013      	ands	r3, r2
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	795b      	ldrb	r3, [r3, #5]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d102      	bne.n	8000fa4 <HAL_DAC_ConfigChannel+0x224>
 8000f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa2:	e000      	b.n	8000fa6 <HAL_DAC_ConfigChannel+0x226>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d114      	bne.n	8000fe6 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8000fbc:	f001 fa6a 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 8000fc0:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <HAL_DAC_ConfigChannel+0x368>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d904      	bls.n	8000fd4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd2:	e00f      	b.n	8000ff4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4a45      	ldr	r2, [pc, #276]	; (80010ec <HAL_DAC_ConfigChannel+0x36c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d90a      	bls.n	8000ff2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe4:	e006      	b.n	8000ff4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fec:	4313      	orrs	r3, r2
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff0:	e000      	b.n	8000ff4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000ff2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001002:	4313      	orrs	r3, r2
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800100c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6819      	ldr	r1, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	400a      	ands	r2, r1
 800102a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	4013      	ands	r3, r2
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105e:	4313      	orrs	r3, r2
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001068:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	22c0      	movs	r2, #192	; 0xc0
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43da      	mvns	r2, r3
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	400a      	ands	r2, r1
 8001084:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	f003 030f 	and.w	r3, r3, #15
 8001090:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	ea02 0103 	and.w	r1, r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2201      	movs	r2, #1
 80010d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2200      	movs	r2, #0
 80010da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80010dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	09896800 	.word	0x09896800
 80010ec:	04c4b400 	.word	0x04c4b400

080010f0 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e033      	b.n	800116a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fa7a 	bl	8000610 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f935 	bl	8001392 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f903 	bl	8001334 <FMAC_Reset>
 800112e:	4603      	mov	r3, r0
 8001130:	2b01      	cmp	r3, #1
 8001132:	d10c      	bne.n	800114e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001138:	f043 0210 	orr.w	r2, r3, #16
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	22a0      	movs	r2, #160	; 0xa0
 8001144:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e008      	b.n	8001160 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2220      	movs	r2, #32
 8001158:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_FMAC_ErrorCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_ErrorCallback(FMAC_HandleTypeDef *hfmac)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_ErrorCallback can be implemented in the user file.
   */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <HAL_FMAC_GetDataCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_GetDataCallback(FMAC_HandleTypeDef *hfmac)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_GetDataCallback can be implemented in the user file.
   */
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_FMAC_OutputDataReadyCallback>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
__weak void HAL_FMAC_OutputDataReadyCallback(FMAC_HandleTypeDef *hfmac)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  UNUSED(hfmac);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_FMAC_OutputDataReadyCallback can be implemented in the user file.
   */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_FMAC_IRQHandler>:
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure that contains
  *         the configuration information for FMAC module.
  * @retval None
  */
void HAL_FMAC_IRQHandler(FMAC_HandleTypeDef *hfmac)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b084      	sub	sp, #16
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  uint32_t itsource;

  /* Check if the read interrupt is enabled and if Y buffer empty flag isn't set */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_RIEN);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_YEMPTY) == 0U) && (itsource != 0U))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d022      	beq.n	8001216 <HAL_FMAC_IRQHandler+0x68>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d01f      	beq.n	8001216 <HAL_FMAC_IRQHandler+0x68>
  {
    /* Read some data if possible (Y size is used as a pseudo timeout in order
       to not get stuck too long under IT if FMAC keeps on processing input
       data reloaded via DMA for instance). */
    if (hfmac->pOutput != NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00a      	beq.n	80011f4 <HAL_FMAC_IRQHandler+0x46>
    {
      FMAC_ReadDataIncrementPtr(hfmac, (uint16_t)FMAC_GET_Y_SIZE(hfmac));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f90b 	bl	800140a <FMAC_ReadDataIncrementPtr>
    }

    /* Indicate that data is ready to be read */
    if ((hfmac->pOutput == NULL) || (hfmac->OutputCurrentSize == *(hfmac->pOutputSize)))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_FMAC_IRQHandler+0x5c>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8b9a      	ldrh	r2, [r3, #28]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d105      	bne.n	8001216 <HAL_FMAC_IRQHandler+0x68>
    {
      /* Reset the pointers to indicate new data will be needed */
      FMAC_ResetOutputStateAndDataPointers(hfmac);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f8e6 	bl	80013dc <FMAC_ResetOutputStateAndDataPointers>

      /* Call the output data ready callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->OutputDataReadyCallback(hfmac);
#else
      HAL_FMAC_OutputDataReadyCallback(hfmac);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ffc2 	bl	800119a <HAL_FMAC_OutputDataReadyCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
    }
  }

  /* Check if the write interrupt is enabled and if X1 buffer full flag isn't set */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_WIEN);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_X1FULL) == 0U) && (itsource != 0U))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b02      	cmp	r3, #2
 800122e:	d022      	beq.n	8001276 <HAL_FMAC_IRQHandler+0xc8>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01f      	beq.n	8001276 <HAL_FMAC_IRQHandler+0xc8>
  {
    /* Write some data if possible (X1 size is used as a pseudo timeout in order
       to not get stuck too long under IT if FMAC keep on processing input
       data whereas its output emptied via DMA for instance). */
    if (hfmac->pInput != NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00a      	beq.n	8001254 <HAL_FMAC_IRQHandler+0xa6>
    {
      FMAC_WriteDataIncrementPtr(hfmac, (uint16_t)FMAC_GET_X1_SIZE(hfmac));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	b29b      	uxth	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f96d 	bl	800152e <FMAC_WriteDataIncrementPtr>
    }

    /* Indicate that new data will be needed */
    if ((hfmac->pInput == NULL) || (hfmac->InputCurrentSize == *(hfmac->pInputSize)))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_FMAC_IRQHandler+0xbc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	8a1a      	ldrh	r2, [r3, #16]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d105      	bne.n	8001276 <HAL_FMAC_IRQHandler+0xc8>
    {
      /* Reset the pointers to indicate new data will be needed */
      FMAC_ResetInputStateAndDataPointers(hfmac);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f89f 	bl	80013ae <FMAC_ResetInputStateAndDataPointers>

      /* Call the get data callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
      hfmac->GetDataCallback(hfmac);
#else
      HAL_FMAC_GetDataCallback(hfmac);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff88 	bl	8001186 <HAL_FMAC_GetDataCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
    }
  }

  /* Check if the overflow error interrupt is enabled and if overflow error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_OVFLIEN);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_OVFL) != 0U) && (itsource != 0U))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001290:	d101      	bne.n	8001296 <HAL_FMAC_IRQHandler+0xe8>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_FMAC_IRQHandler+0xea>
 8001296:	2300      	movs	r3, #0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <HAL_FMAC_IRQHandler+0x100>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <HAL_FMAC_IRQHandler+0x100>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_OVFL;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a6:	f043 0204 	orr.w	r2, r3, #4
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Check if the underflow error interrupt is enabled and if underflow error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_UNFLIEN);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_UNFL) != 0U) && (itsource != 0U))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c8:	d101      	bne.n	80012ce <HAL_FMAC_IRQHandler+0x120>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <HAL_FMAC_IRQHandler+0x122>
 80012ce:	2300      	movs	r3, #0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_FMAC_IRQHandler+0x138>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_FMAC_IRQHandler+0x138>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_UNFL;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012de:	f043 0202 	orr.w	r2, r3, #2
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Check if the saturation error interrupt is enabled and if saturation error flag is raised */
  itsource = __HAL_FMAC_GET_IT_SOURCE(hfmac, FMAC_IT_SATIEN);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	60fb      	str	r3, [r7, #12]
  if ((__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_SAT) != 0U) && (itsource != 0U))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001300:	d101      	bne.n	8001306 <HAL_FMAC_IRQHandler+0x158>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_FMAC_IRQHandler+0x15a>
 8001306:	2300      	movs	r3, #0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <HAL_FMAC_IRQHandler+0x170>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <HAL_FMAC_IRQHandler+0x170>
  {
    hfmac->ErrorCode |= HAL_FMAC_ERROR_SAT;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Call the error callback if an error occurred */
  if (hfmac->ErrorCode != HAL_FMAC_ERROR_NONE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <HAL_FMAC_IRQHandler+0x17e>
  {
    /* Call the error callback */
#if (USE_HAL_FMAC_REGISTER_CALLBACKS == 1)
    hfmac->ErrorCallback(hfmac);
#else
    HAL_FMAC_ErrorCallback(hfmac);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ff23 	bl	8001172 <HAL_FMAC_ErrorCallback>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800133c:	f7ff fbb6 	bl	8000aac <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001350:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8001352:	e00f      	b.n	8001374 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8001354:	f7ff fbaa 	bl	8000aac <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001362:	d907      	bls.n	8001374 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e00a      	b.n	800138a <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1e8      	bne.n	8001354 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f807 	bl	80013ae <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f81b 	bl	80013dc <FMAC_ResetOutputStateAndDataPointers>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2220      	movs	r2, #32
 80013cc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2220      	movs	r2, #32
 80013fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <FMAC_ReadDataIncrementPtr>:
  * @param  MaxSizeToRead Maximum number of data to read (this serves as a timeout
  *         if FMAC continuously writes into the output buffer).
  * @retval None
  */
static void FMAC_ReadDataIncrementPtr(FMAC_HandleTypeDef *hfmac, uint16_t MaxSizeToRead)
{
 800140a:	b480      	push	{r7}
 800140c:	b087      	sub	sp, #28
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	807b      	strh	r3, [r7, #2]
  uint16_t maxsize;
  uint16_t threshold;
  uint32_t tmpvalue;

  /* Check if there is data to read */
  if (READ_BIT(hfmac->Instance->SR, FMAC_SR_YEMPTY) != 0U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d17c      	bne.n	800151e <FMAC_ReadDataIncrementPtr+0x114>
  {
    return;
  }

  /* Get the maximum index (no wait allowed, no overstepping of the output buffer) */
  if ((hfmac->OutputCurrentSize + MaxSizeToRead) > *(hfmac->pOutputSize))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	8b9b      	ldrh	r3, [r3, #28]
 8001428:	461a      	mov	r2, r3
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	4413      	add	r3, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6a12      	ldr	r2, [r2, #32]
 8001432:	8812      	ldrh	r2, [r2, #0]
 8001434:	4293      	cmp	r3, r2
 8001436:	dd04      	ble.n	8001442 <FMAC_ReadDataIncrementPtr+0x38>
  {
    maxsize = *(hfmac->pOutputSize);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	82fb      	strh	r3, [r7, #22]
 8001440:	e004      	b.n	800144c <FMAC_ReadDataIncrementPtr+0x42>
  }
  else
  {
    maxsize = hfmac->OutputCurrentSize + MaxSizeToRead;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	8b9a      	ldrh	r2, [r3, #28]
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	4413      	add	r3, r2
 800144a:	82fb      	strh	r3, [r7, #22]

  /* Read until there is no more room or no more data */
  do
  {
    /* If there is no more room, return */
    if (!(hfmac->OutputCurrentSize < maxsize))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	8b9b      	ldrh	r3, [r3, #28]
 8001450:	8afa      	ldrh	r2, [r7, #22]
 8001452:	429a      	cmp	r2, r3
 8001454:	d965      	bls.n	8001522 <FMAC_ReadDataIncrementPtr+0x118>
    {
      return;
    }

    /* Read the available data */
    tmpvalue = ((READ_REG(hfmac->Instance->RDATA))& FMAC_RDATA_RDATA);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	b29b      	uxth	r3, r3
 800145e:	613b      	str	r3, [r7, #16]
    *(hfmac->pOutput) = (int16_t)tmpvalue;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	b212      	sxth	r2, r2
 8001468:	801a      	strh	r2, [r3, #0]
    hfmac->pOutput++;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	1c9a      	adds	r2, r3, #2
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	619a      	str	r2, [r3, #24]
    hfmac->OutputCurrentSize++;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	8b9b      	ldrh	r3, [r3, #28]
 8001478:	3301      	adds	r3, #1
 800147a:	b29a      	uxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	839a      	strh	r2, [r3, #28]
  } while (READ_BIT(hfmac->Instance->SR, FMAC_SR_YEMPTY) == 0U);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0de      	beq.n	800144c <FMAC_ReadDataIncrementPtr+0x42>

  /* Y buffer empty flag has just be raised, read the threshold */
  threshold = (uint16_t)FMAC_GET_THRESHOLD_FROM_WM(FMAC_GET_Y_EMPTY_WM(hfmac)) - 1U;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d015      	beq.n	80014c8 <FMAC_ReadDataIncrementPtr+0xbe>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80014a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014aa:	d00b      	beq.n	80014c4 <FMAC_ReadDataIncrementPtr+0xba>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80014b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014ba:	d101      	bne.n	80014c0 <FMAC_ReadDataIncrementPtr+0xb6>
 80014bc:	2303      	movs	r3, #3
 80014be:	e004      	b.n	80014ca <FMAC_ReadDataIncrementPtr+0xc0>
 80014c0:	2307      	movs	r3, #7
 80014c2:	e002      	b.n	80014ca <FMAC_ReadDataIncrementPtr+0xc0>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <FMAC_ReadDataIncrementPtr+0xc0>
 80014c8:	2300      	movs	r3, #0
 80014ca:	81fb      	strh	r3, [r7, #14]

  /* Update the maximum size if needed (limited data available) */
  if ((hfmac->OutputCurrentSize + threshold) < maxsize)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	8b9b      	ldrh	r3, [r3, #28]
 80014d0:	461a      	mov	r2, r3
 80014d2:	89fb      	ldrh	r3, [r7, #14]
 80014d4:	441a      	add	r2, r3
 80014d6:	8afb      	ldrh	r3, [r7, #22]
 80014d8:	429a      	cmp	r2, r3
 80014da:	da1a      	bge.n	8001512 <FMAC_ReadDataIncrementPtr+0x108>
  {
    maxsize = hfmac->OutputCurrentSize + threshold;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	8b9a      	ldrh	r2, [r3, #28]
 80014e0:	89fb      	ldrh	r3, [r7, #14]
 80014e2:	4413      	add	r3, r2
 80014e4:	82fb      	strh	r3, [r7, #22]
  }

  /* Read the available data */
  while (hfmac->OutputCurrentSize < maxsize)
 80014e6:	e014      	b.n	8001512 <FMAC_ReadDataIncrementPtr+0x108>
  {
    tmpvalue = ((READ_REG(hfmac->Instance->RDATA))& FMAC_RDATA_RDATA);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	613b      	str	r3, [r7, #16]
    *(hfmac->pOutput) = (int16_t)tmpvalue;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	b212      	sxth	r2, r2
 80014fa:	801a      	strh	r2, [r3, #0]
    hfmac->pOutput++;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	1c9a      	adds	r2, r3, #2
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
    hfmac->OutputCurrentSize++;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	8b9b      	ldrh	r3, [r3, #28]
 800150a:	3301      	adds	r3, #1
 800150c:	b29a      	uxth	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	839a      	strh	r2, [r3, #28]
  while (hfmac->OutputCurrentSize < maxsize)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	8b9b      	ldrh	r3, [r3, #28]
 8001516:	8afa      	ldrh	r2, [r7, #22]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8e5      	bhi.n	80014e8 <FMAC_ReadDataIncrementPtr+0xde>
 800151c:	e002      	b.n	8001524 <FMAC_ReadDataIncrementPtr+0x11a>
    return;
 800151e:	bf00      	nop
 8001520:	e000      	b.n	8001524 <FMAC_ReadDataIncrementPtr+0x11a>
      return;
 8001522:	bf00      	nop
  }
}
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <FMAC_WriteDataIncrementPtr>:
  * @param  MaxSizeToWrite Maximum number of data to write (this serves as a timeout
  *         if FMAC continuously empties the input buffer).
  * @retval None
  */
static void FMAC_WriteDataIncrementPtr(FMAC_HandleTypeDef *hfmac, uint16_t MaxSizeToWrite)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	807b      	strh	r3, [r7, #2]
  uint16_t maxsize;
  uint16_t threshold;

  /* Check if there is room in FMAC */
  if (READ_BIT(hfmac->Instance->SR, FMAC_SR_X1FULL) != 0U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d17a      	bne.n	800163e <FMAC_WriteDataIncrementPtr+0x110>
  {
    return;
  }

  /* Get the maximum index (no wait allowed, no overstepping of the output buffer) */
  if ((hfmac->InputCurrentSize + MaxSizeToWrite) > *(hfmac->pInputSize))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	8a1b      	ldrh	r3, [r3, #16]
 800154c:	461a      	mov	r2, r3
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	4413      	add	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6952      	ldr	r2, [r2, #20]
 8001556:	8812      	ldrh	r2, [r2, #0]
 8001558:	4293      	cmp	r3, r2
 800155a:	dd04      	ble.n	8001566 <FMAC_WriteDataIncrementPtr+0x38>
  {
    maxsize = *(hfmac->pInputSize);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	81fb      	strh	r3, [r7, #14]
 8001564:	e004      	b.n	8001570 <FMAC_WriteDataIncrementPtr+0x42>
  }
  else
  {
    maxsize = hfmac->InputCurrentSize + MaxSizeToWrite;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	8a1a      	ldrh	r2, [r3, #16]
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	4413      	add	r3, r2
 800156e:	81fb      	strh	r3, [r7, #14]

  /* Write until there is no more room or no more data */
  do
  {
    /* If there is no more room, return */
    if (!(hfmac->InputCurrentSize < maxsize))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	8a1b      	ldrh	r3, [r3, #16]
 8001574:	89fa      	ldrh	r2, [r7, #14]
 8001576:	429a      	cmp	r2, r3
 8001578:	d963      	bls.n	8001642 <FMAC_WriteDataIncrementPtr+0x114>
    {
      return;
    }

    /* Write the available data */
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(hfmac->pInput))) & FMAC_WDATA_WDATA));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b292      	uxth	r2, r2
 800158a:	619a      	str	r2, [r3, #24]
    hfmac->pInput++;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	1c9a      	adds	r2, r3, #2
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	60da      	str	r2, [r3, #12]
    hfmac->InputCurrentSize++;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	8a1b      	ldrh	r3, [r3, #16]
 800159a:	3301      	adds	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	821a      	strh	r2, [r3, #16]
  } while (READ_BIT(hfmac->Instance->SR, FMAC_SR_X1FULL) == 0U);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0df      	beq.n	8001570 <FMAC_WriteDataIncrementPtr+0x42>

  /* X1 buffer full flag has just be raised, read the threshold */
  threshold = (uint16_t)FMAC_GET_THRESHOLD_FROM_WM(FMAC_GET_X1_FULL_WM(hfmac)) - 1U;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d015      	beq.n	80015ea <FMAC_WriteDataIncrementPtr+0xbc>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d00b      	beq.n	80015e6 <FMAC_WriteDataIncrementPtr+0xb8>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80015d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015dc:	d101      	bne.n	80015e2 <FMAC_WriteDataIncrementPtr+0xb4>
 80015de:	2303      	movs	r3, #3
 80015e0:	e004      	b.n	80015ec <FMAC_WriteDataIncrementPtr+0xbe>
 80015e2:	2307      	movs	r3, #7
 80015e4:	e002      	b.n	80015ec <FMAC_WriteDataIncrementPtr+0xbe>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <FMAC_WriteDataIncrementPtr+0xbe>
 80015ea:	2300      	movs	r3, #0
 80015ec:	81bb      	strh	r3, [r7, #12]

  /* Update the maximum size if needed (limited data available) */
  if ((hfmac->InputCurrentSize + threshold) < maxsize)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	8a1b      	ldrh	r3, [r3, #16]
 80015f2:	461a      	mov	r2, r3
 80015f4:	89bb      	ldrh	r3, [r7, #12]
 80015f6:	441a      	add	r2, r3
 80015f8:	89fb      	ldrh	r3, [r7, #14]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	da19      	bge.n	8001632 <FMAC_WriteDataIncrementPtr+0x104>
  {
    maxsize = hfmac->InputCurrentSize + threshold;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	8a1a      	ldrh	r2, [r3, #16]
 8001602:	89bb      	ldrh	r3, [r7, #12]
 8001604:	4413      	add	r3, r2
 8001606:	81fb      	strh	r3, [r7, #14]
  }

  /* Write the available data */
  while (hfmac->InputCurrentSize < maxsize)
 8001608:	e013      	b.n	8001632 <FMAC_WriteDataIncrementPtr+0x104>
  {
    WRITE_REG(hfmac->Instance->WDATA, (((uint32_t)(*(hfmac->pInput))) & FMAC_WDATA_WDATA));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	b292      	uxth	r2, r2
 800161a:	619a      	str	r2, [r3, #24]
    hfmac->pInput++;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	1c9a      	adds	r2, r3, #2
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60da      	str	r2, [r3, #12]
    hfmac->InputCurrentSize++;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	8a1b      	ldrh	r3, [r3, #16]
 800162a:	3301      	adds	r3, #1
 800162c:	b29a      	uxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	821a      	strh	r2, [r3, #16]
  while (hfmac->InputCurrentSize < maxsize)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	8a1b      	ldrh	r3, [r3, #16]
 8001636:	89fa      	ldrh	r2, [r7, #14]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8e6      	bhi.n	800160a <FMAC_WriteDataIncrementPtr+0xdc>
 800163c:	e002      	b.n	8001644 <FMAC_WriteDataIncrementPtr+0x116>
    return;
 800163e:	bf00      	nop
 8001640:	e000      	b.n	8001644 <FMAC_WriteDataIncrementPtr+0x116>
      return;
 8001642:	bf00      	nop
  }
}
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b087      	sub	sp, #28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800165e:	e15a      	b.n	8001916 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 814c 	beq.w	8001910 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d005      	beq.n	8001690 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800168c:	2b02      	cmp	r3, #2
 800168e:	d130      	bne.n	80016f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016c6:	2201      	movs	r2, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 0201 	and.w	r2, r3, #1
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d017      	beq.n	800172e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d123      	bne.n	8001782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	6939      	ldr	r1, [r7, #16]
 800177e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0203 	and.w	r2, r3, #3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80a6 	beq.w	8001910 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b5b      	ldr	r3, [pc, #364]	; (8001934 <HAL_GPIO_Init+0x2e4>)
 80017c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c8:	4a5a      	ldr	r2, [pc, #360]	; (8001934 <HAL_GPIO_Init+0x2e4>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6613      	str	r3, [r2, #96]	; 0x60
 80017d0:	4b58      	ldr	r3, [pc, #352]	; (8001934 <HAL_GPIO_Init+0x2e4>)
 80017d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017dc:	4a56      	ldr	r2, [pc, #344]	; (8001938 <HAL_GPIO_Init+0x2e8>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001806:	d01f      	beq.n	8001848 <HAL_GPIO_Init+0x1f8>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a4c      	ldr	r2, [pc, #304]	; (800193c <HAL_GPIO_Init+0x2ec>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d019      	beq.n	8001844 <HAL_GPIO_Init+0x1f4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a4b      	ldr	r2, [pc, #300]	; (8001940 <HAL_GPIO_Init+0x2f0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d013      	beq.n	8001840 <HAL_GPIO_Init+0x1f0>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a4a      	ldr	r2, [pc, #296]	; (8001944 <HAL_GPIO_Init+0x2f4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00d      	beq.n	800183c <HAL_GPIO_Init+0x1ec>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a49      	ldr	r2, [pc, #292]	; (8001948 <HAL_GPIO_Init+0x2f8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <HAL_GPIO_Init+0x1e8>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a48      	ldr	r2, [pc, #288]	; (800194c <HAL_GPIO_Init+0x2fc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_GPIO_Init+0x1e4>
 8001830:	2305      	movs	r3, #5
 8001832:	e00a      	b.n	800184a <HAL_GPIO_Init+0x1fa>
 8001834:	2306      	movs	r3, #6
 8001836:	e008      	b.n	800184a <HAL_GPIO_Init+0x1fa>
 8001838:	2304      	movs	r3, #4
 800183a:	e006      	b.n	800184a <HAL_GPIO_Init+0x1fa>
 800183c:	2303      	movs	r3, #3
 800183e:	e004      	b.n	800184a <HAL_GPIO_Init+0x1fa>
 8001840:	2302      	movs	r3, #2
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0x1fa>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_GPIO_Init+0x1fa>
 8001848:	2300      	movs	r3, #0
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	f002 0203 	and.w	r2, r2, #3
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	4093      	lsls	r3, r2
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800185a:	4937      	ldr	r1, [pc, #220]	; (8001938 <HAL_GPIO_Init+0x2e8>)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001868:	4b39      	ldr	r3, [pc, #228]	; (8001950 <HAL_GPIO_Init+0x300>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800188c:	4a30      	ldr	r2, [pc, #192]	; (8001950 <HAL_GPIO_Init+0x300>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001892:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <HAL_GPIO_Init+0x300>)
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018b6:	4a26      	ldr	r2, [pc, #152]	; (8001950 <HAL_GPIO_Init+0x300>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018bc:	4b24      	ldr	r3, [pc, #144]	; (8001950 <HAL_GPIO_Init+0x300>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <HAL_GPIO_Init+0x300>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_GPIO_Init+0x300>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <HAL_GPIO_Init+0x300>)
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	f47f ae9d 	bne.w	8001660 <HAL_GPIO_Init+0x10>
  }
}
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	40021000 	.word	0x40021000
 8001938:	40010000 	.word	0x40010000
 800193c:	48000400 	.word	0x48000400
 8001940:	48000800 	.word	0x48000800
 8001944:	48000c00 	.word	0x48000c00
 8001948:	48001000 	.word	0x48001000
 800194c:	48001400 	.word	0x48001400
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001964:	787b      	ldrb	r3, [r7, #1]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800196a:	887a      	ldrh	r2, [r7, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001970:	e002      	b.n	8001978 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f806 	bl	80019b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40010400 	.word	0x40010400

080019b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d141      	bne.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e6:	d131      	bne.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ee:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f8:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a00:	4a41      	ldr	r2, [pc, #260]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a08:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2232      	movs	r2, #50	; 0x32
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	4a3f      	ldr	r2, [pc, #252]	; (8001b10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a14:	fba2 2303 	umull	r2, r3, r2, r3
 8001a18:	0c9b      	lsrs	r3, r3, #18
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a1e:	e002      	b.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d102      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f2      	bne.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a3a:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a46:	d158      	bne.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e057      	b.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a52:	4a2d      	ldr	r2, [pc, #180]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a5c:	e04d      	b.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a64:	d141      	bne.n	8001aea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a72:	d131      	bne.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a7a:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2232      	movs	r2, #50	; 0x32
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	0c9b      	lsrs	r3, r3, #18
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aaa:	e002      	b.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abe:	d102      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f2      	bne.n	8001aac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	d112      	bne.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e011      	b.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ae8:	e007      	b.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	431bde83 	.word	0x431bde83

08001b14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b22:	6093      	str	r3, [r2, #8]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40007000 	.word	0x40007000

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e2fe      	b.n	8002144 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d075      	beq.n	8001c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b97      	ldr	r3, [pc, #604]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b5c:	4b94      	ldr	r3, [pc, #592]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d102      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3e>
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_OscConfig+0x44>
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d10b      	bne.n	8001b90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	4b8d      	ldr	r3, [pc, #564]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d05b      	beq.n	8001c3c <HAL_RCC_OscConfig+0x108>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d157      	bne.n	8001c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e2d9      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x74>
 8001b9a:	4b85      	ldr	r3, [pc, #532]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a84      	ldr	r2, [pc, #528]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e01d      	b.n	8001be4 <HAL_RCC_OscConfig+0xb0>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x98>
 8001bb2:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a7e      	ldr	r2, [pc, #504]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7b      	ldr	r2, [pc, #492]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_OscConfig+0xb0>
 8001bcc:	4b78      	ldr	r3, [pc, #480]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a77      	ldr	r2, [pc, #476]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b75      	ldr	r3, [pc, #468]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a74      	ldr	r2, [pc, #464]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d013      	beq.n	8001c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe ff5e 	bl	8000aac <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7fe ff5a 	bl	8000aac <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e29e      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c06:	4b6a      	ldr	r3, [pc, #424]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xc0>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7fe ff4a 	bl	8000aac <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7fe ff46 	bl	8000aac <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e28a      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2e:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0xe8>
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d075      	beq.n	8001d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	4b56      	ldr	r3, [pc, #344]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d102      	bne.n	8001c6a <HAL_RCC_OscConfig+0x136>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d002      	beq.n	8001c70 <HAL_RCC_OscConfig+0x13c>
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d11f      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c70:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_OscConfig+0x154>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e25d      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	4946      	ldr	r1, [pc, #280]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c9c:	4b45      	ldr	r3, [pc, #276]	; (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe feb7 	bl	8000a14 <HAL_InitTick>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d043      	beq.n	8001d34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e249      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d023      	beq.n	8001d00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb8:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a3c      	ldr	r2, [pc, #240]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fef2 	bl	8000aac <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ccc:	f7fe feee 	bl	8000aac <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e232      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	061b      	lsls	r3, r3, #24
 8001cf8:	492d      	ldr	r1, [pc, #180]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
 8001cfe:	e01a      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a2a      	ldr	r2, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7fe fece 	bl	8000aac <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d14:	f7fe feca 	bl	8000aac <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e20e      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1e0>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d041      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d01c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7fe fea7 	bl	8000aac <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d62:	f7fe fea3 	bl	8000aac <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e1e7      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ef      	beq.n	8001d62 <HAL_RCC_OscConfig+0x22e>
 8001d82:	e020      	b.n	8001dc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7fe fe8a 	bl	8000aac <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d9a:	e00d      	b.n	8001db8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7fe fe86 	bl	8000aac <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d906      	bls.n	8001db8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1ca      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db8:	4b8c      	ldr	r3, [pc, #560]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ea      	bne.n	8001d9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80a6 	beq.w	8001f20 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dd8:	4b84      	ldr	r3, [pc, #528]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2b4>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x2b6>
 8001de8:	2300      	movs	r3, #0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00d      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	4b7f      	ldr	r3, [pc, #508]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	4a7e      	ldr	r2, [pc, #504]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfa:	4b7c      	ldr	r3, [pc, #496]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e06:	2301      	movs	r3, #1
 8001e08:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0a:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <HAL_RCC_OscConfig+0x4bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d118      	bne.n	8001e48 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e16:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <HAL_RCC_OscConfig+0x4bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a75      	ldr	r2, [pc, #468]	; (8001ff0 <HAL_RCC_OscConfig+0x4bc>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e22:	f7fe fe43 	bl	8000aac <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7fe fe3f 	bl	8000aac <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e183      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3c:	4b6c      	ldr	r3, [pc, #432]	; (8001ff0 <HAL_RCC_OscConfig+0x4bc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d108      	bne.n	8001e62 <HAL_RCC_OscConfig+0x32e>
 8001e50:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	4a65      	ldr	r2, [pc, #404]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e60:	e024      	b.n	8001eac <HAL_RCC_OscConfig+0x378>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d110      	bne.n	8001e8c <HAL_RCC_OscConfig+0x358>
 8001e6a:	4b60      	ldr	r3, [pc, #384]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e70:	4a5e      	ldr	r2, [pc, #376]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e80:	4a5a      	ldr	r2, [pc, #360]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8a:	e00f      	b.n	8001eac <HAL_RCC_OscConfig+0x378>
 8001e8c:	4b57      	ldr	r3, [pc, #348]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	4a56      	ldr	r2, [pc, #344]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d016      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7fe fdfa 	bl	8000aac <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7fe fdf6 	bl	8000aac <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e138      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed2:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ed      	beq.n	8001ebc <HAL_RCC_OscConfig+0x388>
 8001ee0:	e015      	b.n	8001f0e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee2:	f7fe fde3 	bl	8000aac <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7fe fddf 	bl	8000aac <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e121      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1ed      	bne.n	8001eea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f0e:	7ffb      	ldrb	r3, [r7, #31]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f14:	4b35      	ldr	r3, [pc, #212]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	4a34      	ldr	r2, [pc, #208]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d03c      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3a:	4a2c      	ldr	r2, [pc, #176]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7fe fdb2 	bl	8000aac <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4c:	f7fe fdae 	bl	8000aac <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e0f2      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f5e:	4b23      	ldr	r3, [pc, #140]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ef      	beq.n	8001f4c <HAL_RCC_OscConfig+0x418>
 8001f6c:	e01b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7e:	f7fe fd95 	bl	8000aac <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f86:	f7fe fd91 	bl	8000aac <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0d5      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ef      	bne.n	8001f86 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80c9 	beq.w	8002142 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	f000 8083 	beq.w	80020c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d15e      	bne.n	8002084 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fd6b 	bl	8000aac <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd8:	e00c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe fd67 	bl	8000aac <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d905      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0ab      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff4:	4b55      	ldr	r3, [pc, #340]	; (800214c <HAL_RCC_OscConfig+0x618>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ec      	bne.n	8001fda <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002000:	4b52      	ldr	r3, [pc, #328]	; (800214c <HAL_RCC_OscConfig+0x618>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	4b52      	ldr	r3, [pc, #328]	; (8002150 <HAL_RCC_OscConfig+0x61c>)
 8002006:	4013      	ands	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6a11      	ldr	r1, [r2, #32]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002010:	3a01      	subs	r2, #1
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	4311      	orrs	r1, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800201a:	0212      	lsls	r2, r2, #8
 800201c:	4311      	orrs	r1, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002022:	0852      	lsrs	r2, r2, #1
 8002024:	3a01      	subs	r2, #1
 8002026:	0552      	lsls	r2, r2, #21
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800202e:	0852      	lsrs	r2, r2, #1
 8002030:	3a01      	subs	r2, #1
 8002032:	0652      	lsls	r2, r2, #25
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800203a:	06d2      	lsls	r2, r2, #27
 800203c:	430a      	orrs	r2, r1
 800203e:	4943      	ldr	r1, [pc, #268]	; (800214c <HAL_RCC_OscConfig+0x618>)
 8002040:	4313      	orrs	r3, r2
 8002042:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_OscConfig+0x618>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a40      	ldr	r2, [pc, #256]	; (800214c <HAL_RCC_OscConfig+0x618>)
 800204a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002050:	4b3e      	ldr	r3, [pc, #248]	; (800214c <HAL_RCC_OscConfig+0x618>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a3d      	ldr	r2, [pc, #244]	; (800214c <HAL_RCC_OscConfig+0x618>)
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7fe fd26 	bl	8000aac <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7fe fd22 	bl	8000aac <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e066      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <HAL_RCC_OscConfig+0x618>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x530>
 8002082:	e05e      	b.n	8002142 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_RCC_OscConfig+0x618>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a30      	ldr	r2, [pc, #192]	; (800214c <HAL_RCC_OscConfig+0x618>)
 800208a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe fd0c 	bl	8000aac <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fd08 	bl	8000aac <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e04c      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020aa:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_RCC_OscConfig+0x618>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_RCC_OscConfig+0x618>)
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	4924      	ldr	r1, [pc, #144]	; (800214c <HAL_RCC_OscConfig+0x618>)
 80020bc:	4b25      	ldr	r3, [pc, #148]	; (8002154 <HAL_RCC_OscConfig+0x620>)
 80020be:	4013      	ands	r3, r2
 80020c0:	60cb      	str	r3, [r1, #12]
 80020c2:	e03e      	b.n	8002142 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e039      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020d0:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_RCC_OscConfig+0x618>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 0203 	and.w	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a1b      	ldr	r3, [r3, #32]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d12c      	bne.n	800213e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	3b01      	subs	r3, #1
 80020f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d123      	bne.n	800213e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d11b      	bne.n	800213e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d113      	bne.n	800213e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	085b      	lsrs	r3, r3, #1
 8002122:	3b01      	subs	r3, #1
 8002124:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d109      	bne.n	800213e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002134:	085b      	lsrs	r3, r3, #1
 8002136:	3b01      	subs	r3, #1
 8002138:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	019f800c 	.word	0x019f800c
 8002154:	feeefffc 	.word	0xfeeefffc

08002158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e11e      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b91      	ldr	r3, [pc, #580]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d910      	bls.n	80021a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b8e      	ldr	r3, [pc, #568]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 020f 	bic.w	r2, r3, #15
 8002186:	498c      	ldr	r1, [pc, #560]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b8a      	ldr	r3, [pc, #552]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e106      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d073      	beq.n	8002294 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d129      	bne.n	8002208 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0f4      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021c4:	f000 f972 	bl	80024ac <RCC_GetSysClockFreqFromPLLSource>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4a7c      	ldr	r2, [pc, #496]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d93f      	bls.n	8002252 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021d2:	4b7a      	ldr	r3, [pc, #488]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d033      	beq.n	8002252 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d12f      	bne.n	8002252 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021f2:	4b72      	ldr	r3, [pc, #456]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021fa:	4a70      	ldr	r2, [pc, #448]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80021fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002200:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e024      	b.n	8002252 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d107      	bne.n	8002220 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0c6      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002220:	4b66      	ldr	r3, [pc, #408]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0be      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002230:	f000 f8ce 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 8002234:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4a61      	ldr	r2, [pc, #388]	; (80023c0 <HAL_RCC_ClockConfig+0x268>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d909      	bls.n	8002252 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800223e:	4b5f      	ldr	r3, [pc, #380]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002246:	4a5d      	ldr	r2, [pc, #372]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b5a      	ldr	r3, [pc, #360]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4957      	ldr	r1, [pc, #348]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002264:	f7fe fc22 	bl	8000aac <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7fe fc1e 	bl	8000aac <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e095      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b4e      	ldr	r3, [pc, #312]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d023      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a42      	ldr	r2, [pc, #264]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022c4:	4b3d      	ldr	r3, [pc, #244]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022cc:	4a3b      	ldr	r2, [pc, #236]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d4:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4936      	ldr	r1, [pc, #216]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
 80022e6:	e008      	b.n	80022fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b80      	cmp	r3, #128	; 0x80
 80022ec:	d105      	bne.n	80022fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022ee:	4b33      	ldr	r3, [pc, #204]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4a32      	ldr	r2, [pc, #200]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 80022f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022fa:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d21d      	bcs.n	8002344 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 020f 	bic.w	r2, r3, #15
 8002310:	4929      	ldr	r1, [pc, #164]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002318:	f7fe fbc8 	bl	8000aac <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7fe fbc4 	bl	8000aac <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e03b      	b.n	80023ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_ClockConfig+0x260>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d1ed      	bne.n	8002320 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4917      	ldr	r1, [pc, #92]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 800235e:	4313      	orrs	r3, r2
 8002360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	490f      	ldr	r1, [pc, #60]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002382:	f000 f825 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 8002386:	4602      	mov	r2, r0
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_ClockConfig+0x264>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	490c      	ldr	r1, [pc, #48]	; (80023c4 <HAL_RCC_ClockConfig+0x26c>)
 8002394:	5ccb      	ldrb	r3, [r1, r3]
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	fa22 f303 	lsr.w	r3, r2, r3
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_RCC_ClockConfig+0x270>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x274>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fb34 	bl	8000a14 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40022000 	.word	0x40022000
 80023bc:	40021000 	.word	0x40021000
 80023c0:	04c4b400 	.word	0x04c4b400
 80023c4:	0800347c 	.word	0x0800347c
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023e2:	4b2a      	ldr	r3, [pc, #168]	; (800248c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	e047      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023e8:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d102      	bne.n	80023fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e03e      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023fa:	4b23      	ldr	r3, [pc, #140]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b0c      	cmp	r3, #12
 8002404:	d136      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3301      	adds	r3, #1
 800241c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d10c      	bne.n	800243e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002424:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	4a16      	ldr	r2, [pc, #88]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 800242e:	68d2      	ldr	r2, [r2, #12]
 8002430:	0a12      	lsrs	r2, r2, #8
 8002432:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	617b      	str	r3, [r7, #20]
      break;
 800243c:	e00c      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800243e:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	4a10      	ldr	r2, [pc, #64]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	0a12      	lsrs	r2, r2, #8
 800244c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
      break;
 8002456:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0e5b      	lsrs	r3, r3, #25
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	3301      	adds	r3, #1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	e001      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002478:	693b      	ldr	r3, [r7, #16]
}
 800247a:	4618      	mov	r0, r3
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	00f42400 	.word	0x00f42400
 8002490:	016e3600 	.word	0x016e3600

08002494 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000

080024ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3301      	adds	r3, #1
 80024c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d10c      	bne.n	80024ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024d0:	4a17      	ldr	r2, [pc, #92]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024da:	68d2      	ldr	r2, [r2, #12]
 80024dc:	0a12      	lsrs	r2, r2, #8
 80024de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	617b      	str	r3, [r7, #20]
    break;
 80024e8:	e00c      	b.n	8002504 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024f4:	68d2      	ldr	r2, [r2, #12]
 80024f6:	0a12      	lsrs	r2, r2, #8
 80024f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
    break;
 8002502:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	0e5b      	lsrs	r3, r3, #25
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	3301      	adds	r3, #1
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800251e:	687b      	ldr	r3, [r7, #4]
}
 8002520:	4618      	mov	r0, r3
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40021000 	.word	0x40021000
 8002530:	016e3600 	.word	0x016e3600
 8002534:	00f42400 	.word	0x00f42400

08002538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e049      	b.n	80025de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe f87c 	bl	800065c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 f8ae 	bl	80026d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d001      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e054      	b.n	80026aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d022      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d01d      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a22      	ldr	r2, [pc, #136]	; (80026bc <HAL_TIM_Base_Start_IT+0xd4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d018      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d013      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00e      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1e      	ldr	r2, [pc, #120]	; (80026c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d009      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <HAL_TIM_Base_Start_IT+0xe4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d004      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x80>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d115      	bne.n	8002694 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_TIM_Base_Start_IT+0xec>)
 8002670:	4013      	ands	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b06      	cmp	r3, #6
 8002678:	d015      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0xbe>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d011      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002692:	e008      	b.n	80026a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e000      	b.n	80026a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800
 80026c4:	40000c00 	.word	0x40000c00
 80026c8:	40013400 	.word	0x40013400
 80026cc:	40014000 	.word	0x40014000
 80026d0:	40015000 	.word	0x40015000
 80026d4:	00010007 	.word	0x00010007

080026d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a4c      	ldr	r2, [pc, #304]	; (800281c <TIM_Base_SetConfig+0x144>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d017      	beq.n	8002720 <TIM_Base_SetConfig+0x48>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f6:	d013      	beq.n	8002720 <TIM_Base_SetConfig+0x48>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a49      	ldr	r2, [pc, #292]	; (8002820 <TIM_Base_SetConfig+0x148>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00f      	beq.n	8002720 <TIM_Base_SetConfig+0x48>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a48      	ldr	r2, [pc, #288]	; (8002824 <TIM_Base_SetConfig+0x14c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00b      	beq.n	8002720 <TIM_Base_SetConfig+0x48>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a47      	ldr	r2, [pc, #284]	; (8002828 <TIM_Base_SetConfig+0x150>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <TIM_Base_SetConfig+0x48>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a46      	ldr	r2, [pc, #280]	; (800282c <TIM_Base_SetConfig+0x154>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d003      	beq.n	8002720 <TIM_Base_SetConfig+0x48>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a45      	ldr	r2, [pc, #276]	; (8002830 <TIM_Base_SetConfig+0x158>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d108      	bne.n	8002732 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a39      	ldr	r2, [pc, #228]	; (800281c <TIM_Base_SetConfig+0x144>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d023      	beq.n	8002782 <TIM_Base_SetConfig+0xaa>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d01f      	beq.n	8002782 <TIM_Base_SetConfig+0xaa>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a36      	ldr	r2, [pc, #216]	; (8002820 <TIM_Base_SetConfig+0x148>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01b      	beq.n	8002782 <TIM_Base_SetConfig+0xaa>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a35      	ldr	r2, [pc, #212]	; (8002824 <TIM_Base_SetConfig+0x14c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d017      	beq.n	8002782 <TIM_Base_SetConfig+0xaa>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a34      	ldr	r2, [pc, #208]	; (8002828 <TIM_Base_SetConfig+0x150>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <TIM_Base_SetConfig+0xaa>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a33      	ldr	r2, [pc, #204]	; (800282c <TIM_Base_SetConfig+0x154>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00f      	beq.n	8002782 <TIM_Base_SetConfig+0xaa>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a33      	ldr	r2, [pc, #204]	; (8002834 <TIM_Base_SetConfig+0x15c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00b      	beq.n	8002782 <TIM_Base_SetConfig+0xaa>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a32      	ldr	r2, [pc, #200]	; (8002838 <TIM_Base_SetConfig+0x160>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <TIM_Base_SetConfig+0xaa>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <TIM_Base_SetConfig+0x164>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d003      	beq.n	8002782 <TIM_Base_SetConfig+0xaa>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <TIM_Base_SetConfig+0x158>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d108      	bne.n	8002794 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a18      	ldr	r2, [pc, #96]	; (800281c <TIM_Base_SetConfig+0x144>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d013      	beq.n	80027e8 <TIM_Base_SetConfig+0x110>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a1a      	ldr	r2, [pc, #104]	; (800282c <TIM_Base_SetConfig+0x154>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00f      	beq.n	80027e8 <TIM_Base_SetConfig+0x110>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a1a      	ldr	r2, [pc, #104]	; (8002834 <TIM_Base_SetConfig+0x15c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d00b      	beq.n	80027e8 <TIM_Base_SetConfig+0x110>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a19      	ldr	r2, [pc, #100]	; (8002838 <TIM_Base_SetConfig+0x160>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d007      	beq.n	80027e8 <TIM_Base_SetConfig+0x110>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a18      	ldr	r2, [pc, #96]	; (800283c <TIM_Base_SetConfig+0x164>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d003      	beq.n	80027e8 <TIM_Base_SetConfig+0x110>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a13      	ldr	r2, [pc, #76]	; (8002830 <TIM_Base_SetConfig+0x158>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d103      	bne.n	80027f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d105      	bne.n	800280e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f023 0201 	bic.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]
  }
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40000400 	.word	0x40000400
 8002824:	40000800 	.word	0x40000800
 8002828:	40000c00 	.word	0x40000c00
 800282c:	40013400 	.word	0x40013400
 8002830:	40015000 	.word	0x40015000
 8002834:	40014000 	.word	0x40014000
 8002838:	40014400 	.word	0x40014400
 800283c:	40014800 	.word	0x40014800

08002840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002854:	2302      	movs	r3, #2
 8002856:	e074      	b.n	8002942 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a34      	ldr	r2, [pc, #208]	; (8002950 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a33      	ldr	r2, [pc, #204]	; (8002954 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d004      	beq.n	8002896 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a31      	ldr	r2, [pc, #196]	; (8002958 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d108      	bne.n	80028a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800289c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d022      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d8:	d01d      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1f      	ldr	r2, [pc, #124]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d018      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00e      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a15      	ldr	r2, [pc, #84]	; (8002954 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d004      	beq.n	8002916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a11      	ldr	r2, [pc, #68]	; (8002958 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10c      	bne.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800291c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	4313      	orrs	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40012c00 	.word	0x40012c00
 8002954:	40013400 	.word	0x40013400
 8002958:	40015000 	.word	0x40015000
 800295c:	40000400 	.word	0x40000400
 8002960:	40000800 	.word	0x40000800
 8002964:	40000c00 	.word	0x40000c00
 8002968:	40014000 	.word	0x40014000

0800296c <memset>:
 800296c:	4402      	add	r2, r0
 800296e:	4603      	mov	r3, r0
 8002970:	4293      	cmp	r3, r2
 8002972:	d100      	bne.n	8002976 <memset+0xa>
 8002974:	4770      	bx	lr
 8002976:	f803 1b01 	strb.w	r1, [r3], #1
 800297a:	e7f9      	b.n	8002970 <memset+0x4>

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4d0d      	ldr	r5, [pc, #52]	; (80029b4 <__libc_init_array+0x38>)
 8002980:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	2600      	movs	r6, #0
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	4d0b      	ldr	r5, [pc, #44]	; (80029bc <__libc_init_array+0x40>)
 800298e:	4c0c      	ldr	r4, [pc, #48]	; (80029c0 <__libc_init_array+0x44>)
 8002990:	f000 fd52 	bl	8003438 <_init>
 8002994:	1b64      	subs	r4, r4, r5
 8002996:	10a4      	asrs	r4, r4, #2
 8002998:	2600      	movs	r6, #0
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	0800385c 	.word	0x0800385c
 80029b8:	0800385c 	.word	0x0800385c
 80029bc:	0800385c 	.word	0x0800385c
 80029c0:	08003860 	.word	0x08003860

080029c4 <sinf>:
 80029c4:	ee10 3a10 	vmov	r3, s0
 80029c8:	b507      	push	{r0, r1, r2, lr}
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <sinf+0x84>)
 80029cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029d0:	4293      	cmp	r3, r2
 80029d2:	dc07      	bgt.n	80029e4 <sinf+0x20>
 80029d4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8002a4c <sinf+0x88>
 80029d8:	2000      	movs	r0, #0
 80029da:	b003      	add	sp, #12
 80029dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80029e0:	f000 b894 	b.w	8002b0c <__kernel_sinf>
 80029e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80029e8:	db04      	blt.n	80029f4 <sinf+0x30>
 80029ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 80029ee:	b003      	add	sp, #12
 80029f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80029f4:	4668      	mov	r0, sp
 80029f6:	f000 f8d1 	bl	8002b9c <__ieee754_rem_pio2f>
 80029fa:	f000 0003 	and.w	r0, r0, #3
 80029fe:	2801      	cmp	r0, #1
 8002a00:	d00a      	beq.n	8002a18 <sinf+0x54>
 8002a02:	2802      	cmp	r0, #2
 8002a04:	d00f      	beq.n	8002a26 <sinf+0x62>
 8002a06:	b9c0      	cbnz	r0, 8002a3a <sinf+0x76>
 8002a08:	eddd 0a01 	vldr	s1, [sp, #4]
 8002a0c:	ed9d 0a00 	vldr	s0, [sp]
 8002a10:	2001      	movs	r0, #1
 8002a12:	f000 f87b 	bl	8002b0c <__kernel_sinf>
 8002a16:	e7ea      	b.n	80029ee <sinf+0x2a>
 8002a18:	eddd 0a01 	vldr	s1, [sp, #4]
 8002a1c:	ed9d 0a00 	vldr	s0, [sp]
 8002a20:	f000 f816 	bl	8002a50 <__kernel_cosf>
 8002a24:	e7e3      	b.n	80029ee <sinf+0x2a>
 8002a26:	eddd 0a01 	vldr	s1, [sp, #4]
 8002a2a:	ed9d 0a00 	vldr	s0, [sp]
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f000 f86c 	bl	8002b0c <__kernel_sinf>
 8002a34:	eeb1 0a40 	vneg.f32	s0, s0
 8002a38:	e7d9      	b.n	80029ee <sinf+0x2a>
 8002a3a:	eddd 0a01 	vldr	s1, [sp, #4]
 8002a3e:	ed9d 0a00 	vldr	s0, [sp]
 8002a42:	f000 f805 	bl	8002a50 <__kernel_cosf>
 8002a46:	e7f5      	b.n	8002a34 <sinf+0x70>
 8002a48:	3f490fd8 	.word	0x3f490fd8
 8002a4c:	00000000 	.word	0x00000000

08002a50 <__kernel_cosf>:
 8002a50:	ee10 3a10 	vmov	r3, s0
 8002a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002a5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a60:	da05      	bge.n	8002a6e <__kernel_cosf+0x1e>
 8002a62:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002a66:	ee17 2a90 	vmov	r2, s15
 8002a6a:	2a00      	cmp	r2, #0
 8002a6c:	d03b      	beq.n	8002ae6 <__kernel_cosf+0x96>
 8002a6e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002a72:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8002aec <__kernel_cosf+0x9c>
 8002a76:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8002af0 <__kernel_cosf+0xa0>
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <__kernel_cosf+0xa4>)
 8002a7c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002a80:	4293      	cmp	r3, r2
 8002a82:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8002af8 <__kernel_cosf+0xa8>
 8002a86:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002a8a:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8002afc <__kernel_cosf+0xac>
 8002a8e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002a92:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8002b00 <__kernel_cosf+0xb0>
 8002a96:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002a9a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8002b04 <__kernel_cosf+0xb4>
 8002a9e:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002aa2:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8002aa6:	ee26 6a07 	vmul.f32	s12, s12, s14
 8002aaa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002aae:	eee7 0a06 	vfma.f32	s1, s14, s12
 8002ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab6:	dc04      	bgt.n	8002ac2 <__kernel_cosf+0x72>
 8002ab8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002abc:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8002ac0:	4770      	bx	lr
 8002ac2:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <__kernel_cosf+0xb8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bfda      	itte	le
 8002ac8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8002acc:	ee07 3a10 	vmovle	s14, r3
 8002ad0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8002ad4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ad8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8002adc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002ae0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002ae4:	4770      	bx	lr
 8002ae6:	eeb0 0a66 	vmov.f32	s0, s13
 8002aea:	4770      	bx	lr
 8002aec:	ad47d74e 	.word	0xad47d74e
 8002af0:	310f74f6 	.word	0x310f74f6
 8002af4:	3e999999 	.word	0x3e999999
 8002af8:	b493f27c 	.word	0xb493f27c
 8002afc:	37d00d01 	.word	0x37d00d01
 8002b00:	bab60b61 	.word	0xbab60b61
 8002b04:	3d2aaaab 	.word	0x3d2aaaab
 8002b08:	3f480000 	.word	0x3f480000

08002b0c <__kernel_sinf>:
 8002b0c:	ee10 3a10 	vmov	r3, s0
 8002b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b14:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8002b18:	da04      	bge.n	8002b24 <__kernel_sinf+0x18>
 8002b1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002b1e:	ee17 3a90 	vmov	r3, s15
 8002b22:	b35b      	cbz	r3, 8002b7c <__kernel_sinf+0x70>
 8002b24:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002b28:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002b80 <__kernel_sinf+0x74>
 8002b2c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8002b84 <__kernel_sinf+0x78>
 8002b30:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002b34:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002b88 <__kernel_sinf+0x7c>
 8002b38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002b3c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8002b8c <__kernel_sinf+0x80>
 8002b40:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002b44:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002b90 <__kernel_sinf+0x84>
 8002b48:	ee60 6a07 	vmul.f32	s13, s0, s14
 8002b4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002b50:	b930      	cbnz	r0, 8002b60 <__kernel_sinf+0x54>
 8002b52:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8002b94 <__kernel_sinf+0x88>
 8002b56:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002b5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8002b5e:	4770      	bx	lr
 8002b60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002b64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002b68:	eee0 7a86 	vfma.f32	s15, s1, s12
 8002b6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8002b70:	eddf 7a09 	vldr	s15, [pc, #36]	; 8002b98 <__kernel_sinf+0x8c>
 8002b74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8002b78:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	2f2ec9d3 	.word	0x2f2ec9d3
 8002b84:	b2d72f34 	.word	0xb2d72f34
 8002b88:	3638ef1b 	.word	0x3638ef1b
 8002b8c:	b9500d01 	.word	0xb9500d01
 8002b90:	3c088889 	.word	0x3c088889
 8002b94:	be2aaaab 	.word	0xbe2aaaab
 8002b98:	3e2aaaab 	.word	0x3e2aaaab

08002b9c <__ieee754_rem_pio2f>:
 8002b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9e:	ee10 6a10 	vmov	r6, s0
 8002ba2:	4b86      	ldr	r3, [pc, #536]	; (8002dbc <__ieee754_rem_pio2f+0x220>)
 8002ba4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8002ba8:	429d      	cmp	r5, r3
 8002baa:	b087      	sub	sp, #28
 8002bac:	4604      	mov	r4, r0
 8002bae:	dc05      	bgt.n	8002bbc <__ieee754_rem_pio2f+0x20>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	ed80 0a00 	vstr	s0, [r0]
 8002bb6:	6043      	str	r3, [r0, #4]
 8002bb8:	2000      	movs	r0, #0
 8002bba:	e020      	b.n	8002bfe <__ieee754_rem_pio2f+0x62>
 8002bbc:	4b80      	ldr	r3, [pc, #512]	; (8002dc0 <__ieee754_rem_pio2f+0x224>)
 8002bbe:	429d      	cmp	r5, r3
 8002bc0:	dc38      	bgt.n	8002c34 <__ieee754_rem_pio2f+0x98>
 8002bc2:	2e00      	cmp	r6, #0
 8002bc4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002dc4 <__ieee754_rem_pio2f+0x228>
 8002bc8:	4b7f      	ldr	r3, [pc, #508]	; (8002dc8 <__ieee754_rem_pio2f+0x22c>)
 8002bca:	f025 050f 	bic.w	r5, r5, #15
 8002bce:	dd18      	ble.n	8002c02 <__ieee754_rem_pio2f+0x66>
 8002bd0:	429d      	cmp	r5, r3
 8002bd2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8002bd6:	bf09      	itett	eq
 8002bd8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8002dcc <__ieee754_rem_pio2f+0x230>
 8002bdc:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8002dd0 <__ieee754_rem_pio2f+0x234>
 8002be0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8002be4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8002dd4 <__ieee754_rem_pio2f+0x238>
 8002be8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8002bec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002bf0:	edc0 6a00 	vstr	s13, [r0]
 8002bf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bf8:	edc0 7a01 	vstr	s15, [r0, #4]
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	b007      	add	sp, #28
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c02:	429d      	cmp	r5, r3
 8002c04:	ee70 7a07 	vadd.f32	s15, s0, s14
 8002c08:	bf09      	itett	eq
 8002c0a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8002dcc <__ieee754_rem_pio2f+0x230>
 8002c0e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8002dd0 <__ieee754_rem_pio2f+0x234>
 8002c12:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002c16:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8002dd4 <__ieee754_rem_pio2f+0x238>
 8002c1a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002c1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c22:	edc0 6a00 	vstr	s13, [r0]
 8002c26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c2a:	edc0 7a01 	vstr	s15, [r0, #4]
 8002c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c32:	e7e4      	b.n	8002bfe <__ieee754_rem_pio2f+0x62>
 8002c34:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <__ieee754_rem_pio2f+0x23c>)
 8002c36:	429d      	cmp	r5, r3
 8002c38:	dc71      	bgt.n	8002d1e <__ieee754_rem_pio2f+0x182>
 8002c3a:	f000 f8db 	bl	8002df4 <fabsf>
 8002c3e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002ddc <__ieee754_rem_pio2f+0x240>
 8002c42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002c46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002c4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c52:	ee17 0a90 	vmov	r0, s15
 8002c56:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8002dc4 <__ieee754_rem_pio2f+0x228>
 8002c5a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8002c5e:	281f      	cmp	r0, #31
 8002c60:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8002dd0 <__ieee754_rem_pio2f+0x234>
 8002c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c68:	eeb1 6a47 	vneg.f32	s12, s14
 8002c6c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002c70:	ee16 2a90 	vmov	r2, s13
 8002c74:	dc1c      	bgt.n	8002cb0 <__ieee754_rem_pio2f+0x114>
 8002c76:	495a      	ldr	r1, [pc, #360]	; (8002de0 <__ieee754_rem_pio2f+0x244>)
 8002c78:	1e47      	subs	r7, r0, #1
 8002c7a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8002c7e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8002c82:	428b      	cmp	r3, r1
 8002c84:	d014      	beq.n	8002cb0 <__ieee754_rem_pio2f+0x114>
 8002c86:	6022      	str	r2, [r4, #0]
 8002c88:	ed94 7a00 	vldr	s14, [r4]
 8002c8c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002c90:	2e00      	cmp	r6, #0
 8002c92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002c96:	ed84 0a01 	vstr	s0, [r4, #4]
 8002c9a:	dab0      	bge.n	8002bfe <__ieee754_rem_pio2f+0x62>
 8002c9c:	eeb1 7a47 	vneg.f32	s14, s14
 8002ca0:	eeb1 0a40 	vneg.f32	s0, s0
 8002ca4:	ed84 7a00 	vstr	s14, [r4]
 8002ca8:	ed84 0a01 	vstr	s0, [r4, #4]
 8002cac:	4240      	negs	r0, r0
 8002cae:	e7a6      	b.n	8002bfe <__ieee754_rem_pio2f+0x62>
 8002cb0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8002cb4:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8002cb8:	2908      	cmp	r1, #8
 8002cba:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8002cbe:	dde2      	ble.n	8002c86 <__ieee754_rem_pio2f+0xea>
 8002cc0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8002dcc <__ieee754_rem_pio2f+0x230>
 8002cc4:	eef0 6a40 	vmov.f32	s13, s0
 8002cc8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8002ccc:	ee70 7a66 	vsub.f32	s15, s0, s13
 8002cd0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002cd4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002dd4 <__ieee754_rem_pio2f+0x238>
 8002cd8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8002cdc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8002ce0:	ee15 2a90 	vmov	r2, s11
 8002ce4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8002ce8:	1a5b      	subs	r3, r3, r1
 8002cea:	2b19      	cmp	r3, #25
 8002cec:	dc04      	bgt.n	8002cf8 <__ieee754_rem_pio2f+0x15c>
 8002cee:	edc4 5a00 	vstr	s11, [r4]
 8002cf2:	eeb0 0a66 	vmov.f32	s0, s13
 8002cf6:	e7c7      	b.n	8002c88 <__ieee754_rem_pio2f+0xec>
 8002cf8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8002de4 <__ieee754_rem_pio2f+0x248>
 8002cfc:	eeb0 0a66 	vmov.f32	s0, s13
 8002d00:	eea6 0a25 	vfma.f32	s0, s12, s11
 8002d04:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8002d08:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002de8 <__ieee754_rem_pio2f+0x24c>
 8002d0c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002d10:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8002d14:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002d18:	ed84 7a00 	vstr	s14, [r4]
 8002d1c:	e7b4      	b.n	8002c88 <__ieee754_rem_pio2f+0xec>
 8002d1e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8002d22:	db06      	blt.n	8002d32 <__ieee754_rem_pio2f+0x196>
 8002d24:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002d28:	edc0 7a01 	vstr	s15, [r0, #4]
 8002d2c:	edc0 7a00 	vstr	s15, [r0]
 8002d30:	e742      	b.n	8002bb8 <__ieee754_rem_pio2f+0x1c>
 8002d32:	15ea      	asrs	r2, r5, #23
 8002d34:	3a86      	subs	r2, #134	; 0x86
 8002d36:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8002d3a:	ee07 3a90 	vmov	s15, r3
 8002d3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002d42:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002dec <__ieee754_rem_pio2f+0x250>
 8002d46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d4e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8002d52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d56:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002d5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d62:	ed8d 7a04 	vstr	s14, [sp, #16]
 8002d66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d72:	edcd 7a05 	vstr	s15, [sp, #20]
 8002d76:	d11e      	bne.n	8002db6 <__ieee754_rem_pio2f+0x21a>
 8002d78:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	bf14      	ite	ne
 8002d82:	2302      	movne	r3, #2
 8002d84:	2301      	moveq	r3, #1
 8002d86:	491a      	ldr	r1, [pc, #104]	; (8002df0 <__ieee754_rem_pio2f+0x254>)
 8002d88:	9101      	str	r1, [sp, #4]
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	9100      	str	r1, [sp, #0]
 8002d8e:	a803      	add	r0, sp, #12
 8002d90:	4621      	mov	r1, r4
 8002d92:	f000 f837 	bl	8002e04 <__kernel_rem_pio2f>
 8002d96:	2e00      	cmp	r6, #0
 8002d98:	f6bf af31 	bge.w	8002bfe <__ieee754_rem_pio2f+0x62>
 8002d9c:	edd4 7a00 	vldr	s15, [r4]
 8002da0:	eef1 7a67 	vneg.f32	s15, s15
 8002da4:	edc4 7a00 	vstr	s15, [r4]
 8002da8:	edd4 7a01 	vldr	s15, [r4, #4]
 8002dac:	eef1 7a67 	vneg.f32	s15, s15
 8002db0:	edc4 7a01 	vstr	s15, [r4, #4]
 8002db4:	e77a      	b.n	8002cac <__ieee754_rem_pio2f+0x110>
 8002db6:	2303      	movs	r3, #3
 8002db8:	e7e5      	b.n	8002d86 <__ieee754_rem_pio2f+0x1ea>
 8002dba:	bf00      	nop
 8002dbc:	3f490fd8 	.word	0x3f490fd8
 8002dc0:	4016cbe3 	.word	0x4016cbe3
 8002dc4:	3fc90f80 	.word	0x3fc90f80
 8002dc8:	3fc90fd0 	.word	0x3fc90fd0
 8002dcc:	37354400 	.word	0x37354400
 8002dd0:	37354443 	.word	0x37354443
 8002dd4:	2e85a308 	.word	0x2e85a308
 8002dd8:	43490f80 	.word	0x43490f80
 8002ddc:	3f22f984 	.word	0x3f22f984
 8002de0:	0800348c 	.word	0x0800348c
 8002de4:	2e85a300 	.word	0x2e85a300
 8002de8:	248d3132 	.word	0x248d3132
 8002dec:	43800000 	.word	0x43800000
 8002df0:	0800350c 	.word	0x0800350c

08002df4 <fabsf>:
 8002df4:	ee10 3a10 	vmov	r3, s0
 8002df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dfc:	ee00 3a10 	vmov	s0, r3
 8002e00:	4770      	bx	lr
	...

08002e04 <__kernel_rem_pio2f>:
 8002e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e08:	ed2d 8b04 	vpush	{d8-d9}
 8002e0c:	b0d9      	sub	sp, #356	; 0x164
 8002e0e:	4688      	mov	r8, r1
 8002e10:	9002      	str	r0, [sp, #8]
 8002e12:	49b8      	ldr	r1, [pc, #736]	; (80030f4 <__kernel_rem_pio2f+0x2f0>)
 8002e14:	9866      	ldr	r0, [sp, #408]	; 0x198
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8002e1c:	9901      	ldr	r1, [sp, #4]
 8002e1e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8002e20:	f101 3bff 	add.w	fp, r1, #4294967295
 8002e24:	1d11      	adds	r1, r2, #4
 8002e26:	db25      	blt.n	8002e74 <__kernel_rem_pio2f+0x70>
 8002e28:	1ed0      	subs	r0, r2, #3
 8002e2a:	bf48      	it	mi
 8002e2c:	1d10      	addmi	r0, r2, #4
 8002e2e:	10c0      	asrs	r0, r0, #3
 8002e30:	1c45      	adds	r5, r0, #1
 8002e32:	00e9      	lsls	r1, r5, #3
 8002e34:	eba0 070b 	sub.w	r7, r0, fp
 8002e38:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8003104 <__kernel_rem_pio2f+0x300>
 8002e3c:	9103      	str	r1, [sp, #12]
 8002e3e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8002e42:	eb0a 0c0b 	add.w	ip, sl, fp
 8002e46:	ae1c      	add	r6, sp, #112	; 0x70
 8002e48:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8002e4c:	2400      	movs	r4, #0
 8002e4e:	4564      	cmp	r4, ip
 8002e50:	dd12      	ble.n	8002e78 <__kernel_rem_pio2f+0x74>
 8002e52:	9901      	ldr	r1, [sp, #4]
 8002e54:	ac1c      	add	r4, sp, #112	; 0x70
 8002e56:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8002e5a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8002e5e:	f04f 0c00 	mov.w	ip, #0
 8002e62:	45d4      	cmp	ip, sl
 8002e64:	dc27      	bgt.n	8002eb6 <__kernel_rem_pio2f+0xb2>
 8002e66:	f8dd e008 	ldr.w	lr, [sp, #8]
 8002e6a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8003104 <__kernel_rem_pio2f+0x300>
 8002e6e:	4627      	mov	r7, r4
 8002e70:	2600      	movs	r6, #0
 8002e72:	e016      	b.n	8002ea2 <__kernel_rem_pio2f+0x9e>
 8002e74:	2000      	movs	r0, #0
 8002e76:	e7db      	b.n	8002e30 <__kernel_rem_pio2f+0x2c>
 8002e78:	42e7      	cmn	r7, r4
 8002e7a:	bf5d      	ittte	pl
 8002e7c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8002e80:	ee07 1a90 	vmovpl	s15, r1
 8002e84:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8002e88:	eef0 7a47 	vmovmi.f32	s15, s14
 8002e8c:	ece6 7a01 	vstmia	r6!, {s15}
 8002e90:	3401      	adds	r4, #1
 8002e92:	e7dc      	b.n	8002e4e <__kernel_rem_pio2f+0x4a>
 8002e94:	ecfe 6a01 	vldmia	lr!, {s13}
 8002e98:	ed97 7a00 	vldr	s14, [r7]
 8002e9c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8002ea0:	3601      	adds	r6, #1
 8002ea2:	455e      	cmp	r6, fp
 8002ea4:	f1a7 0704 	sub.w	r7, r7, #4
 8002ea8:	ddf4      	ble.n	8002e94 <__kernel_rem_pio2f+0x90>
 8002eaa:	ece9 7a01 	vstmia	r9!, {s15}
 8002eae:	f10c 0c01 	add.w	ip, ip, #1
 8002eb2:	3404      	adds	r4, #4
 8002eb4:	e7d5      	b.n	8002e62 <__kernel_rem_pio2f+0x5e>
 8002eb6:	a908      	add	r1, sp, #32
 8002eb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8002ebc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002ec0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8003100 <__kernel_rem_pio2f+0x2fc>
 8002ec4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80030fc <__kernel_rem_pio2f+0x2f8>
 8002ec8:	9105      	str	r1, [sp, #20]
 8002eca:	9304      	str	r3, [sp, #16]
 8002ecc:	4656      	mov	r6, sl
 8002ece:	00b3      	lsls	r3, r6, #2
 8002ed0:	9306      	str	r3, [sp, #24]
 8002ed2:	ab58      	add	r3, sp, #352	; 0x160
 8002ed4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8002ed8:	ac08      	add	r4, sp, #32
 8002eda:	ab44      	add	r3, sp, #272	; 0x110
 8002edc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8002ee0:	46a4      	mov	ip, r4
 8002ee2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8002ee6:	4637      	mov	r7, r6
 8002ee8:	2f00      	cmp	r7, #0
 8002eea:	f1a0 0004 	sub.w	r0, r0, #4
 8002eee:	dc4a      	bgt.n	8002f86 <__kernel_rem_pio2f+0x182>
 8002ef0:	4628      	mov	r0, r5
 8002ef2:	9207      	str	r2, [sp, #28]
 8002ef4:	f000 f9f8 	bl	80032e8 <scalbnf>
 8002ef8:	eeb0 8a40 	vmov.f32	s16, s0
 8002efc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8002f00:	ee28 0a00 	vmul.f32	s0, s16, s0
 8002f04:	f000 fa56 	bl	80033b4 <floorf>
 8002f08:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8002f0c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8002f10:	2d00      	cmp	r5, #0
 8002f12:	9a07      	ldr	r2, [sp, #28]
 8002f14:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002f18:	ee17 9a90 	vmov	r9, s15
 8002f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f20:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002f24:	dd41      	ble.n	8002faa <__kernel_rem_pio2f+0x1a6>
 8002f26:	f106 3cff 	add.w	ip, r6, #4294967295
 8002f2a:	ab08      	add	r3, sp, #32
 8002f2c:	f1c5 0e08 	rsb	lr, r5, #8
 8002f30:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8002f34:	fa47 f00e 	asr.w	r0, r7, lr
 8002f38:	4481      	add	r9, r0
 8002f3a:	fa00 f00e 	lsl.w	r0, r0, lr
 8002f3e:	1a3f      	subs	r7, r7, r0
 8002f40:	f1c5 0007 	rsb	r0, r5, #7
 8002f44:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8002f48:	4107      	asrs	r7, r0
 8002f4a:	2f00      	cmp	r7, #0
 8002f4c:	dd3c      	ble.n	8002fc8 <__kernel_rem_pio2f+0x1c4>
 8002f4e:	f04f 0e00 	mov.w	lr, #0
 8002f52:	f109 0901 	add.w	r9, r9, #1
 8002f56:	4671      	mov	r1, lr
 8002f58:	4576      	cmp	r6, lr
 8002f5a:	dc67      	bgt.n	800302c <__kernel_rem_pio2f+0x228>
 8002f5c:	2d00      	cmp	r5, #0
 8002f5e:	dd03      	ble.n	8002f68 <__kernel_rem_pio2f+0x164>
 8002f60:	2d01      	cmp	r5, #1
 8002f62:	d074      	beq.n	800304e <__kernel_rem_pio2f+0x24a>
 8002f64:	2d02      	cmp	r5, #2
 8002f66:	d07b      	beq.n	8003060 <__kernel_rem_pio2f+0x25c>
 8002f68:	2f02      	cmp	r7, #2
 8002f6a:	d12d      	bne.n	8002fc8 <__kernel_rem_pio2f+0x1c4>
 8002f6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002f70:	ee30 8a48 	vsub.f32	s16, s0, s16
 8002f74:	b341      	cbz	r1, 8002fc8 <__kernel_rem_pio2f+0x1c4>
 8002f76:	4628      	mov	r0, r5
 8002f78:	9207      	str	r2, [sp, #28]
 8002f7a:	f000 f9b5 	bl	80032e8 <scalbnf>
 8002f7e:	9a07      	ldr	r2, [sp, #28]
 8002f80:	ee38 8a40 	vsub.f32	s16, s16, s0
 8002f84:	e020      	b.n	8002fc8 <__kernel_rem_pio2f+0x1c4>
 8002f86:	ee60 7a28 	vmul.f32	s15, s0, s17
 8002f8a:	3f01      	subs	r7, #1
 8002f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f94:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8002f98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002f9c:	ecac 0a01 	vstmia	ip!, {s0}
 8002fa0:	ed90 0a00 	vldr	s0, [r0]
 8002fa4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002fa8:	e79e      	b.n	8002ee8 <__kernel_rem_pio2f+0xe4>
 8002faa:	d105      	bne.n	8002fb8 <__kernel_rem_pio2f+0x1b4>
 8002fac:	1e70      	subs	r0, r6, #1
 8002fae:	ab08      	add	r3, sp, #32
 8002fb0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8002fb4:	11ff      	asrs	r7, r7, #7
 8002fb6:	e7c8      	b.n	8002f4a <__kernel_rem_pio2f+0x146>
 8002fb8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002fbc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc4:	da30      	bge.n	8003028 <__kernel_rem_pio2f+0x224>
 8002fc6:	2700      	movs	r7, #0
 8002fc8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8002fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd0:	f040 809a 	bne.w	8003108 <__kernel_rem_pio2f+0x304>
 8002fd4:	1e74      	subs	r4, r6, #1
 8002fd6:	46a4      	mov	ip, r4
 8002fd8:	2100      	movs	r1, #0
 8002fda:	45d4      	cmp	ip, sl
 8002fdc:	da47      	bge.n	800306e <__kernel_rem_pio2f+0x26a>
 8002fde:	2900      	cmp	r1, #0
 8002fe0:	d063      	beq.n	80030aa <__kernel_rem_pio2f+0x2a6>
 8002fe2:	ab08      	add	r3, sp, #32
 8002fe4:	3d08      	subs	r5, #8
 8002fe6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d07f      	beq.n	80030ee <__kernel_rem_pio2f+0x2ea>
 8002fee:	4628      	mov	r0, r5
 8002ff0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002ff4:	f000 f978 	bl	80032e8 <scalbnf>
 8002ff8:	1c63      	adds	r3, r4, #1
 8002ffa:	aa44      	add	r2, sp, #272	; 0x110
 8002ffc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003100 <__kernel_rem_pio2f+0x2fc>
 8003000:	0099      	lsls	r1, r3, #2
 8003002:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003006:	4623      	mov	r3, r4
 8003008:	2b00      	cmp	r3, #0
 800300a:	f280 80ad 	bge.w	8003168 <__kernel_rem_pio2f+0x364>
 800300e:	4623      	mov	r3, r4
 8003010:	2b00      	cmp	r3, #0
 8003012:	f2c0 80cb 	blt.w	80031ac <__kernel_rem_pio2f+0x3a8>
 8003016:	aa44      	add	r2, sp, #272	; 0x110
 8003018:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800301c:	4e36      	ldr	r6, [pc, #216]	; (80030f8 <__kernel_rem_pio2f+0x2f4>)
 800301e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8003104 <__kernel_rem_pio2f+0x300>
 8003022:	2000      	movs	r0, #0
 8003024:	1ae2      	subs	r2, r4, r3
 8003026:	e0b6      	b.n	8003196 <__kernel_rem_pio2f+0x392>
 8003028:	2702      	movs	r7, #2
 800302a:	e790      	b.n	8002f4e <__kernel_rem_pio2f+0x14a>
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	b949      	cbnz	r1, 8003044 <__kernel_rem_pio2f+0x240>
 8003030:	b118      	cbz	r0, 800303a <__kernel_rem_pio2f+0x236>
 8003032:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8003036:	6020      	str	r0, [r4, #0]
 8003038:	2001      	movs	r0, #1
 800303a:	f10e 0e01 	add.w	lr, lr, #1
 800303e:	3404      	adds	r4, #4
 8003040:	4601      	mov	r1, r0
 8003042:	e789      	b.n	8002f58 <__kernel_rem_pio2f+0x154>
 8003044:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8003048:	6020      	str	r0, [r4, #0]
 800304a:	4608      	mov	r0, r1
 800304c:	e7f5      	b.n	800303a <__kernel_rem_pio2f+0x236>
 800304e:	1e74      	subs	r4, r6, #1
 8003050:	ab08      	add	r3, sp, #32
 8003052:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003056:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800305a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800305e:	e783      	b.n	8002f68 <__kernel_rem_pio2f+0x164>
 8003060:	1e74      	subs	r4, r6, #1
 8003062:	ab08      	add	r3, sp, #32
 8003064:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003068:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800306c:	e7f5      	b.n	800305a <__kernel_rem_pio2f+0x256>
 800306e:	ab08      	add	r3, sp, #32
 8003070:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8003074:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003078:	4301      	orrs	r1, r0
 800307a:	e7ae      	b.n	8002fda <__kernel_rem_pio2f+0x1d6>
 800307c:	3001      	adds	r0, #1
 800307e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8003082:	2f00      	cmp	r7, #0
 8003084:	d0fa      	beq.n	800307c <__kernel_rem_pio2f+0x278>
 8003086:	9b06      	ldr	r3, [sp, #24]
 8003088:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800308c:	eb0d 0403 	add.w	r4, sp, r3
 8003090:	9b01      	ldr	r3, [sp, #4]
 8003092:	18f7      	adds	r7, r6, r3
 8003094:	ab1c      	add	r3, sp, #112	; 0x70
 8003096:	f106 0c01 	add.w	ip, r6, #1
 800309a:	3c4c      	subs	r4, #76	; 0x4c
 800309c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80030a0:	4430      	add	r0, r6
 80030a2:	4560      	cmp	r0, ip
 80030a4:	da04      	bge.n	80030b0 <__kernel_rem_pio2f+0x2ac>
 80030a6:	4606      	mov	r6, r0
 80030a8:	e711      	b.n	8002ece <__kernel_rem_pio2f+0xca>
 80030aa:	9c05      	ldr	r4, [sp, #20]
 80030ac:	2001      	movs	r0, #1
 80030ae:	e7e6      	b.n	800307e <__kernel_rem_pio2f+0x27a>
 80030b0:	9b04      	ldr	r3, [sp, #16]
 80030b2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80030b6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80030ba:	9306      	str	r3, [sp, #24]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c4:	2600      	movs	r6, #0
 80030c6:	ece7 7a01 	vstmia	r7!, {s15}
 80030ca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8003104 <__kernel_rem_pio2f+0x300>
 80030ce:	46b9      	mov	r9, r7
 80030d0:	455e      	cmp	r6, fp
 80030d2:	dd04      	ble.n	80030de <__kernel_rem_pio2f+0x2da>
 80030d4:	ece4 7a01 	vstmia	r4!, {s15}
 80030d8:	f10c 0c01 	add.w	ip, ip, #1
 80030dc:	e7e1      	b.n	80030a2 <__kernel_rem_pio2f+0x29e>
 80030de:	ecfe 6a01 	vldmia	lr!, {s13}
 80030e2:	ed39 7a01 	vldmdb	r9!, {s14}
 80030e6:	3601      	adds	r6, #1
 80030e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80030ec:	e7f0      	b.n	80030d0 <__kernel_rem_pio2f+0x2cc>
 80030ee:	3c01      	subs	r4, #1
 80030f0:	e777      	b.n	8002fe2 <__kernel_rem_pio2f+0x1de>
 80030f2:	bf00      	nop
 80030f4:	08003850 	.word	0x08003850
 80030f8:	08003824 	.word	0x08003824
 80030fc:	43800000 	.word	0x43800000
 8003100:	3b800000 	.word	0x3b800000
 8003104:	00000000 	.word	0x00000000
 8003108:	9b03      	ldr	r3, [sp, #12]
 800310a:	eeb0 0a48 	vmov.f32	s0, s16
 800310e:	1a98      	subs	r0, r3, r2
 8003110:	f000 f8ea 	bl	80032e8 <scalbnf>
 8003114:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80030fc <__kernel_rem_pio2f+0x2f8>
 8003118:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800311c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003120:	db19      	blt.n	8003156 <__kernel_rem_pio2f+0x352>
 8003122:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8003100 <__kernel_rem_pio2f+0x2fc>
 8003126:	ee60 7a27 	vmul.f32	s15, s0, s15
 800312a:	aa08      	add	r2, sp, #32
 800312c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003130:	1c74      	adds	r4, r6, #1
 8003132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003136:	3508      	adds	r5, #8
 8003138:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800313c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003140:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003144:	ee10 3a10 	vmov	r3, s0
 8003148:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800314c:	ee17 3a90 	vmov	r3, s15
 8003150:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003154:	e74b      	b.n	8002fee <__kernel_rem_pio2f+0x1ea>
 8003156:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800315a:	aa08      	add	r2, sp, #32
 800315c:	ee10 3a10 	vmov	r3, s0
 8003160:	4634      	mov	r4, r6
 8003162:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8003166:	e742      	b.n	8002fee <__kernel_rem_pio2f+0x1ea>
 8003168:	a808      	add	r0, sp, #32
 800316a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800316e:	9001      	str	r0, [sp, #4]
 8003170:	ee07 0a90 	vmov	s15, r0
 8003174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003178:	3b01      	subs	r3, #1
 800317a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800317e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003182:	ed62 7a01 	vstmdb	r2!, {s15}
 8003186:	e73f      	b.n	8003008 <__kernel_rem_pio2f+0x204>
 8003188:	ecf6 6a01 	vldmia	r6!, {s13}
 800318c:	ecb5 7a01 	vldmia	r5!, {s14}
 8003190:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003194:	3001      	adds	r0, #1
 8003196:	4550      	cmp	r0, sl
 8003198:	dc01      	bgt.n	800319e <__kernel_rem_pio2f+0x39a>
 800319a:	4290      	cmp	r0, r2
 800319c:	ddf4      	ble.n	8003188 <__kernel_rem_pio2f+0x384>
 800319e:	a858      	add	r0, sp, #352	; 0x160
 80031a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80031a4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 80031a8:	3b01      	subs	r3, #1
 80031aa:	e731      	b.n	8003010 <__kernel_rem_pio2f+0x20c>
 80031ac:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	dc09      	bgt.n	80031c6 <__kernel_rem_pio2f+0x3c2>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	dc2b      	bgt.n	800320e <__kernel_rem_pio2f+0x40a>
 80031b6:	d044      	beq.n	8003242 <__kernel_rem_pio2f+0x43e>
 80031b8:	f009 0007 	and.w	r0, r9, #7
 80031bc:	b059      	add	sp, #356	; 0x164
 80031be:	ecbd 8b04 	vpop	{d8-d9}
 80031c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031c6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d1f5      	bne.n	80031b8 <__kernel_rem_pio2f+0x3b4>
 80031cc:	aa30      	add	r2, sp, #192	; 0xc0
 80031ce:	1f0b      	subs	r3, r1, #4
 80031d0:	4413      	add	r3, r2
 80031d2:	461a      	mov	r2, r3
 80031d4:	4620      	mov	r0, r4
 80031d6:	2800      	cmp	r0, #0
 80031d8:	f1a2 0204 	sub.w	r2, r2, #4
 80031dc:	dc52      	bgt.n	8003284 <__kernel_rem_pio2f+0x480>
 80031de:	4622      	mov	r2, r4
 80031e0:	2a01      	cmp	r2, #1
 80031e2:	f1a3 0304 	sub.w	r3, r3, #4
 80031e6:	dc5d      	bgt.n	80032a4 <__kernel_rem_pio2f+0x4a0>
 80031e8:	ab30      	add	r3, sp, #192	; 0xc0
 80031ea:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8003104 <__kernel_rem_pio2f+0x300>
 80031ee:	440b      	add	r3, r1
 80031f0:	2c01      	cmp	r4, #1
 80031f2:	dc67      	bgt.n	80032c4 <__kernel_rem_pio2f+0x4c0>
 80031f4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80031f8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80031fc:	2f00      	cmp	r7, #0
 80031fe:	d167      	bne.n	80032d0 <__kernel_rem_pio2f+0x4cc>
 8003200:	edc8 6a00 	vstr	s13, [r8]
 8003204:	ed88 7a01 	vstr	s14, [r8, #4]
 8003208:	edc8 7a02 	vstr	s15, [r8, #8]
 800320c:	e7d4      	b.n	80031b8 <__kernel_rem_pio2f+0x3b4>
 800320e:	ab30      	add	r3, sp, #192	; 0xc0
 8003210:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8003104 <__kernel_rem_pio2f+0x300>
 8003214:	440b      	add	r3, r1
 8003216:	4622      	mov	r2, r4
 8003218:	2a00      	cmp	r2, #0
 800321a:	da24      	bge.n	8003266 <__kernel_rem_pio2f+0x462>
 800321c:	b34f      	cbz	r7, 8003272 <__kernel_rem_pio2f+0x46e>
 800321e:	eef1 7a47 	vneg.f32	s15, s14
 8003222:	edc8 7a00 	vstr	s15, [r8]
 8003226:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800322a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800322e:	aa31      	add	r2, sp, #196	; 0xc4
 8003230:	2301      	movs	r3, #1
 8003232:	429c      	cmp	r4, r3
 8003234:	da20      	bge.n	8003278 <__kernel_rem_pio2f+0x474>
 8003236:	b10f      	cbz	r7, 800323c <__kernel_rem_pio2f+0x438>
 8003238:	eef1 7a67 	vneg.f32	s15, s15
 800323c:	edc8 7a01 	vstr	s15, [r8, #4]
 8003240:	e7ba      	b.n	80031b8 <__kernel_rem_pio2f+0x3b4>
 8003242:	ab30      	add	r3, sp, #192	; 0xc0
 8003244:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8003104 <__kernel_rem_pio2f+0x300>
 8003248:	440b      	add	r3, r1
 800324a:	2c00      	cmp	r4, #0
 800324c:	da05      	bge.n	800325a <__kernel_rem_pio2f+0x456>
 800324e:	b10f      	cbz	r7, 8003254 <__kernel_rem_pio2f+0x450>
 8003250:	eef1 7a67 	vneg.f32	s15, s15
 8003254:	edc8 7a00 	vstr	s15, [r8]
 8003258:	e7ae      	b.n	80031b8 <__kernel_rem_pio2f+0x3b4>
 800325a:	ed33 7a01 	vldmdb	r3!, {s14}
 800325e:	3c01      	subs	r4, #1
 8003260:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003264:	e7f1      	b.n	800324a <__kernel_rem_pio2f+0x446>
 8003266:	ed73 7a01 	vldmdb	r3!, {s15}
 800326a:	3a01      	subs	r2, #1
 800326c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003270:	e7d2      	b.n	8003218 <__kernel_rem_pio2f+0x414>
 8003272:	eef0 7a47 	vmov.f32	s15, s14
 8003276:	e7d4      	b.n	8003222 <__kernel_rem_pio2f+0x41e>
 8003278:	ecb2 7a01 	vldmia	r2!, {s14}
 800327c:	3301      	adds	r3, #1
 800327e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003282:	e7d6      	b.n	8003232 <__kernel_rem_pio2f+0x42e>
 8003284:	edd2 7a00 	vldr	s15, [r2]
 8003288:	edd2 6a01 	vldr	s13, [r2, #4]
 800328c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003290:	3801      	subs	r0, #1
 8003292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003296:	ed82 7a00 	vstr	s14, [r2]
 800329a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800329e:	edc2 7a01 	vstr	s15, [r2, #4]
 80032a2:	e798      	b.n	80031d6 <__kernel_rem_pio2f+0x3d2>
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80032ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80032b0:	3a01      	subs	r2, #1
 80032b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032b6:	ed83 7a00 	vstr	s14, [r3]
 80032ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032be:	edc3 7a01 	vstr	s15, [r3, #4]
 80032c2:	e78d      	b.n	80031e0 <__kernel_rem_pio2f+0x3dc>
 80032c4:	ed33 7a01 	vldmdb	r3!, {s14}
 80032c8:	3c01      	subs	r4, #1
 80032ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032ce:	e78f      	b.n	80031f0 <__kernel_rem_pio2f+0x3ec>
 80032d0:	eef1 6a66 	vneg.f32	s13, s13
 80032d4:	eeb1 7a47 	vneg.f32	s14, s14
 80032d8:	edc8 6a00 	vstr	s13, [r8]
 80032dc:	ed88 7a01 	vstr	s14, [r8, #4]
 80032e0:	eef1 7a67 	vneg.f32	s15, s15
 80032e4:	e790      	b.n	8003208 <__kernel_rem_pio2f+0x404>
 80032e6:	bf00      	nop

080032e8 <scalbnf>:
 80032e8:	ee10 3a10 	vmov	r3, s0
 80032ec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80032f0:	d02b      	beq.n	800334a <scalbnf+0x62>
 80032f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80032f6:	d302      	bcc.n	80032fe <scalbnf+0x16>
 80032f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80032fc:	4770      	bx	lr
 80032fe:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8003302:	d123      	bne.n	800334c <scalbnf+0x64>
 8003304:	4b24      	ldr	r3, [pc, #144]	; (8003398 <scalbnf+0xb0>)
 8003306:	eddf 7a25 	vldr	s15, [pc, #148]	; 800339c <scalbnf+0xb4>
 800330a:	4298      	cmp	r0, r3
 800330c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003310:	db17      	blt.n	8003342 <scalbnf+0x5a>
 8003312:	ee10 3a10 	vmov	r3, s0
 8003316:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800331a:	3a19      	subs	r2, #25
 800331c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8003320:	4288      	cmp	r0, r1
 8003322:	dd15      	ble.n	8003350 <scalbnf+0x68>
 8003324:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80033a0 <scalbnf+0xb8>
 8003328:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80033a4 <scalbnf+0xbc>
 800332c:	ee10 3a10 	vmov	r3, s0
 8003330:	eeb0 7a67 	vmov.f32	s14, s15
 8003334:	2b00      	cmp	r3, #0
 8003336:	bfb8      	it	lt
 8003338:	eef0 7a66 	vmovlt.f32	s15, s13
 800333c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003340:	4770      	bx	lr
 8003342:	eddf 7a19 	vldr	s15, [pc, #100]	; 80033a8 <scalbnf+0xc0>
 8003346:	ee27 0a80 	vmul.f32	s0, s15, s0
 800334a:	4770      	bx	lr
 800334c:	0dd2      	lsrs	r2, r2, #23
 800334e:	e7e5      	b.n	800331c <scalbnf+0x34>
 8003350:	4410      	add	r0, r2
 8003352:	28fe      	cmp	r0, #254	; 0xfe
 8003354:	dce6      	bgt.n	8003324 <scalbnf+0x3c>
 8003356:	2800      	cmp	r0, #0
 8003358:	dd06      	ble.n	8003368 <scalbnf+0x80>
 800335a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800335e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8003362:	ee00 3a10 	vmov	s0, r3
 8003366:	4770      	bx	lr
 8003368:	f110 0f16 	cmn.w	r0, #22
 800336c:	da09      	bge.n	8003382 <scalbnf+0x9a>
 800336e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80033a8 <scalbnf+0xc0>
 8003372:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80033ac <scalbnf+0xc4>
 8003376:	ee10 3a10 	vmov	r3, s0
 800337a:	eeb0 7a67 	vmov.f32	s14, s15
 800337e:	2b00      	cmp	r3, #0
 8003380:	e7d9      	b.n	8003336 <scalbnf+0x4e>
 8003382:	3019      	adds	r0, #25
 8003384:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003388:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800338c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80033b0 <scalbnf+0xc8>
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	e7d7      	b.n	8003346 <scalbnf+0x5e>
 8003396:	bf00      	nop
 8003398:	ffff3cb0 	.word	0xffff3cb0
 800339c:	4c000000 	.word	0x4c000000
 80033a0:	7149f2ca 	.word	0x7149f2ca
 80033a4:	f149f2ca 	.word	0xf149f2ca
 80033a8:	0da24260 	.word	0x0da24260
 80033ac:	8da24260 	.word	0x8da24260
 80033b0:	33000000 	.word	0x33000000

080033b4 <floorf>:
 80033b4:	ee10 3a10 	vmov	r3, s0
 80033b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80033bc:	3a7f      	subs	r2, #127	; 0x7f
 80033be:	2a16      	cmp	r2, #22
 80033c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80033c4:	dc2a      	bgt.n	800341c <floorf+0x68>
 80033c6:	2a00      	cmp	r2, #0
 80033c8:	da11      	bge.n	80033ee <floorf+0x3a>
 80033ca:	eddf 7a18 	vldr	s15, [pc, #96]	; 800342c <floorf+0x78>
 80033ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80033d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80033d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033da:	dd05      	ble.n	80033e8 <floorf+0x34>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	da23      	bge.n	8003428 <floorf+0x74>
 80033e0:	4a13      	ldr	r2, [pc, #76]	; (8003430 <floorf+0x7c>)
 80033e2:	2900      	cmp	r1, #0
 80033e4:	bf18      	it	ne
 80033e6:	4613      	movne	r3, r2
 80033e8:	ee00 3a10 	vmov	s0, r3
 80033ec:	4770      	bx	lr
 80033ee:	4911      	ldr	r1, [pc, #68]	; (8003434 <floorf+0x80>)
 80033f0:	4111      	asrs	r1, r2
 80033f2:	420b      	tst	r3, r1
 80033f4:	d0fa      	beq.n	80033ec <floorf+0x38>
 80033f6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800342c <floorf+0x78>
 80033fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80033fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003406:	ddef      	ble.n	80033e8 <floorf+0x34>
 8003408:	2b00      	cmp	r3, #0
 800340a:	bfbe      	ittt	lt
 800340c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003410:	fa40 f202 	asrlt.w	r2, r0, r2
 8003414:	189b      	addlt	r3, r3, r2
 8003416:	ea23 0301 	bic.w	r3, r3, r1
 800341a:	e7e5      	b.n	80033e8 <floorf+0x34>
 800341c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003420:	d3e4      	bcc.n	80033ec <floorf+0x38>
 8003422:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003426:	4770      	bx	lr
 8003428:	2300      	movs	r3, #0
 800342a:	e7dd      	b.n	80033e8 <floorf+0x34>
 800342c:	7149f2ca 	.word	0x7149f2ca
 8003430:	bf800000 	.word	0xbf800000
 8003434:	007fffff 	.word	0x007fffff

08003438 <_init>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr

08003444 <_fini>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr
