
Benchmark_Accelerators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076b4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078cc  080078cc  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d4  080078d4  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080078dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000034  08007910  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  08007910  00020768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022e9e  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003793  00000000  00000000  00042fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e98  00000000  00000000  00046750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017f1  00000000  00000000  000485e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c387  00000000  00000000  00049dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000231c5  00000000  00000000  00076160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013acc8  00000000  00000000  00099325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000087b8  00000000  00000000  001d3ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001dc7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001363  00000000  00000000  001dc81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001ddb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007874 	.word	0x08007874

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	08007874 	.word	0x08007874

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:

float32_t a[5] = {1,2,3,4,5};
float32_t b[5] = {1,2,3,4,5};
float32_t c[9];
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f001 fa96 	bl	8001a4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f827 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fd2f 	bl	8000f84 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000526:	f000 f86f 	bl	8000608 <MX_ADC3_Init>
  MX_HRTIM1_Init();
 800052a:	f000 f8f9 	bl	8000720 <MX_HRTIM1_Init>
  MX_SPI2_Init();
 800052e:	f000 f971 	bl	8000814 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000532:	f000 f9ad 	bl	8000890 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000536:	f000 fa6f 	bl	8000a18 <MX_TIM2_Init>
  MX_TIM3_Init();
 800053a:	f000 fadd 	bl	8000af8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800053e:	f000 fb41 	bl	8000bc4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000542:	f000 fbaf 	bl	8000ca4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000546:	f000 fca7 	bl	8000e98 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800054a:	f000 fcf3 	bl	8000f34 <MX_USB_PCD_Init>
  MX_FMAC_Init();
 800054e:	f000 f8d3 	bl	80006f8 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */

  arm_conv_f32(a,5,b,5,c);
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <main+0x50>)
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2305      	movs	r3, #5
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <main+0x54>)
 800055a:	2105      	movs	r1, #5
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <main+0x58>)
 800055e:	f006 fec3 	bl	80072e8 <arm_conv_f32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x4e>
 8000564:	20000740 	.word	0x20000740
 8000568:	20000014 	.word	0x20000014
 800056c:	20000000 	.word	0x20000000

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	2238      	movs	r2, #56	; 0x38
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f007 f94c 	bl	800781c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f003 fcfd 	bl	8003f94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800059a:	2321      	movs	r3, #33	; 0x21
 800059c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ac:	2303      	movs	r3, #3
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005b4:	2332      	movs	r3, #50	; 0x32
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0318 	add.w	r3, r7, #24
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fd97 	bl	80040fc <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005d4:	f000 fe1e 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2303      	movs	r3, #3
 80005de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2104      	movs	r1, #4
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 f895 	bl	8004720 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005fc:	f000 fe0a 	bl	8001214 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800060e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2220      	movs	r2, #32
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f007 f8fb 	bl	800781c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000626:	4b31      	ldr	r3, [pc, #196]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000628:	4a31      	ldr	r2, [pc, #196]	; (80006f0 <MX_ADC3_Init+0xe8>)
 800062a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800062c:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <MX_ADC3_Init+0xe4>)
 800062e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000632:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b2d      	ldr	r3, [pc, #180]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <MX_ADC3_Init+0xe4>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000640:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <MX_ADC3_Init+0xe4>)
 800064e:	2204      	movs	r2, #4
 8000650:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000654:	2200      	movs	r2, #0
 8000656:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_ADC3_Init+0xe4>)
 800065a:	2200      	movs	r2, #0
 800065c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000660:	2201      	movs	r2, #1
 8000662:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_ADC3_Init+0xe4>)
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000674:	2200      	movs	r2, #0
 8000676:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_ADC3_Init+0xe4>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000682:	2200      	movs	r2, #0
 8000684:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800068e:	4817      	ldr	r0, [pc, #92]	; (80006ec <MX_ADC3_Init+0xe4>)
 8000690:	f001 fc22 	bl	8001ed8 <HAL_ADC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800069a:	f000 fdbb 	bl	8001214 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	4619      	mov	r1, r3
 80006a8:	4810      	ldr	r0, [pc, #64]	; (80006ec <MX_ADC3_Init+0xe4>)
 80006aa:	f002 fa37 	bl	8002b1c <HAL_ADCEx_MultiModeConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80006b4:	f000 fdae 	bl	8001214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_ADC3_Init+0xec>)
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006bc:	2306      	movs	r3, #6
 80006be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006c4:	237f      	movs	r3, #127	; 0x7f
 80006c6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006c8:	2304      	movs	r3, #4
 80006ca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_ADC3_Init+0xe4>)
 80006d6:	f001 fdbb 	bl	8002250 <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80006e0:	f000 fd98 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3730      	adds	r7, #48	; 0x30
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000050 	.word	0x20000050
 80006f0:	50000400 	.word	0x50000400
 80006f4:	25b00200 	.word	0x25b00200

080006f8 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_FMAC_Init+0x20>)
 80006fe:	4a07      	ldr	r2, [pc, #28]	; (800071c <MX_FMAC_Init+0x24>)
 8000700:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_FMAC_Init+0x20>)
 8000704:	f002 fbf5 	bl	8002ef2 <HAL_FMAC_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800070e:	f000 fd81 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000bc 	.word	0x200000bc
 800071c:	40021400 	.word	0x40021400

08000720 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b09c      	sub	sp, #112	; 0x70
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000726:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2260      	movs	r2, #96	; 0x60
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f007 f86e 	bl	800781c <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000740:	4b32      	ldr	r3, [pc, #200]	; (800080c <MX_HRTIM1_Init+0xec>)
 8000742:	4a33      	ldr	r2, [pc, #204]	; (8000810 <MX_HRTIM1_Init+0xf0>)
 8000744:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_HRTIM1_Init+0xec>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_HRTIM1_Init+0xec>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000752:	482e      	ldr	r0, [pc, #184]	; (800080c <MX_HRTIM1_Init+0xec>)
 8000754:	f002 fe14 	bl	8003380 <HAL_HRTIM_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_HRTIM1_Init+0x42>
  {
    Error_Handler();
 800075e:	f000 fd59 	bl	8001214 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000762:	210c      	movs	r1, #12
 8000764:	4829      	ldr	r0, [pc, #164]	; (800080c <MX_HRTIM1_Init+0xec>)
 8000766:	f002 fedb 	bl	8003520 <HAL_HRTIM_DLLCalibrationStart>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_HRTIM1_Init+0x54>
  {
    Error_Handler();
 8000770:	f000 fd50 	bl	8001214 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000774:	210a      	movs	r1, #10
 8000776:	4825      	ldr	r0, [pc, #148]	; (800080c <MX_HRTIM1_Init+0xec>)
 8000778:	f002 ff2a 	bl	80035d0 <HAL_HRTIM_PollForDLLCalibration>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_HRTIM1_Init+0x66>
  {
    Error_Handler();
 8000782:	f000 fd47 	bl	8001214 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8000786:	f64f 73df 	movw	r3, #65503	; 0xffdf
 800078a:	663b      	str	r3, [r7, #96]	; 0x60
  pTimeBaseCfg.RepetitionCounter = 0x00;
 800078c:	2300      	movs	r3, #0
 800078e:	667b      	str	r3, [r7, #100]	; 0x64
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8000790:	2300      	movs	r3, #0
 8000792:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000794:	2308      	movs	r3, #8
 8000796:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000798:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800079c:	461a      	mov	r2, r3
 800079e:	2106      	movs	r1, #6
 80007a0:	481a      	ldr	r0, [pc, #104]	; (800080c <MX_HRTIM1_Init+0xec>)
 80007a2:	f002 ff49 	bl	8003638 <HAL_HRTIM_TimeBaseConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_HRTIM1_Init+0x90>
  {
    Error_Handler();
 80007ac:	f000 fd32 	bl	8001214 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
  pTimerCfg.DMASrcAddress = 0x0000;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
  pTimerCfg.DMADstAddress = 0x0000;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  pTimerCfg.DMASize = 0x1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80007e0:	2300      	movs	r3, #0
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	461a      	mov	r2, r3
 80007f0:	2106      	movs	r1, #6
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_HRTIM1_Init+0xec>)
 80007f4:	f002 ff48 	bl	8003688 <HAL_HRTIM_WaveformTimerConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_HRTIM1_Init+0xe2>
  {
    Error_Handler();
 80007fe:	f000 fd09 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3770      	adds	r7, #112	; 0x70
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000f4 	.word	0x200000f4
 8000810:	40016800 	.word	0x40016800

08000814 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_SPI2_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_SPI2_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_SPI2_Init+0x74>)
 8000820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_SPI2_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI2_Init+0x74>)
 800082e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000832:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI2_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_SPI2_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000840:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI2_Init+0x74>)
 8000842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000846:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI2_Init+0x74>)
 800084a:	2218      	movs	r2, #24
 800084c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_SPI2_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI2_Init+0x74>)
 8000862:	2207      	movs	r2, #7
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <MX_SPI2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI2_Init+0x74>)
 800086e:	2208      	movs	r2, #8
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_SPI2_Init+0x74>)
 8000874:	f004 fbbe 	bl	8004ff4 <HAL_SPI_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 fcc9 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200001f0 	.word	0x200001f0
 800088c:	40003800 	.word	0x40003800

08000890 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09a      	sub	sp, #104	; 0x68
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000896:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80008a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2234      	movs	r2, #52	; 0x34
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 ffa7 	bl	800781c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ce:	4b50      	ldr	r3, [pc, #320]	; (8000a10 <MX_TIM1_Init+0x180>)
 80008d0:	4a50      	ldr	r2, [pc, #320]	; (8000a14 <MX_TIM1_Init+0x184>)
 80008d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008d4:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <MX_TIM1_Init+0x180>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <MX_TIM1_Init+0x180>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008e0:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <MX_TIM1_Init+0x180>)
 80008e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e8:	4b49      	ldr	r3, [pc, #292]	; (8000a10 <MX_TIM1_Init+0x180>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ee:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <MX_TIM1_Init+0x180>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <MX_TIM1_Init+0x180>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80008fa:	4845      	ldr	r0, [pc, #276]	; (8000a10 <MX_TIM1_Init+0x180>)
 80008fc:	f004 fc7c 	bl	80051f8 <HAL_TIM_OC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000906:	f000 fc85 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000916:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800091a:	4619      	mov	r1, r3
 800091c:	483c      	ldr	r0, [pc, #240]	; (8000a10 <MX_TIM1_Init+0x180>)
 800091e:	f005 fbef 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000928:	f000 fc74 	bl	8001214 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800092c:	2301      	movs	r3, #1
 800092e:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000930:	2301      	movs	r3, #1
 8000932:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000934:	2300      	movs	r3, #0
 8000936:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000938:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800093c:	461a      	mov	r2, r3
 800093e:	2101      	movs	r1, #1
 8000940:	4833      	ldr	r0, [pc, #204]	; (8000a10 <MX_TIM1_Init+0x180>)
 8000942:	f005 fd07 	bl	8006354 <HAL_TIMEx_ConfigBreakInput>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800094c:	f000 fc62 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000950:	2300      	movs	r3, #0
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000958:	2300      	movs	r3, #0
 800095a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800095c:	2300      	movs	r3, #0
 800095e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000970:	2200      	movs	r2, #0
 8000972:	4619      	mov	r1, r3
 8000974:	4826      	ldr	r0, [pc, #152]	; (8000a10 <MX_TIM1_Init+0x180>)
 8000976:	f004 fc97 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000980:	f000 fc48 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000984:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000988:	2204      	movs	r2, #4
 800098a:	4619      	mov	r1, r3
 800098c:	4820      	ldr	r0, [pc, #128]	; (8000a10 <MX_TIM1_Init+0x180>)
 800098e:	f004 fc8b 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000998:	f000 fc3c 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800099c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009a0:	2208      	movs	r2, #8
 80009a2:	4619      	mov	r1, r3
 80009a4:	481a      	ldr	r0, [pc, #104]	; (8000a10 <MX_TIM1_Init+0x180>)
 80009a6:	f004 fc7f 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80009b0:	f000 fc30 	bl	8001214 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <MX_TIM1_Init+0x180>)
 80009f4:	f005 fc1a 	bl	800622c <HAL_TIMEx_ConfigBreakDeadTime>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80009fe:	f000 fc09 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <MX_TIM1_Init+0x180>)
 8000a04:	f000 fe44 	bl	8001690 <HAL_TIM_MspPostInit>

}
 8000a08:	bf00      	nop
 8000a0a:	3768      	adds	r7, #104	; 0x68
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000254 	.word	0x20000254
 8000a14:	40012c00 	.word	0x40012c00

08000a18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a3c:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000a52:	f04f 32ff 	mov.w	r2, #4294967295
 8000a56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000a64:	4823      	ldr	r0, [pc, #140]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000a66:	f004 fbc7 	bl	80051f8 <HAL_TIM_OC_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 fbd0 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	481c      	ldr	r0, [pc, #112]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000a84:	f005 fb3c 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000a8e:	f000 fbc1 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4812      	ldr	r0, [pc, #72]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000aaa:	f004 fbfd 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ab4:	f000 fbae 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2204      	movs	r2, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000ac0:	f004 fbf2 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000aca:	f000 fba3 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2208      	movs	r2, #8
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4807      	ldr	r0, [pc, #28]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000ad6:	f004 fbe7 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000ae0:	f000 fb98 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ae4:	4803      	ldr	r0, [pc, #12]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000ae6:	f000 fdd3 	bl	8001690 <HAL_TIM_MspPostInit>

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200002a0 	.word	0x200002a0

08000af8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
 8000b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000b1e:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <MX_TIM3_Init+0xc8>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b22:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000b42:	481e      	ldr	r0, [pc, #120]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000b44:	f004 fb58 	bl	80051f8 <HAL_TIM_OC_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000b4e:	f000 fb61 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4816      	ldr	r0, [pc, #88]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000b62:	f005 facd 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000b6c:	f000 fb52 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000b88:	f004 fb8e 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000b92:	f000 fb3f 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b96:	463b      	mov	r3, r7
 8000b98:	2204      	movs	r2, #4
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000b9e:	f004 fb83 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ba8:	f000 fb34 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM3_Init+0xc4>)
 8000bae:	f000 fd6f 	bl	8001690 <HAL_TIM_MspPostInit>

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200002ec 	.word	0x200002ec
 8000bc0:	40000400 	.word	0x40000400

08000bc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000bea:	4a2d      	ldr	r2, [pc, #180]	; (8000ca0 <MX_TIM5_Init+0xdc>)
 8000bec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8000c0e:	4823      	ldr	r0, [pc, #140]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000c10:	f004 faf2 	bl	80051f8 <HAL_TIM_OC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000c1a:	f000 fafb 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000c2e:	f005 fa67 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000c38:	f000 faec 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	4812      	ldr	r0, [pc, #72]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000c54:	f004 fb28 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000c5e:	f000 fad9 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	2204      	movs	r2, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000c6a:	f004 fb1d 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8000c74:	f000 face 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4807      	ldr	r0, [pc, #28]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000c80:	f004 fb12 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8000c8a:	f000 fac3 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000c8e:	4803      	ldr	r0, [pc, #12]	; (8000c9c <MX_TIM5_Init+0xd8>)
 8000c90:	f000 fcfe 	bl	8001690 <HAL_TIM_MspPostInit>

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000338 	.word	0x20000338
 8000ca0:	40000c00 	.word	0x40000c00

08000ca4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0a4      	sub	sp, #144	; 0x90
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000caa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000cd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
 8000cf2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2234      	movs	r2, #52	; 0x34
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f006 fd8e 	bl	800781c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d00:	4b63      	ldr	r3, [pc, #396]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d02:	4a64      	ldr	r2, [pc, #400]	; (8000e94 <MX_TIM8_Init+0x1f0>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d06:	4b62      	ldr	r3, [pc, #392]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b60      	ldr	r3, [pc, #384]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000d12:	4b5f      	ldr	r3, [pc, #380]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d20:	4b5b      	ldr	r3, [pc, #364]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b5a      	ldr	r3, [pc, #360]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000d2c:	4858      	ldr	r0, [pc, #352]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d2e:	f004 fa0c 	bl	800514a <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000d38:	f000 fa6c 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000d44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4851      	ldr	r0, [pc, #324]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d4c:	f004 fb26 	bl	800539c <HAL_TIM_ConfigClockSource>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000d56:	f000 fa5d 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000d5a:	484d      	ldr	r0, [pc, #308]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d5c:	f004 fa4c 	bl	80051f8 <HAL_TIM_OC_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000d66:	f000 fa55 	bl	8001214 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000d72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d76:	4619      	mov	r1, r3
 8000d78:	4845      	ldr	r0, [pc, #276]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d7a:	f004 fc25 	bl	80055c8 <HAL_TIM_SlaveConfigSynchro>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8000d84:	f000 fa46 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d94:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d98:	4619      	mov	r1, r3
 8000d9a:	483d      	ldr	r0, [pc, #244]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000d9c:	f005 f9b0 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8000da6:	f000 fa35 	bl	8001214 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000daa:	2301      	movs	r3, #1
 8000dac:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000dae:	2301      	movs	r3, #1
 8000db0:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000db2:	2300      	movs	r3, #0
 8000db4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000db6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dba:	461a      	mov	r2, r3
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4834      	ldr	r0, [pc, #208]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000dc0:	f005 fac8 	bl	8006354 <HAL_TIMEx_ConfigBreakInput>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8000dca:	f000 fa23 	bl	8001214 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dee:	2200      	movs	r2, #0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4827      	ldr	r0, [pc, #156]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000df4:	f004 fa58 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM8_Init+0x15e>
  {
    Error_Handler();
 8000dfe:	f000 fa09 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e06:	2204      	movs	r2, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4821      	ldr	r0, [pc, #132]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000e0c:	f004 fa4c 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM8_Init+0x176>
  {
    Error_Handler();
 8000e16:	f000 f9fd 	bl	8001214 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e1e:	2208      	movs	r2, #8
 8000e20:	4619      	mov	r1, r3
 8000e22:	481b      	ldr	r0, [pc, #108]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000e24:	f004 fa40 	bl	80052a8 <HAL_TIM_OC_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 8000e2e:	f000 f9f1 	bl	8001214 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000e72:	f005 f9db 	bl	800622c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM8_Init+0x1dc>
  {
    Error_Handler();
 8000e7c:	f000 f9ca 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_TIM8_Init+0x1ec>)
 8000e82:	f000 fc05 	bl	8001690 <HAL_TIM_MspPostInit>

}
 8000e86:	bf00      	nop
 8000e88:	3790      	adds	r7, #144	; 0x90
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000384 	.word	0x20000384
 8000e94:	40013400 	.word	0x40013400

08000e98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e9c:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000e9e:	4a24      	ldr	r2, [pc, #144]	; (8000f30 <MX_USART1_UART_Init+0x98>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ea2:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eb0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eb8:	4b1c      	ldr	r3, [pc, #112]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee2:	4812      	ldr	r0, [pc, #72]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000ee4:	f005 fb58 	bl	8006598 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000eee:	f000 f991 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000ef6:	f006 f8f3 	bl	80070e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000f00:	f000 f988 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f04:	2100      	movs	r1, #0
 8000f06:	4809      	ldr	r0, [pc, #36]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000f08:	f006 f928 	bl	800715c <HAL_UARTEx_SetRxFifoThreshold>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000f12:	f000 f97f 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_USART1_UART_Init+0x94>)
 8000f18:	f006 f8a9 	bl	800706e <HAL_UARTEx_DisableFifoMode>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000f22:	f000 f977 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200003d0 	.word	0x200003d0
 8000f30:	40013800 	.word	0x40013800

08000f34 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_USB_PCD_Init+0x48>)
 8000f3a:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <MX_USB_PCD_Init+0x4c>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <MX_USB_PCD_Init+0x48>)
 8000f40:	2208      	movs	r2, #8
 8000f42:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <MX_USB_PCD_Init+0x48>)
 8000f46:	2202      	movs	r2, #2
 8000f48:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USB_PCD_Init+0x48>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <MX_USB_PCD_Init+0x48>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USB_PCD_Init+0x48>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <MX_USB_PCD_Init+0x48>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USB_PCD_Init+0x48>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_USB_PCD_Init+0x48>)
 8000f6a:	f002 ff1b 	bl	8003da4 <HAL_PCD_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000f74:	f000 f94e 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000464 	.word	0x20000464
 8000f80:	40005c00 	.word	0x40005c00

08000f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08c      	sub	sp, #48	; 0x30
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f9a:	4b97      	ldr	r3, [pc, #604]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a96      	ldr	r2, [pc, #600]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b94      	ldr	r3, [pc, #592]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	4b91      	ldr	r3, [pc, #580]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a90      	ldr	r2, [pc, #576]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b8e      	ldr	r3, [pc, #568]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fca:	4b8b      	ldr	r3, [pc, #556]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a8a      	ldr	r2, [pc, #552]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000fd0:	f043 0320 	orr.w	r3, r3, #32
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b88      	ldr	r3, [pc, #544]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b85      	ldr	r3, [pc, #532]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a84      	ldr	r2, [pc, #528]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b82      	ldr	r3, [pc, #520]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b7f      	ldr	r3, [pc, #508]	; (80011f8 <MX_GPIO_Init+0x274>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a7e      	ldr	r2, [pc, #504]	; (80011f8 <MX_GPIO_Init+0x274>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b7c      	ldr	r3, [pc, #496]	; (80011f8 <MX_GPIO_Init+0x274>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	4b79      	ldr	r3, [pc, #484]	; (80011f8 <MX_GPIO_Init+0x274>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a78      	ldr	r2, [pc, #480]	; (80011f8 <MX_GPIO_Init+0x274>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b76      	ldr	r3, [pc, #472]	; (80011f8 <MX_GPIO_Init+0x274>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800102a:	4b73      	ldr	r3, [pc, #460]	; (80011f8 <MX_GPIO_Init+0x274>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a72      	ldr	r2, [pc, #456]	; (80011f8 <MX_GPIO_Init+0x274>)
 8001030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b70      	ldr	r3, [pc, #448]	; (80011f8 <MX_GPIO_Init+0x274>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CN2_ICL_Shutout_Pin|CN2_Dissipative_Brake_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2130      	movs	r1, #48	; 0x30
 8001046:	486d      	ldr	r0, [pc, #436]	; (80011fc <MX_GPIO_Init+0x278>)
 8001048:	f002 f982 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CN4_Dissipative_Brake_Pin|LED3_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001052:	486b      	ldr	r0, [pc, #428]	; (8001200 <MX_GPIO_Init+0x27c>)
 8001054:	f002 f97c 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CN4_ICL_Shutout_GPIO_Port, CN4_ICL_Shutout_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800105e:	4869      	ldr	r0, [pc, #420]	; (8001204 <MX_GPIO_Init+0x280>)
 8001060:	f002 f976 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4867      	ldr	r0, [pc, #412]	; (8001208 <MX_GPIO_Init+0x284>)
 800106c:	f002 f970 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001076:	4865      	ldr	r0, [pc, #404]	; (800120c <MX_GPIO_Init+0x288>)
 8001078:	f002 f96a 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN2_ICL_Shutout_Pin CN2_Dissipative_Brake_Pin */
  GPIO_InitStruct.Pin = CN2_ICL_Shutout_Pin|CN2_Dissipative_Brake_Pin;
 800107c:	2330      	movs	r3, #48	; 0x30
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	485a      	ldr	r0, [pc, #360]	; (80011fc <MX_GPIO_Init+0x278>)
 8001094:	f001 ffda 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : TAMPER_KEY_Pin */
  GPIO_InitStruct.Pin = TAMPER_KEY_Pin;
 8001098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TAMPER_KEY_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4856      	ldr	r0, [pc, #344]	; (8001208 <MX_GPIO_Init+0x284>)
 80010ae:	f001 ffcd 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : CN4_Dissipative_Brake_Pin LED3_Pin */
  GPIO_InitStruct.Pin = CN4_Dissipative_Brake_Pin|LED3_Pin;
 80010b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	4619      	mov	r1, r3
 80010ca:	484d      	ldr	r0, [pc, #308]	; (8001200 <MX_GPIO_Init+0x27c>)
 80010cc:	f001 ffbe 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC12_IN6_Pin ADC12_IN7_Pin ADC12_IN8_Pin ADC12_IN9_Pin
                           ADC2_IN5_Pin PC5 */
  GPIO_InitStruct.Pin = ADC12_IN6_Pin|ADC12_IN7_Pin|ADC12_IN8_Pin|ADC12_IN9_Pin
 80010d0:	233f      	movs	r3, #63	; 0x3f
 80010d2:	61fb      	str	r3, [r7, #28]
                          |ADC2_IN5_Pin|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4849      	ldr	r0, [pc, #292]	; (8001208 <MX_GPIO_Init+0x284>)
 80010e4:	f001 ffb2 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80010e8:	23fe      	movs	r3, #254	; 0xfe
 80010ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ec:	2303      	movs	r3, #3
 80010ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f001 ffa5 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 OPAMP4_VOUT_Pin PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001102:	f643 4307 	movw	r3, #15367	; 0x3c07
 8001106:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|OPAMP4_VOUT_Pin|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	483e      	ldr	r0, [pc, #248]	; (8001210 <MX_GPIO_Init+0x28c>)
 8001118:	f001 ff98 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC4_IN1_Pin */
  GPIO_InitStruct.Pin = ADC4_IN1_Pin;
 800111c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ADC4_IN1_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4832      	ldr	r0, [pc, #200]	; (80011fc <MX_GPIO_Init+0x278>)
 8001132:	f001 ff8b 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC45_IN12_Pin ADC45_IN13_Pin ADC345_IN7_Pin ADC345_IN9_Pin
                           ADC345_IN10_Pin PD14 */
  GPIO_InitStruct.Pin = ADC45_IN12_Pin|ADC45_IN13_Pin|ADC345_IN7_Pin|ADC345_IN9_Pin
 8001136:	f44f 43ee 	mov.w	r3, #30464	; 0x7700
 800113a:	61fb      	str	r3, [r7, #28]
                          |ADC345_IN10_Pin|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	4619      	mov	r1, r3
 800114a:	482e      	ldr	r0, [pc, #184]	; (8001204 <MX_GPIO_Init+0x280>)
 800114c:	f001 ff7e 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : CN4_ICL_Shutout_Pin */
  GPIO_InitStruct.Pin = CN4_ICL_Shutout_Pin;
 8001150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CN4_ICL_Shutout_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	4826      	ldr	r0, [pc, #152]	; (8001204 <MX_GPIO_Init+0x280>)
 800116a:	f001 ff6f 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800116e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4619      	mov	r1, r3
 8001186:	4820      	ldr	r0, [pc, #128]	; (8001208 <MX_GPIO_Init+0x284>)
 8001188:	f001 ff60 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SMBA_Pin I2C3_SCL_Pin I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SMBA_Pin|I2C3_SCL_Pin|I2C3_SDA_Pin;
 800118c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001192:	2312      	movs	r3, #18
 8001194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001196:	2301      	movs	r3, #1
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800119e:	2304      	movs	r3, #4
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	4818      	ldr	r0, [pc, #96]	; (800120c <MX_GPIO_Init+0x288>)
 80011aa:	f001 ff4f 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80011ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <MX_GPIO_Init+0x288>)
 80011c8:	f001 ff40 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT0_FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = BOOT0_FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80011cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011de:	2309      	movs	r3, #9
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <MX_GPIO_Init+0x28c>)
 80011ea:	f001 ff2f 	bl	800304c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ee:	bf00      	nop
 80011f0:	3730      	adds	r7, #48	; 0x30
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	48001000 	.word	0x48001000
 8001200:	48001400 	.word	0x48001400
 8001204:	48000c00 	.word	0x48000c00
 8001208:	48000800 	.word	0x48000800
 800120c:	48001800 	.word	0x48001800
 8001210:	48000400 	.word	0x48000400

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_MspInit+0x44>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_MspInit+0x44>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6613      	str	r3, [r2, #96]	; 0x60
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_MspInit+0x44>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x44>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x44>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6593      	str	r3, [r2, #88]	; 0x58
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x44>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001256:	f002 ff41 	bl	80040dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0a0      	sub	sp, #128	; 0x80
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	2254      	movs	r2, #84	; 0x54
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f006 fac7 	bl	800781c <memset>
  if(hadc->Instance==ADC3)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a2a      	ldr	r2, [pc, #168]	; (800133c <HAL_ADC_MspInit+0xd4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d14c      	bne.n	8001332 <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 800129e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80012a2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fc55 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012b4:	f7ff ffae 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	4a20      	ldr	r2, [pc, #128]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d4:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012d6:	f043 0310 	orr.w	r3, r3, #16
 80012da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_ADC_MspInit+0xd8>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    PE7     ------> ADC3_IN4
    PD10     ------> ADC3_IN7
    PD12     ------> ADC3_IN9
    PD13     ------> ADC3_IN10
    */
    GPIO_InitStruct.Pin = ADC3_IN4_Pin;
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001304:	2303      	movs	r3, #3
 8001306:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(ADC3_IN4_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001310:	4619      	mov	r1, r3
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <HAL_ADC_MspInit+0xdc>)
 8001314:	f001 fe9a 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC345_IN7_Pin|ADC345_IN9_Pin|ADC345_IN10_Pin;
 8001318:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800131c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001326:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800132a:	4619      	mov	r1, r3
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <HAL_ADC_MspInit+0xe0>)
 800132e:	f001 fe8d 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3780      	adds	r7, #128	; 0x80
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	50000400 	.word	0x50000400
 8001340:	40021000 	.word	0x40021000
 8001344:	48001000 	.word	0x48001000
 8001348:	48000c00 	.word	0x48000c00

0800134c <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_FMAC_MspInit+0x38>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d10b      	bne.n	8001376 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_FMAC_MspInit+0x3c>)
 8001360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_FMAC_MspInit+0x3c>)
 8001364:	f043 0310 	orr.w	r3, r3, #16
 8001368:	6493      	str	r3, [r2, #72]	; 0x48
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_FMAC_MspInit+0x3c>)
 800136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021400 	.word	0x40021400
 8001388:	40021000 	.word	0x40021000

0800138c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_HRTIM_MspInit+0x38>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d10b      	bne.n	80013b6 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_HRTIM_MspInit+0x3c>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_HRTIM_MspInit+0x3c>)
 80013a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013a8:	6613      	str	r3, [r2, #96]	; 0x60
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <HAL_HRTIM_MspInit+0x3c>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40016800 	.word	0x40016800
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a26      	ldr	r2, [pc, #152]	; (8001484 <HAL_SPI_MspInit+0xb8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d145      	bne.n	800147a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_SPI_MspInit+0xbc>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f2:	4a25      	ldr	r2, [pc, #148]	; (8001488 <HAL_SPI_MspInit+0xbc>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6593      	str	r3, [r2, #88]	; 0x58
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <HAL_SPI_MspInit+0xbc>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_SPI_MspInit+0xbc>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a1f      	ldr	r2, [pc, #124]	; (8001488 <HAL_SPI_MspInit+0xbc>)
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_SPI_MspInit+0xbc>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_SPI_MspInit+0xbc>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_SPI_MspInit+0xbc>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_SPI_MspInit+0xbc>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8001436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001448:	2305      	movs	r3, #5
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	480e      	ldr	r0, [pc, #56]	; (800148c <HAL_SPI_MspInit+0xc0>)
 8001454:	f001 fdfa 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001458:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800146a:	2305      	movs	r3, #5
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4806      	ldr	r0, [pc, #24]	; (8001490 <HAL_SPI_MspInit+0xc4>)
 8001476:	f001 fde9 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	; 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40003800 	.word	0x40003800
 8001488:	40021000 	.word	0x40021000
 800148c:	48001400 	.word	0x48001400
 8001490:	48000400 	.word	0x48000400

08001494 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	; 0x38
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(htim_oc->Instance==TIM1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a4f      	ldr	r2, [pc, #316]	; (80015f0 <HAL_TIM_OC_MspInit+0x15c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d129      	bne.n	800150a <HAL_TIM_OC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b6:	4b4f      	ldr	r3, [pc, #316]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 80014b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ba:	4a4e      	ldr	r2, [pc, #312]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 80014bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c0:	6613      	str	r3, [r2, #96]	; 0x60
 80014c2:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ce:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a48      	ldr	r2, [pc, #288]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b46      	ldr	r3, [pc, #280]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = TIM1_BKIN_Pin;
 80014e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ec:	2312      	movs	r3, #18
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014f8:	2302      	movs	r3, #2
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM1_BKIN_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	483d      	ldr	r0, [pc, #244]	; (80015f8 <HAL_TIM_OC_MspInit+0x164>)
 8001504:	f001 fda2 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001508:	e06d      	b.n	80015e6 <HAL_TIM_OC_MspInit+0x152>
  else if(htim_oc->Instance==TIM2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001512:	d10c      	bne.n	800152e <HAL_TIM_OC_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001514:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 8001516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001518:	4a36      	ldr	r2, [pc, #216]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6593      	str	r3, [r2, #88]	; 0x58
 8001520:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	69bb      	ldr	r3, [r7, #24]
}
 800152c:	e05b      	b.n	80015e6 <HAL_TIM_OC_MspInit+0x152>
  else if(htim_oc->Instance==TIM3)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a32      	ldr	r2, [pc, #200]	; (80015fc <HAL_TIM_OC_MspInit+0x168>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d128      	bne.n	800158a <HAL_TIM_OC_MspInit+0xf6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001538:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	4a2d      	ldr	r2, [pc, #180]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	6593      	str	r3, [r2, #88]	; 0x58
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 8001556:	f043 0308 	orr.w	r3, r3, #8
 800155a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM3_ETR_Pin;
 8001568:	2304      	movs	r3, #4
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001578:	2302      	movs	r3, #2
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM3_ETR_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	481f      	ldr	r0, [pc, #124]	; (8001600 <HAL_TIM_OC_MspInit+0x16c>)
 8001584:	f001 fd62 	bl	800304c <HAL_GPIO_Init>
}
 8001588:	e02d      	b.n	80015e6 <HAL_TIM_OC_MspInit+0x152>
  else if(htim_oc->Instance==TIM5)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_TIM_OC_MspInit+0x170>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d128      	bne.n	80015e6 <HAL_TIM_OC_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 800159a:	f043 0308 	orr.w	r3, r3, #8
 800159e:	6593      	str	r3, [r2, #88]	; 0x58
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_TIM_OC_MspInit+0x160>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80015d6:	2301      	movs	r3, #1
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <HAL_TIM_OC_MspInit+0x16c>)
 80015e2:	f001 fd33 	bl	800304c <HAL_GPIO_Init>
}
 80015e6:	bf00      	nop
 80015e8:	3738      	adds	r7, #56	; 0x38
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40012c00 	.word	0x40012c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48001000 	.word	0x48001000
 80015fc:	40000400 	.word	0x40000400
 8001600:	48000c00 	.word	0x48000c00
 8001604:	40000c00 	.word	0x40000c00

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_TIM_Base_MspInit+0x7c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d127      	bne.n	800167a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_TIM_Base_MspInit+0x80>)
 800162c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <HAL_TIM_Base_MspInit+0x80>)
 8001630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001634:	6613      	str	r3, [r2, #96]	; 0x60
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_TIM_Base_MspInit+0x80>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_TIM_Base_MspInit+0x80>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_TIM_Base_MspInit+0x80>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_TIM_Base_MspInit+0x80>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PB7     ------> TIM8_BKIN
    */
    GPIO_InitStruct.Pin = TIM8_BKIN_Pin;
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165e:	2312      	movs	r3, #18
 8001660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800166a:	2305      	movs	r3, #5
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM8_BKIN_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_TIM_Base_MspInit+0x84>)
 8001676:	f001 fce9 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40013400 	.word	0x40013400
 8001688:	40021000 	.word	0x40021000
 800168c:	48000400 	.word	0x48000400

08001690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08e      	sub	sp, #56	; 0x38
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a65      	ldr	r2, [pc, #404]	; (8001844 <HAL_TIM_MspPostInit+0x1b4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d11d      	bne.n	80016ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b2:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	4a64      	ldr	r2, [pc, #400]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 80016b8:	f043 0310 	orr.w	r3, r3, #16
 80016bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016be:	4b62      	ldr	r3, [pc, #392]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	623b      	str	r3, [r7, #32]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin|TIM1_CH2N_Pin|TIM1_CH1E11_Pin
 80016ca:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
                          |TIM1_CH3N_Pin|TIM1_CH3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80016dc:	2302      	movs	r3, #2
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e4:	4619      	mov	r1, r3
 80016e6:	4859      	ldr	r0, [pc, #356]	; (800184c <HAL_TIM_MspPostInit+0x1bc>)
 80016e8:	f001 fcb0 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80016ec:	e0a5      	b.n	800183a <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f6:	d139      	bne.n	800176c <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	4a52      	ldr	r2, [pc, #328]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001704:	4b50      	ldr	r3, [pc, #320]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001710:	4b4d      	ldr	r3, [pc, #308]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001714:	4a4c      	ldr	r2, [pc, #304]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 8001716:	f043 0308 	orr.w	r3, r3, #8
 800171a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171c:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH1_Pin;
 8001728:	2301      	movs	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001738:	2301      	movs	r3, #1
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001740:	4619      	mov	r1, r3
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f001 fc81 	bl	800304c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH2_Pin|TIM2_CH3_Pin;
 800174a:	2390      	movs	r3, #144	; 0x90
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800175a:	2302      	movs	r3, #2
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	483a      	ldr	r0, [pc, #232]	; (8001850 <HAL_TIM_MspPostInit+0x1c0>)
 8001766:	f001 fc71 	bl	800304c <HAL_GPIO_Init>
}
 800176a:	e066      	b.n	800183a <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a38      	ldr	r2, [pc, #224]	; (8001854 <HAL_TIM_MspPostInit+0x1c4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d11c      	bne.n	80017b0 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001776:	4b34      	ldr	r3, [pc, #208]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	4a33      	ldr	r2, [pc, #204]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 800177c:	f043 0310 	orr.w	r3, r3, #16
 8001780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM3_CH1_Pin|TIM3_CH2_Pin;
 800178e:	230c      	movs	r3, #12
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800179e:	2302      	movs	r3, #2
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a6:	4619      	mov	r1, r3
 80017a8:	4828      	ldr	r0, [pc, #160]	; (800184c <HAL_TIM_MspPostInit+0x1bc>)
 80017aa:	f001 fc4f 	bl	800304c <HAL_GPIO_Init>
}
 80017ae:	e044      	b.n	800183a <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM5)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a28      	ldr	r2, [pc, #160]	; (8001858 <HAL_TIM_MspPostInit+0x1c8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d11d      	bne.n	80017f6 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a22      	ldr	r2, [pc, #136]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 80017c0:	f043 0320 	orr.w	r3, r3, #32
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH2_Pin|TIM5_CH2F8_Pin|TIM5_CH1_Pin;
 80017d2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 80017e4:	2306      	movs	r3, #6
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	481b      	ldr	r0, [pc, #108]	; (800185c <HAL_TIM_MspPostInit+0x1cc>)
 80017f0:	f001 fc2c 	bl	800304c <HAL_GPIO_Init>
}
 80017f4:	e021      	b.n	800183a <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM8)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_TIM_MspPostInit+0x1d0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d11c      	bne.n	800183a <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001804:	4a10      	ldr	r2, [pc, #64]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_TIM_MspPostInit+0x1b8>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_Pin|TIM8_CH2_Pin|TIM8_CH3_Pin|TIM8_CH1N_Pin
 8001818:	f44f 53ee 	mov.w	r3, #7616	; 0x1dc0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800182a:	2304      	movs	r3, #4
 800182c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	480b      	ldr	r0, [pc, #44]	; (8001864 <HAL_TIM_MspPostInit+0x1d4>)
 8001836:	f001 fc09 	bl	800304c <HAL_GPIO_Init>
}
 800183a:	bf00      	nop
 800183c:	3738      	adds	r7, #56	; 0x38
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40012c00 	.word	0x40012c00
 8001848:	40021000 	.word	0x40021000
 800184c:	48001000 	.word	0x48001000
 8001850:	48000c00 	.word	0x48000c00
 8001854:	40000400 	.word	0x40000400
 8001858:	40000c00 	.word	0x40000c00
 800185c:	48001400 	.word	0x48001400
 8001860:	40013400 	.word	0x40013400
 8001864:	48000800 	.word	0x48000800

08001868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b09e      	sub	sp, #120	; 0x78
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	2254      	movs	r2, #84	; 0x54
 8001886:	2100      	movs	r1, #0
 8001888:	4618      	mov	r0, r3
 800188a:	f005 ffc7 	bl	800781c <memset>
  if(huart->Instance==USART1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <HAL_UART_MspInit+0xa8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d137      	bne.n	8001908 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001898:	2301      	movs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 f957 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018b0:	f7ff fcb0 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_UART_MspInit+0xac>)
 80018b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b8:	4a16      	ldr	r2, [pc, #88]	; (8001914 <HAL_UART_MspInit+0xac>)
 80018ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018be:	6613      	str	r3, [r2, #96]	; 0x60
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_UART_MspInit+0xac>)
 80018c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_UART_MspInit+0xac>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_UART_MspInit+0xac>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_UART_MspInit+0xac>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80018e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018f6:	2307      	movs	r3, #7
 80018f8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001904:	f001 fba2 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	3778      	adds	r7, #120	; 0x78
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40013800 	.word	0x40013800
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b098      	sub	sp, #96	; 0x60
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	2254      	movs	r2, #84	; 0x54
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f005 ff77 	bl	800781c <memset>
  if(hpcd->Instance==USB)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a11      	ldr	r2, [pc, #68]	; (8001978 <HAL_PCD_MspInit+0x60>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d11a      	bne.n	800196e <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800193c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800193e:	2300      	movs	r3, #0
 8001940:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	4618      	mov	r0, r3
 8001948:	f003 f906 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8001952:	f7ff fc5f 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_PCD_MspInit+0x64>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_PCD_MspInit+0x64>)
 800195c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_PCD_MspInit+0x64>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800196e:	bf00      	nop
 8001970:	3760      	adds	r7, #96	; 0x60
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40005c00 	.word	0x40005c00
 800197c:	40021000 	.word	0x40021000

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 f890 	bl	8001af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019fc:	f7ff ffea 	bl	80019d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a02:	490d      	ldr	r1, [pc, #52]	; (8001a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <LoopForever+0xe>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a18:	4c0a      	ldr	r4, [pc, #40]	; (8001a44 <LoopForever+0x16>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a26:	f005 ff01 	bl	800782c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2a:	f7fe fd73 	bl	8000514 <main>

08001a2e <LoopForever>:

LoopForever:
    b LoopForever
 8001a2e:	e7fe      	b.n	8001a2e <LoopForever>
  ldr   r0, =_estack
 8001a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001a3c:	080078dc 	.word	0x080078dc
  ldr r2, =_sbss
 8001a40:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001a44:	20000768 	.word	0x20000768

08001a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_2_IRQHandler>

08001a4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f001 fa1b 	bl	8002e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f80e 	bl	8001a7c <HAL_InitTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	e001      	b.n	8001a70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a6c:	f7ff fbd8 	bl	8001220 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a70:	79fb      	ldrb	r3, [r7, #7]

}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_InitTick+0x68>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d022      	beq.n	8001ad6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_InitTick+0x6c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_InitTick+0x68>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f001 fa18 	bl	8002eda <HAL_SYSTICK_Config>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10f      	bne.n	8001ad0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	d809      	bhi.n	8001aca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	f04f 30ff 	mov.w	r0, #4294967295
 8001abe:	f001 f9f2 	bl	8002ea6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_InitTick+0x70>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	e007      	b.n	8001ada <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e004      	b.n	8001ada <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	e001      	b.n	8001ada <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000030 	.word	0x20000030
 8001ae8:	20000028 	.word	0x20000028
 8001aec:	2000002c 	.word	0x2000002c

08001af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_IncTick+0x1c>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_IncTick+0x20>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <HAL_IncTick+0x1c>)
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	20000764 	.word	0x20000764
 8001b10:	20000030 	.word	0x20000030

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000764 	.word	0x20000764

08001b2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	609a      	str	r2, [r3, #8]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3360      	adds	r3, #96	; 0x60
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <LL_ADC_SetOffset+0x44>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bcc:	bf00      	nop
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	03fff000 	.word	0x03fff000

08001bdc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3360      	adds	r3, #96	; 0x60
 8001bea:	461a      	mov	r2, r3
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3360      	adds	r3, #96	; 0x60
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c32:	bf00      	nop
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b087      	sub	sp, #28
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3360      	adds	r3, #96	; 0x60
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c68:	bf00      	nop
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3360      	adds	r3, #96	; 0x60
 8001c84:	461a      	mov	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	615a      	str	r2, [r3, #20]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3330      	adds	r3, #48	; 0x30
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	4413      	add	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	211f      	movs	r1, #31
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	f003 011f 	and.w	r1, r3, #31
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	431a      	orrs	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3314      	adds	r3, #20
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0e5b      	lsrs	r3, r3, #25
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	0d1b      	lsrs	r3, r3, #20
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2107      	movs	r1, #7
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	0d1b      	lsrs	r3, r3, #20
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d72:	bf00      	nop
 8001d74:	371c      	adds	r7, #28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0318 	and.w	r3, r3, #24
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001da4:	40d9      	lsrs	r1, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	400b      	ands	r3, r1
 8001daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dae:	431a      	orrs	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	0007ffff 	.word	0x0007ffff

08001dc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6093      	str	r3, [r2, #8]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e00:	d101      	bne.n	8001e06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e50:	d101      	bne.n	8001e56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <LL_ADC_IsEnabled+0x18>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <LL_ADC_IsEnabled+0x1a>
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d101      	bne.n	8001ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d101      	bne.n	8001ec8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1a9      	b.n	8002246 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff f9b1 	bl	8001268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff67 	bl	8001dec <LL_ADC_IsDeepPowerDownEnabled>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff4d 	bl	8001dc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff82 	bl	8001e3c <LL_ADC_IsInternalRegulatorEnabled>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d115      	bne.n	8001f6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff66 	bl	8001e14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f48:	4b9c      	ldr	r3, [pc, #624]	; (80021bc <HAL_ADC_Init+0x2e4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	4a9c      	ldr	r2, [pc, #624]	; (80021c0 <HAL_ADC_Init+0x2e8>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	099b      	lsrs	r3, r3, #6
 8001f56:	3301      	adds	r3, #1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f5c:	e002      	b.n	8001f64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f9      	bne.n	8001f5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff64 	bl	8001e3c <LL_ADC_IsInternalRegulatorEnabled>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10d      	bne.n	8001f96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	f043 0210 	orr.w	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8a:	f043 0201 	orr.w	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff75 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8001fa0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 8142 	bne.w	8002234 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 813e 	bne.w	8002234 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fc0:	f043 0202 	orr.w	r2, r3, #2
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff49 	bl	8001e64 <LL_ADC_IsEnabled>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d141      	bne.n	800205c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe0:	d004      	beq.n	8001fec <HAL_ADC_Init+0x114>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a77      	ldr	r2, [pc, #476]	; (80021c4 <HAL_ADC_Init+0x2ec>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10f      	bne.n	800200c <HAL_ADC_Init+0x134>
 8001fec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ff0:	f7ff ff38 	bl	8001e64 <LL_ADC_IsEnabled>
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	4873      	ldr	r0, [pc, #460]	; (80021c4 <HAL_ADC_Init+0x2ec>)
 8001ff8:	f7ff ff34 	bl	8001e64 <LL_ADC_IsEnabled>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4323      	orrs	r3, r4
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	e012      	b.n	8002032 <HAL_ADC_Init+0x15a>
 800200c:	486e      	ldr	r0, [pc, #440]	; (80021c8 <HAL_ADC_Init+0x2f0>)
 800200e:	f7ff ff29 	bl	8001e64 <LL_ADC_IsEnabled>
 8002012:	4604      	mov	r4, r0
 8002014:	486d      	ldr	r0, [pc, #436]	; (80021cc <HAL_ADC_Init+0x2f4>)
 8002016:	f7ff ff25 	bl	8001e64 <LL_ADC_IsEnabled>
 800201a:	4603      	mov	r3, r0
 800201c:	431c      	orrs	r4, r3
 800201e:	486c      	ldr	r0, [pc, #432]	; (80021d0 <HAL_ADC_Init+0x2f8>)
 8002020:	f7ff ff20 	bl	8001e64 <LL_ADC_IsEnabled>
 8002024:	4603      	mov	r3, r0
 8002026:	4323      	orrs	r3, r4
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d012      	beq.n	800205c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800203e:	d004      	beq.n	800204a <HAL_ADC_Init+0x172>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5f      	ldr	r2, [pc, #380]	; (80021c4 <HAL_ADC_Init+0x2ec>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_ADC_Init+0x176>
 800204a:	4a62      	ldr	r2, [pc, #392]	; (80021d4 <HAL_ADC_Init+0x2fc>)
 800204c:	e000      	b.n	8002050 <HAL_ADC_Init+0x178>
 800204e:	4a62      	ldr	r2, [pc, #392]	; (80021d8 <HAL_ADC_Init+0x300>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f7ff fd68 	bl	8001b2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7f5b      	ldrb	r3, [r3, #29]
 8002060:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002066:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800206c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002072:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800207a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002086:	2b01      	cmp	r3, #1
 8002088:	d106      	bne.n	8002098 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	3b01      	subs	r3, #1
 8002090:	045b      	lsls	r3, r3, #17
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	4b48      	ldr	r3, [pc, #288]	; (80021dc <HAL_ADC_Init+0x304>)
 80020bc:	4013      	ands	r3, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fee4 	bl	8001eb0 <LL_ADC_INJ_IsConversionOngoing>
 80020e8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d17f      	bne.n	80021f0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d17c      	bne.n	80021f0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020fa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002102:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002112:	f023 0302 	bic.w	r3, r3, #2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	69b9      	ldr	r1, [r7, #24]
 800211c:	430b      	orrs	r3, r1
 800211e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d017      	beq.n	8002158 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002136:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002140:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002144:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6911      	ldr	r1, [r2, #16]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	430b      	orrs	r3, r1
 8002152:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002156:	e013      	b.n	8002180 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002166:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002178:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800217c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002186:	2b01      	cmp	r3, #1
 8002188:	d12a      	bne.n	80021e0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021a0:	4311      	orrs	r1, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021ac:	430a      	orrs	r2, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	e019      	b.n	80021f0 <HAL_ADC_Init+0x318>
 80021bc:	20000028 	.word	0x20000028
 80021c0:	053e2d63 	.word	0x053e2d63
 80021c4:	50000100 	.word	0x50000100
 80021c8:	50000400 	.word	0x50000400
 80021cc:	50000500 	.word	0x50000500
 80021d0:	50000600 	.word	0x50000600
 80021d4:	50000300 	.word	0x50000300
 80021d8:	50000700 	.word	0x50000700
 80021dc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10c      	bne.n	8002212 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f023 010f 	bic.w	r1, r3, #15
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	1e5a      	subs	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
 8002210:	e007      	b.n	8002222 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 020f 	bic.w	r2, r2, #15
 8002220:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002226:	f023 0303 	bic.w	r3, r3, #3
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	65da      	str	r2, [r3, #92]	; 0x5c
 8002232:	e007      	b.n	8002244 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	f043 0210 	orr.w	r2, r3, #16
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002244:	7ffb      	ldrb	r3, [r7, #31]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd90      	pop	{r4, r7, pc}
 800224e:	bf00      	nop

08002250 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b0b6      	sub	sp, #216	; 0xd8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800226a:	2b01      	cmp	r3, #1
 800226c:	d102      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x24>
 800226e:	2302      	movs	r3, #2
 8002270:	f000 bc13 	b.w	8002a9a <HAL_ADC_ConfigChannel+0x84a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fe02 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 83f3 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	f7ff fd18 	bl	8001cd0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fdf0 	bl	8001e8a <LL_ADC_REG_IsConversionOngoing>
 80022aa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fdfc 	bl	8001eb0 <LL_ADC_INJ_IsConversionOngoing>
 80022b8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 81d9 	bne.w	8002678 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 81d4 	bne.w	8002678 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022d8:	d10f      	bne.n	80022fa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2200      	movs	r2, #0
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7ff fd1f 	bl	8001d28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fcd9 	bl	8001caa <LL_ADC_SetSamplingTimeCommonConfig>
 80022f8:	e00e      	b.n	8002318 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6819      	ldr	r1, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	461a      	mov	r2, r3
 8002308:	f7ff fd0e 	bl	8001d28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fcc9 	bl	8001caa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	08db      	lsrs	r3, r3, #3
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b04      	cmp	r3, #4
 8002338:	d022      	beq.n	8002380 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6919      	ldr	r1, [r3, #16]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800234a:	f7ff fc23 	bl	8001b94 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff fc6f 	bl	8001c3e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800236c:	2b01      	cmp	r3, #1
 800236e:	d102      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x126>
 8002370:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002374:	e000      	b.n	8002378 <HAL_ADC_ConfigChannel+0x128>
 8002376:	2300      	movs	r3, #0
 8002378:	461a      	mov	r2, r3
 800237a:	f7ff fc7b 	bl	8001c74 <LL_ADC_SetOffsetSaturation>
 800237e:	e17b      	b.n	8002678 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff fc28 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10a      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x15c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fc1d 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	f003 021f 	and.w	r2, r3, #31
 80023aa:	e01e      	b.n	80023ea <HAL_ADC_ConfigChannel+0x19a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fc12 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80023da:	2320      	movs	r3, #32
 80023dc:	e004      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80023de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x1b2>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0e9b      	lsrs	r3, r3, #26
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	e018      	b.n	8002434 <HAL_ADC_ConfigChannel+0x1e4>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800241a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800241e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002426:	2320      	movs	r3, #32
 8002428:	e004      	b.n	8002434 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800242a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800242e:	fab3 f383 	clz	r3, r3
 8002432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002434:	429a      	cmp	r2, r3
 8002436:	d106      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2200      	movs	r2, #0
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fbe1 	bl	8001c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2101      	movs	r1, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fbc5 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x222>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fbba 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	e01e      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x260>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fbaf 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e004      	b.n	80024ae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80024a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x278>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	e018      	b.n	80024fa <HAL_ADC_ConfigChannel+0x2aa>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e004      	b.n	80024fa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80024f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d106      	bne.n	800250c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	2101      	movs	r1, #1
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fb7e 	bl	8001c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2102      	movs	r1, #2
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fb62 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x2e8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2102      	movs	r1, #2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fb57 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 021f 	and.w	r2, r3, #31
 8002536:	e01e      	b.n	8002576 <HAL_ADC_ConfigChannel+0x326>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2102      	movs	r1, #2
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fb4c 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002556:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800255a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800255e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e004      	b.n	8002574 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800256a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_ADC_ConfigChannel+0x33e>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	e016      	b.n	80025bc <HAL_ADC_ConfigChannel+0x36c>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80025ae:	2320      	movs	r3, #32
 80025b0:	e004      	b.n	80025bc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80025b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025b6:	fab3 f383 	clz	r3, r3
 80025ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025bc:	429a      	cmp	r2, r3
 80025be:	d106      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2200      	movs	r2, #0
 80025c6:	2102      	movs	r1, #2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fb1d 	bl	8001c08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2103      	movs	r1, #3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fb01 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x3aa>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2103      	movs	r1, #3
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff faf6 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	0e9b      	lsrs	r3, r3, #26
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	e017      	b.n	800262a <HAL_ADC_ConfigChannel+0x3da>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2103      	movs	r1, #3
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff faeb 	bl	8001bdc <LL_ADC_GetOffsetChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002614:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800261c:	2320      	movs	r3, #32
 800261e:	e003      	b.n	8002628 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x3f2>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	e011      	b.n	8002666 <HAL_ADC_ConfigChannel+0x416>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002652:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800265a:	2320      	movs	r3, #32
 800265c:	e003      	b.n	8002666 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800265e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002666:	429a      	cmp	r2, r3
 8002668:	d106      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	2103      	movs	r1, #3
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fac8 	bl	8001c08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fbf1 	bl	8001e64 <LL_ADC_IsEnabled>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	f040 813d 	bne.w	8002904 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6819      	ldr	r1, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	461a      	mov	r2, r3
 8002698:	f7ff fb72 	bl	8001d80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4aa2      	ldr	r2, [pc, #648]	; (800292c <HAL_ADC_ConfigChannel+0x6dc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	f040 812e 	bne.w	8002904 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10b      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x480>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2b09      	cmp	r3, #9
 80026c6:	bf94      	ite	ls
 80026c8:	2301      	movls	r3, #1
 80026ca:	2300      	movhi	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e019      	b.n	8002704 <HAL_ADC_ConfigChannel+0x4b4>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80026e8:	2320      	movs	r3, #32
 80026ea:	e003      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80026ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ee:	fab3 f383 	clz	r3, r3
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	2b09      	cmp	r3, #9
 80026fc:	bf94      	ite	ls
 80026fe:	2301      	movls	r3, #1
 8002700:	2300      	movhi	r3, #0
 8002702:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002704:	2b00      	cmp	r3, #0
 8002706:	d079      	beq.n	80027fc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x4d4>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	3301      	adds	r3, #1
 800271c:	069b      	lsls	r3, r3, #26
 800271e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002722:	e015      	b.n	8002750 <HAL_ADC_ConfigChannel+0x500>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002734:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800273c:	2320      	movs	r3, #32
 800273e:	e003      	b.n	8002748 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	069b      	lsls	r3, r3, #26
 800274c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x520>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e9b      	lsrs	r3, r3, #26
 8002762:	3301      	adds	r3, #1
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2101      	movs	r1, #1
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	e017      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x550>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800277e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002780:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800278c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	ea42 0103 	orr.w	r1, r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x576>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	051b      	lsls	r3, r3, #20
 80027c4:	e018      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x5a8>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80027de:	2320      	movs	r3, #32
 80027e0:	e003      	b.n	80027ea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80027e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f003 021f 	and.w	r2, r3, #31
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f8:	430b      	orrs	r3, r1
 80027fa:	e07e      	b.n	80028fa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x5c8>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	3301      	adds	r3, #1
 8002810:	069b      	lsls	r3, r3, #26
 8002812:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002816:	e015      	b.n	8002844 <HAL_ADC_ConfigChannel+0x5f4>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002830:	2320      	movs	r3, #32
 8002832:	e003      	b.n	800283c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	3301      	adds	r3, #1
 800283e:	069b      	lsls	r3, r3, #26
 8002840:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x614>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	3301      	adds	r3, #1
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	e017      	b.n	8002894 <HAL_ADC_ConfigChannel+0x644>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	61fb      	str	r3, [r7, #28]
  return result;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800287c:	2320      	movs	r3, #32
 800287e:	e003      	b.n	8002888 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3301      	adds	r3, #1
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	2101      	movs	r1, #1
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	ea42 0103 	orr.w	r1, r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10d      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x670>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	3301      	adds	r3, #1
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	3b1e      	subs	r3, #30
 80028b8:	051b      	lsls	r3, r3, #20
 80028ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028be:	e01b      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x6a8>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	613b      	str	r3, [r7, #16]
  return result;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e003      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f003 021f 	and.w	r2, r3, #31
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	3b1e      	subs	r3, #30
 80028f2:	051b      	lsls	r3, r3, #20
 80028f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028fe:	4619      	mov	r1, r3
 8002900:	f7ff fa12 	bl	8001d28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_ADC_ConfigChannel+0x6e0>)
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80be 	beq.w	8002a8e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800291a:	d004      	beq.n	8002926 <HAL_ADC_ConfigChannel+0x6d6>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_ADC_ConfigChannel+0x6e4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10a      	bne.n	800293c <HAL_ADC_ConfigChannel+0x6ec>
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <HAL_ADC_ConfigChannel+0x6e8>)
 8002928:	e009      	b.n	800293e <HAL_ADC_ConfigChannel+0x6ee>
 800292a:	bf00      	nop
 800292c:	407f0000 	.word	0x407f0000
 8002930:	80080000 	.word	0x80080000
 8002934:	50000100 	.word	0x50000100
 8002938:	50000300 	.word	0x50000300
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_ADC_ConfigChannel+0x854>)
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f91a 	bl	8001b78 <LL_ADC_GetCommonPathInternalCh>
 8002944:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a56      	ldr	r2, [pc, #344]	; (8002aa8 <HAL_ADC_ConfigChannel+0x858>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_ADC_ConfigChannel+0x70c>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a55      	ldr	r2, [pc, #340]	; (8002aac <HAL_ADC_ConfigChannel+0x85c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d13a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800295c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d134      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002970:	d005      	beq.n	800297e <HAL_ADC_ConfigChannel+0x72e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a4e      	ldr	r2, [pc, #312]	; (8002ab0 <HAL_ADC_ConfigChannel+0x860>)
 8002978:	4293      	cmp	r3, r2
 800297a:	f040 8085 	bne.w	8002a88 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002986:	d004      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x742>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a49      	ldr	r2, [pc, #292]	; (8002ab4 <HAL_ADC_ConfigChannel+0x864>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x746>
 8002992:	4a49      	ldr	r2, [pc, #292]	; (8002ab8 <HAL_ADC_ConfigChannel+0x868>)
 8002994:	e000      	b.n	8002998 <HAL_ADC_ConfigChannel+0x748>
 8002996:	4a43      	ldr	r2, [pc, #268]	; (8002aa4 <HAL_ADC_ConfigChannel+0x854>)
 8002998:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800299c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f7ff f8d5 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a8:	4b44      	ldr	r3, [pc, #272]	; (8002abc <HAL_ADC_ConfigChannel+0x86c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	4a44      	ldr	r2, [pc, #272]	; (8002ac0 <HAL_ADC_ConfigChannel+0x870>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	099b      	lsrs	r3, r3, #6
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029c2:	e002      	b.n	80029ca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f9      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029d0:	e05a      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a3b      	ldr	r2, [pc, #236]	; (8002ac4 <HAL_ADC_ConfigChannel+0x874>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d125      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d11f      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a31      	ldr	r2, [pc, #196]	; (8002ab4 <HAL_ADC_ConfigChannel+0x864>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d104      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x7ac>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a34      	ldr	r2, [pc, #208]	; (8002ac8 <HAL_ADC_ConfigChannel+0x878>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d047      	beq.n	8002a8c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a04:	d004      	beq.n	8002a10 <HAL_ADC_ConfigChannel+0x7c0>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a2a      	ldr	r2, [pc, #168]	; (8002ab4 <HAL_ADC_ConfigChannel+0x864>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x7c4>
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <HAL_ADC_ConfigChannel+0x868>)
 8002a12:	e000      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x7c6>
 8002a14:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <HAL_ADC_ConfigChannel+0x854>)
 8002a16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4610      	mov	r0, r2
 8002a22:	f7ff f896 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a26:	e031      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a27      	ldr	r2, [pc, #156]	; (8002acc <HAL_ADC_ConfigChannel+0x87c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d12d      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d127      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_ADC_ConfigChannel+0x864>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a50:	d004      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0x80c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <HAL_ADC_ConfigChannel+0x864>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x810>
 8002a5c:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <HAL_ADC_ConfigChannel+0x868>)
 8002a5e:	e000      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x812>
 8002a60:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_ADC_ConfigChannel+0x854>)
 8002a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f7ff f870 	bl	8001b52 <LL_ADC_SetCommonPathInternalCh>
 8002a72:	e00c      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a86:	e002      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a88:	bf00      	nop
 8002a8a:	e000      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a96:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	37d8      	adds	r7, #216	; 0xd8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	50000700 	.word	0x50000700
 8002aa8:	c3210000 	.word	0xc3210000
 8002aac:	90c00010 	.word	0x90c00010
 8002ab0:	50000600 	.word	0x50000600
 8002ab4:	50000100 	.word	0x50000100
 8002ab8:	50000300 	.word	0x50000300
 8002abc:	20000028 	.word	0x20000028
 8002ac0:	053e2d63 	.word	0x053e2d63
 8002ac4:	c7520000 	.word	0xc7520000
 8002ac8:	50000500 	.word	0x50000500
 8002acc:	cb840000 	.word	0xcb840000

08002ad0 <LL_ADC_IsEnabled>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <LL_ADC_IsEnabled+0x18>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <LL_ADC_IsEnabled+0x1a>
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d101      	bne.n	8002b0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b0a1      	sub	sp, #132	; 0x84
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e0e7      	b.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b42:	2300      	movs	r3, #0
 8002b44:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b46:	2300      	movs	r3, #0
 8002b48:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b52:	d102      	bne.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b54:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	e009      	b.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6e      	ldr	r2, [pc, #440]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d102      	bne.n	8002b6a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002b64:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	e001      	b.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	f043 0220 	orr.w	r2, r3, #32
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0be      	b.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ffb1 	bl	8002af6 <LL_ADC_REG_IsConversionOngoing>
 8002b94:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ffab 	bl	8002af6 <LL_ADC_REG_IsConversionOngoing>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 80a0 	bne.w	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 809c 	bne.w	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bb8:	d004      	beq.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a55      	ldr	r2, [pc, #340]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002bc4:	4b56      	ldr	r3, [pc, #344]	; (8002d20 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002bc6:	e000      	b.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002bc8:	4b56      	ldr	r3, [pc, #344]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002bca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d04b      	beq.n	8002c6c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002be6:	035b      	lsls	r3, r3, #13
 8002be8:	430b      	orrs	r3, r1
 8002bea:	431a      	orrs	r2, r3
 8002bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf8:	d004      	beq.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a45      	ldr	r2, [pc, #276]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10f      	bne.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c08:	f7ff ff62 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	4841      	ldr	r0, [pc, #260]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c10:	f7ff ff5e 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c14:	4603      	mov	r3, r0
 8002c16:	4323      	orrs	r3, r4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e012      	b.n	8002c4a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c24:	483c      	ldr	r0, [pc, #240]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c26:	f7ff ff53 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	483b      	ldr	r0, [pc, #236]	; (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c2e:	f7ff ff4f 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	431c      	orrs	r4, r3
 8002c36:	483c      	ldr	r0, [pc, #240]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c38:	f7ff ff4a 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4323      	orrs	r3, r4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d056      	beq.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c56:	f023 030f 	bic.w	r3, r3, #15
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	6811      	ldr	r1, [r2, #0]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	6892      	ldr	r2, [r2, #8]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	431a      	orrs	r2, r3
 8002c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c68:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c6a:	e047      	b.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c76:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c80:	d004      	beq.n	8002c8c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a23      	ldr	r2, [pc, #140]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d10f      	bne.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002c8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c90:	f7ff ff1e 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c94:	4604      	mov	r4, r0
 8002c96:	481f      	ldr	r0, [pc, #124]	; (8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c98:	f7ff ff1a 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e012      	b.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002cac:	481a      	ldr	r0, [pc, #104]	; (8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002cae:	f7ff ff0f 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	4819      	ldr	r0, [pc, #100]	; (8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002cb6:	f7ff ff0b 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	431c      	orrs	r4, r3
 8002cbe:	481a      	ldr	r0, [pc, #104]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002cc0:	f7ff ff06 	bl	8002ad0 <LL_ADC_IsEnabled>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4323      	orrs	r3, r4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d012      	beq.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cde:	f023 030f 	bic.w	r3, r3, #15
 8002ce2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ce4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce6:	e009      	b.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	f043 0220 	orr.w	r2, r3, #32
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002cfa:	e000      	b.n	8002cfe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cfc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3784      	adds	r7, #132	; 0x84
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}
 8002d12:	bf00      	nop
 8002d14:	50000100 	.word	0x50000100
 8002d18:	50000400 	.word	0x50000400
 8002d1c:	50000500 	.word	0x50000500
 8002d20:	50000300 	.word	0x50000300
 8002d24:	50000700 	.word	0x50000700
 8002d28:	50000600 	.word	0x50000600

08002d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60d3      	str	r3, [r2, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <__NVIC_GetPriorityGrouping+0x18>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 0307 	and.w	r3, r3, #7
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	db0a      	blt.n	8002dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	490c      	ldr	r1, [pc, #48]	; (8002ddc <__NVIC_SetPriority+0x4c>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	0112      	lsls	r2, r2, #4
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	440b      	add	r3, r1
 8002db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db8:	e00a      	b.n	8002dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4908      	ldr	r1, [pc, #32]	; (8002de0 <__NVIC_SetPriority+0x50>)
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	3b04      	subs	r3, #4
 8002dc8:	0112      	lsls	r2, r2, #4
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	440b      	add	r3, r1
 8002dce:	761a      	strb	r2, [r3, #24]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000e100 	.word	0xe000e100
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f1c3 0307 	rsb	r3, r3, #7
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	bf28      	it	cs
 8002e02:	2304      	movcs	r3, #4
 8002e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d902      	bls.n	8002e14 <NVIC_EncodePriority+0x30>
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3b03      	subs	r3, #3
 8002e12:	e000      	b.n	8002e16 <NVIC_EncodePriority+0x32>
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	401a      	ands	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	43d9      	mvns	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	4313      	orrs	r3, r2
         );
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e5c:	d301      	bcc.n	8002e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00f      	b.n	8002e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <SysTick_Config+0x40>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6a:	210f      	movs	r1, #15
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	f7ff ff8e 	bl	8002d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <SysTick_Config+0x40>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <SysTick_Config+0x40>)
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	e000e010 	.word	0xe000e010

08002e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff47 	bl	8002d2c <__NVIC_SetPriorityGrouping>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb4:	f7ff ff5e 	bl	8002d74 <__NVIC_GetPriorityGrouping>
 8002eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	6978      	ldr	r0, [r7, #20]
 8002ec0:	f7ff ff90 	bl	8002de4 <NVIC_EncodePriority>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff5f 	bl	8002d90 <__NVIC_SetPriority>
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ffb2 	bl	8002e4c <SysTick_Config>
 8002ee8:	4603      	mov	r3, r0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e033      	b.n	8002f6c <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fe fa17 	bl	800134c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f854 	bl	8002fd2 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f822 	bl	8002f74 <FMAC_Reset>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	f043 0210 	orr.w	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	22a0      	movs	r2, #160	; 0xa0
 8002f46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	e008      	b.n	8002f62 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f7c:	f7fe fdca 	bl	8001b14 <HAL_GetTick>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f90:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8002f92:	e00f      	b.n	8002fb4 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8002f94:	f7fe fdbe 	bl	8001b14 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fa2:	d907      	bls.n	8002fb4 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e00a      	b.n	8002fca <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e8      	bne.n	8002f94 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f807 	bl	8002fee <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f81b 	bl	800301c <FMAC_ResetOutputStateAndDataPointers>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800305a:	e15a      	b.n	8003312 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2101      	movs	r1, #1
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 814c 	beq.w	800330c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b01      	cmp	r3, #1
 800307e:	d005      	beq.n	800308c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003088:	2b02      	cmp	r3, #2
 800308a:	d130      	bne.n	80030ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030c2:	2201      	movs	r2, #1
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f003 0201 	and.w	r2, r3, #1
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d017      	beq.n	800312a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	2203      	movs	r2, #3
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d123      	bne.n	800317e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	08da      	lsrs	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3208      	adds	r2, #8
 800313e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	220f      	movs	r2, #15
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4013      	ands	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	08da      	lsrs	r2, r3, #3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3208      	adds	r2, #8
 8003178:	6939      	ldr	r1, [r7, #16]
 800317a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	2203      	movs	r2, #3
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0203 	and.w	r2, r3, #3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80a6 	beq.w	800330c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c0:	4b5b      	ldr	r3, [pc, #364]	; (8003330 <HAL_GPIO_Init+0x2e4>)
 80031c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c4:	4a5a      	ldr	r2, [pc, #360]	; (8003330 <HAL_GPIO_Init+0x2e4>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6613      	str	r3, [r2, #96]	; 0x60
 80031cc:	4b58      	ldr	r3, [pc, #352]	; (8003330 <HAL_GPIO_Init+0x2e4>)
 80031ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031d8:	4a56      	ldr	r2, [pc, #344]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	220f      	movs	r2, #15
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003202:	d01f      	beq.n	8003244 <HAL_GPIO_Init+0x1f8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a4c      	ldr	r2, [pc, #304]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d019      	beq.n	8003240 <HAL_GPIO_Init+0x1f4>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a4b      	ldr	r2, [pc, #300]	; (800333c <HAL_GPIO_Init+0x2f0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d013      	beq.n	800323c <HAL_GPIO_Init+0x1f0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a4a      	ldr	r2, [pc, #296]	; (8003340 <HAL_GPIO_Init+0x2f4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00d      	beq.n	8003238 <HAL_GPIO_Init+0x1ec>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a49      	ldr	r2, [pc, #292]	; (8003344 <HAL_GPIO_Init+0x2f8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d007      	beq.n	8003234 <HAL_GPIO_Init+0x1e8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a48      	ldr	r2, [pc, #288]	; (8003348 <HAL_GPIO_Init+0x2fc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_GPIO_Init+0x1e4>
 800322c:	2305      	movs	r3, #5
 800322e:	e00a      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 8003230:	2306      	movs	r3, #6
 8003232:	e008      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 8003234:	2304      	movs	r3, #4
 8003236:	e006      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 8003238:	2303      	movs	r3, #3
 800323a:	e004      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 800323c:	2302      	movs	r3, #2
 800323e:	e002      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <HAL_GPIO_Init+0x1fa>
 8003244:	2300      	movs	r3, #0
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	f002 0203 	and.w	r2, r2, #3
 800324c:	0092      	lsls	r2, r2, #2
 800324e:	4093      	lsls	r3, r2
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003256:	4937      	ldr	r1, [pc, #220]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3302      	adds	r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003264:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_GPIO_Init+0x300>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003288:	4a30      	ldr	r2, [pc, #192]	; (800334c <HAL_GPIO_Init+0x300>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800328e:	4b2f      	ldr	r3, [pc, #188]	; (800334c <HAL_GPIO_Init+0x300>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	43db      	mvns	r3, r3
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032b2:	4a26      	ldr	r2, [pc, #152]	; (800334c <HAL_GPIO_Init+0x300>)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80032b8:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_GPIO_Init+0x300>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032dc:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_GPIO_Init+0x300>)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	; (800334c <HAL_GPIO_Init+0x300>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003306:	4a11      	ldr	r2, [pc, #68]	; (800334c <HAL_GPIO_Init+0x300>)
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3301      	adds	r3, #1
 8003310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	f47f ae9d 	bne.w	800305c <HAL_GPIO_Init+0x10>
  }
}
 8003322:	bf00      	nop
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40021000 	.word	0x40021000
 8003334:	40010000 	.word	0x40010000
 8003338:	48000400 	.word	0x48000400
 800333c:	48000800 	.word	0x48000800
 8003340:	48000c00 	.word	0x48000c00
 8003344:	48001000 	.word	0x48001000
 8003348:	48001400 	.word	0x48001400
 800334c:	40010400 	.word	0x40010400

08003350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
 800335c:	4613      	mov	r3, r2
 800335e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003360:	787b      	ldrb	r3, [r7, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800336c:	e002      	b.n	8003374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800336e:	887a      	ldrh	r2, [r7, #2]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0be      	b.n	8003510 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02e      	beq.n	800343c <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a4d      	ldr	r2, [pc, #308]	; (8003518 <HAL_HRTIM_Init+0x198>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10b      	bne.n	8003400 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80033e8:	4b4c      	ldr	r3, [pc, #304]	; (800351c <HAL_HRTIM_Init+0x19c>)
 80033ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ec:	4a4b      	ldr	r2, [pc, #300]	; (800351c <HAL_HRTIM_Init+0x19c>)
 80033ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033f2:	6613      	str	r3, [r2, #96]	; 0x60
 80033f4:	4b49      	ldr	r3, [pc, #292]	; (800351c <HAL_HRTIM_Init+0x19c>)
 80033f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800340e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003424:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fd ffa5 	bl	800138c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d012      	beq.n	8003474 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8003484:	2300      	movs	r3, #0
 8003486:	75fb      	strb	r3, [r7, #23]
 8003488:	e03e      	b.n	8003508 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800348a:	7dfa      	ldrb	r2, [r7, #23]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3318      	adds	r3, #24
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800349e:	7dfa      	ldrb	r2, [r7, #23]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	331c      	adds	r3, #28
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80034b2:	7dfa      	ldrb	r2, [r7, #23]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3320      	adds	r3, #32
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80034c6:	7dfa      	ldrb	r2, [r7, #23]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	3324      	adds	r3, #36	; 0x24
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80034da:	7dfa      	ldrb	r2, [r7, #23]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3328      	adds	r3, #40	; 0x28
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80034ee:	7dfa      	ldrb	r2, [r7, #23]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	3330      	adds	r3, #48	; 0x30
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	3301      	adds	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b06      	cmp	r3, #6
 800350c:	d9bd      	bls.n	800348a <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40016800 	.word	0x40016800
 800351c:	40021000 	.word	0x40021000

08003520 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8003534:	2302      	movs	r3, #2
 8003536:	e045      	b.n	80035c4 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d114      	bne.n	800357a <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0202 	bic.w	r2, r2, #2
 8003560:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8003578:	e01f      	b.n	80035ba <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0202 	orr.w	r2, r2, #2
 800358a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8003596:	f023 010c 	bic.w	r1, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80035da:	f7fe fa9b 	bl	8001b14 <HAL_GetTick>
 80035de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80035e0:	e014      	b.n	800360c <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d010      	beq.n	800360c <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	f7fe fa93 	bl	8001b14 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d302      	bcc.n	8003600 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2207      	movs	r2, #7
 8003604:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e011      	b.n	8003630 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8003614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d1e1      	bne.n	80035e2 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d101      	bne.n	8003654 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
 8003652:	e015      	b.n	8003680 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b06      	cmp	r3, #6
 8003660:	d104      	bne.n	800366c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f89c 	bl	80037a2 <HRTIM_MasterBase_Config>
 800366a:	e004      	b.n	8003676 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f8c5 	bl	8003800 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d101      	bne.n	80036a4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
 80036a2:	e07a      	b.n	800379a <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e073      	b.n	800379a <HAL_HRTIM_WaveformTimerConfig+0x112>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b06      	cmp	r3, #6
 80036c6:	d104      	bne.n	80036d2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f8d8 	bl	8003880 <HRTIM_MasterWaveform_Config>
 80036d0:	e004      	b.n	80036dc <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f970 	bl	80039bc <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4613      	mov	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4403      	add	r3, r0
 80036ee:	3320      	adds	r3, #32
 80036f0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6859      	ldr	r1, [r3, #4]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4403      	add	r3, r0
 8003704:	3324      	adds	r3, #36	; 0x24
 8003706:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6899      	ldr	r1, [r3, #8]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4403      	add	r3, r0
 800371a:	3328      	adds	r3, #40	; 0x28
 800371c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68d9      	ldr	r1, [r3, #12]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4403      	add	r3, r0
 8003730:	332c      	adds	r3, #44	; 0x2c
 8003732:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6919      	ldr	r1, [r3, #16]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4403      	add	r3, r0
 8003746:	3330      	adds	r3, #48	; 0x30
 8003748:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fabb 	bl	8003cc8 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b06      	cmp	r3, #6
 8003756:	d017      	beq.n	8003788 <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d113      	bne.n	8003788 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	3301      	adds	r3, #1
 8003768:	01db      	lsls	r3, r3, #7
 800376a:	4413      	add	r3, r2
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	025b      	lsls	r3, r3, #9
 8003778:	68f9      	ldr	r1, [r7, #12]
 800377a:	6809      	ldr	r1, [r1, #0]
 800377c:	431a      	orrs	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	3301      	adds	r3, #1
 8003782:	01db      	lsls	r3, r3, #7
 8003784:	440b      	add	r3, r1
 8003786:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
 80037aa:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f023 0318 	bic.w	r3, r3, #24
 80037cc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	6852      	ldr	r2, [r2, #4]
 80037f2:	619a      	str	r2, [r3, #24]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	3301      	adds	r3, #1
 8003814:	01db      	lsls	r3, r3, #7
 8003816:	4413      	add	r3, r2
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0307 	bic.w	r3, r3, #7
 8003822:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f023 0318 	bic.w	r3, r3, #24
 8003834:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	3301      	adds	r3, #1
 8003848:	01db      	lsls	r3, r3, #7
 800384a:	4413      	add	r3, r2
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	01db      	lsls	r3, r3, #7
 800385c:	440b      	add	r3, r1
 800385e:	3394      	adds	r3, #148	; 0x94
 8003860:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6819      	ldr	r1, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	01db      	lsls	r3, r3, #7
 800386e:	440b      	add	r3, r1
 8003870:	3398      	adds	r3, #152	; 0x98
 8003872:	601a      	str	r2, [r3, #0]
}
 8003874:	bf00      	nop
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800389a:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0320 	bic.w	r3, r3, #32
 80038a2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038b4:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d003      	beq.n	80038c6 <HRTIM_MasterWaveform_Config+0x46>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d108      	bne.n	80038d8 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038cc:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f043 0320 	orr.w	r3, r3, #32
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e021      	b.n	800391c <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d108      	bne.n	80038f2 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e6:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e014      	b.n	800391c <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d108      	bne.n	800390c <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003900:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	e007      	b.n	800391c <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0320 	bic.w	r3, r3, #32
 8003912:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800391a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003922:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003934:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003946:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003958:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4313      	orrs	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800396a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800397e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003990:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4313      	orrs	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80039bc:	b480      	push	{r7}
 80039be:	b08b      	sub	sp, #44	; 0x2c
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3301      	adds	r3, #1
 80039d0:	01db      	lsls	r3, r3, #7
 80039d2:	4413      	add	r3, r2
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	6811      	ldr	r1, [r2, #0]
 80039da:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3301      	adds	r3, #1
 80039e2:	01db      	lsls	r3, r3, #7
 80039e4:	440b      	add	r3, r1
 80039e6:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	3301      	adds	r3, #1
 80039f0:	01db      	lsls	r3, r3, #7
 80039f2:	4413      	add	r3, r2
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	01db      	lsls	r3, r3, #7
 8003a00:	4413      	add	r3, r2
 8003a02:	33e8      	adds	r3, #232	; 0xe8
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	01db      	lsls	r3, r3, #7
 8003a10:	4413      	add	r3, r2
 8003a12:	33e4      	adds	r3, #228	; 0xe4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8003a20:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	f023 0320 	bic.w	r3, r3, #32
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	4313      	orrs	r3, r2
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d003      	beq.n	8003a44 <HRTIM_TimingUnitWaveform_Config+0x88>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d108      	bne.n	8003a56 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	f043 0320 	orr.w	r3, r3, #32
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
 8003a54:	e021      	b.n	8003a9a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d108      	bne.n	8003a70 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	e014      	b.n	8003a9a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d108      	bne.n	8003a8a <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
 8003a88:	e007      	b.n	8003a9a <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	f023 0320 	bic.w	r3, r3, #32
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	4313      	orrs	r3, r2
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	4313      	orrs	r3, r2
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af0:	4313      	orrs	r3, r2
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b04:	d103      	bne.n	8003b0e <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b44:	4313      	orrs	r3, r2
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b4e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b64:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b76:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003b8a:	d004      	beq.n	8003b96 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b90:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8003b94:	d103      	bne.n	8003b9e <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d108      	bne.n	8003bb0 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8003ba4:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003baa:	6a3a      	ldr	r2, [r7, #32]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb6:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d850      	bhi.n	8003c70 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8003bce:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003bed 	.word	0x08003bed
 8003bd8:	08003c03 	.word	0x08003c03
 8003bdc:	08003c19 	.word	0x08003c19
 8003be0:	08003c2f 	.word	0x08003c2f
 8003be4:	08003c45 	.word	0x08003c45
 8003be8:	08003c5b 	.word	0x08003c5b
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003bf2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	69fa      	ldr	r2, [r7, #28]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61fb      	str	r3, [r7, #28]
      break;
 8003c00:	e037      	b.n	8003c72 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c08:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61fb      	str	r3, [r7, #28]
      break;
 8003c16:	e02c      	b.n	8003c72 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003c1e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61fb      	str	r3, [r7, #28]
      break;
 8003c2c:	e021      	b.n	8003c72 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003c34:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61fb      	str	r3, [r7, #28]
      break;
 8003c42:	e016      	b.n	8003c72 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c4a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	015b      	lsls	r3, r3, #5
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61fb      	str	r3, [r7, #28]
      break;
 8003c58:	e00b      	b.n	8003c72 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c60:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	019b      	lsls	r3, r3, #6
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61fb      	str	r3, [r7, #28]
      break;
 8003c6e:	e000      	b.n	8003c72 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8003c70:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	01db      	lsls	r3, r3, #7
 8003c7c:	4413      	add	r3, r2
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c80:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	01db      	lsls	r3, r3, #7
 8003c8a:	4413      	add	r3, r2
 8003c8c:	33e8      	adds	r3, #232	; 0xe8
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	01db      	lsls	r3, r3, #7
 8003c9a:	4413      	add	r3, r2
 8003c9c:	33e4      	adds	r3, #228	; 0xe4
 8003c9e:	6a3a      	ldr	r2, [r7, #32]
 8003ca0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	01db      	lsls	r3, r3, #7
 8003caa:	4413      	add	r3, r2
 8003cac:	33d4      	adds	r3, #212	; 0xd4
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8003cbc:	bf00      	nop
 8003cbe:	372c      	adds	r7, #44	; 0x2c
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b06      	cmp	r3, #6
 8003cd6:	d85e      	bhi.n	8003d96 <HRTIM_ForceRegistersUpdate+0xce>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <HRTIM_ForceRegistersUpdate+0x18>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d13 	.word	0x08003d13
 8003ce4:	08003d29 	.word	0x08003d29
 8003ce8:	08003d3f 	.word	0x08003d3f
 8003cec:	08003d55 	.word	0x08003d55
 8003cf0:	08003d6b 	.word	0x08003d6b
 8003cf4:	08003d81 	.word	0x08003d81
 8003cf8:	08003cfd 	.word	0x08003cfd
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d10:	e042      	b.n	8003d98 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0202 	orr.w	r2, r2, #2
 8003d22:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d26:	e037      	b.n	8003d98 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0204 	orr.w	r2, r2, #4
 8003d38:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d3c:	e02c      	b.n	8003d98 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0208 	orr.w	r2, r2, #8
 8003d4e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d52:	e021      	b.n	8003d98 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0210 	orr.w	r2, r2, #16
 8003d64:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d68:	e016      	b.n	8003d98 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0220 	orr.w	r2, r2, #32
 8003d7a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d7e:	e00b      	b.n	8003d98 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d90:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8003d94:	e000      	b.n	8003d98 <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8003d96:	bf00      	nop
  }
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e0c0      	b.n	8003f38 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fd fda4 	bl	8001918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f003 fa49 	bl	8007274 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	e03e      	b.n	8003e66 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003de8:	7bfa      	ldrb	r2, [r7, #15]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	440b      	add	r3, r1
 8003df6:	3311      	adds	r3, #17
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	440b      	add	r3, r1
 8003e0a:	3310      	adds	r3, #16
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	440b      	add	r3, r1
 8003e1e:	3313      	adds	r3, #19
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	440b      	add	r3, r1
 8003e32:	3320      	adds	r3, #32
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	440b      	add	r3, r1
 8003e46:	3324      	adds	r3, #36	; 0x24
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	440b      	add	r3, r1
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	3301      	adds	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	791b      	ldrb	r3, [r3, #4]
 8003e6a:	7bfa      	ldrb	r2, [r7, #15]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d3bb      	bcc.n	8003de8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e044      	b.n	8003f00 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e76:	7bfa      	ldrb	r2, [r7, #15]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	440b      	add	r3, r1
 8003e9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003e9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ea0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ea2:	7bfa      	ldrb	r2, [r7, #15]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	440b      	add	r3, r1
 8003eb0:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	440b      	add	r3, r1
 8003ec6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	440b      	add	r3, r1
 8003edc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	3301      	adds	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	791b      	ldrb	r3, [r3, #4]
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d3b5      	bcc.n	8003e76 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003f16:	f003 f9c8 	bl	80072aa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7a9b      	ldrb	r3, [r3, #10]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d102      	bne.n	8003f36 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f805 	bl	8003f40 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f043 0302 	orr.w	r3, r3, #2
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d141      	bne.n	8004026 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fa2:	4b4b      	ldr	r3, [pc, #300]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fae:	d131      	bne.n	8004014 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fb0:	4b47      	ldr	r3, [pc, #284]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb6:	4a46      	ldr	r2, [pc, #280]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fc0:	4b43      	ldr	r3, [pc, #268]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fc8:	4a41      	ldr	r2, [pc, #260]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fd0:	4b40      	ldr	r3, [pc, #256]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2232      	movs	r2, #50	; 0x32
 8003fd6:	fb02 f303 	mul.w	r3, r2, r3
 8003fda:	4a3f      	ldr	r2, [pc, #252]	; (80040d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	0c9b      	lsrs	r3, r3, #18
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fe6:	e002      	b.n	8003fee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fee:	4b38      	ldr	r3, [pc, #224]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d102      	bne.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f2      	bne.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004002:	4b33      	ldr	r3, [pc, #204]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400e:	d158      	bne.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e057      	b.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004014:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800401a:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004024:	e04d      	b.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800402c:	d141      	bne.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800402e:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403a:	d131      	bne.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800403c:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004042:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800404c:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004054:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800405c:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2232      	movs	r2, #50	; 0x32
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	0c9b      	lsrs	r3, r3, #18
 800406e:	3301      	adds	r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004072:	e002      	b.n	800407a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3b01      	subs	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800407a:	4b15      	ldr	r3, [pc, #84]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004086:	d102      	bne.n	800408e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f2      	bne.n	8004074 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800408e:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409a:	d112      	bne.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e011      	b.n	80040c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040b0:	e007      	b.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040b2:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040ba:	4a05      	ldr	r2, [pc, #20]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40007000 	.word	0x40007000
 80040d4:	20000028 	.word	0x20000028
 80040d8:	431bde83 	.word	0x431bde83

080040dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80040e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ea:	6093      	str	r3, [r2, #8]
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40007000 	.word	0x40007000

080040fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b088      	sub	sp, #32
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e2fe      	b.n	800470c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d075      	beq.n	8004206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800411a:	4b97      	ldr	r3, [pc, #604]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004124:	4b94      	ldr	r3, [pc, #592]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b0c      	cmp	r3, #12
 8004132:	d102      	bne.n	800413a <HAL_RCC_OscConfig+0x3e>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d002      	beq.n	8004140 <HAL_RCC_OscConfig+0x44>
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d10b      	bne.n	8004158 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004140:	4b8d      	ldr	r3, [pc, #564]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d05b      	beq.n	8004204 <HAL_RCC_OscConfig+0x108>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d157      	bne.n	8004204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e2d9      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004160:	d106      	bne.n	8004170 <HAL_RCC_OscConfig+0x74>
 8004162:	4b85      	ldr	r3, [pc, #532]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a84      	ldr	r2, [pc, #528]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e01d      	b.n	80041ac <HAL_RCC_OscConfig+0xb0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x98>
 800417a:	4b7f      	ldr	r3, [pc, #508]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a7e      	ldr	r2, [pc, #504]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	4b7c      	ldr	r3, [pc, #496]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a7b      	ldr	r2, [pc, #492]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e00b      	b.n	80041ac <HAL_RCC_OscConfig+0xb0>
 8004194:	4b78      	ldr	r3, [pc, #480]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a77      	ldr	r2, [pc, #476]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 800419a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	4b75      	ldr	r3, [pc, #468]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a74      	ldr	r2, [pc, #464]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 80041a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d013      	beq.n	80041dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fcae 	bl	8001b14 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fd fcaa 	bl	8001b14 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b64      	cmp	r3, #100	; 0x64
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e29e      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ce:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0xc0>
 80041da:	e014      	b.n	8004206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd fc9a 	bl	8001b14 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fd fc96 	bl	8001b14 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e28a      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041f6:	4b60      	ldr	r3, [pc, #384]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0xe8>
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d075      	beq.n	80042fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004212:	4b59      	ldr	r3, [pc, #356]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f003 030c 	and.w	r3, r3, #12
 800421a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800421c:	4b56      	ldr	r3, [pc, #344]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2b0c      	cmp	r3, #12
 800422a:	d102      	bne.n	8004232 <HAL_RCC_OscConfig+0x136>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d002      	beq.n	8004238 <HAL_RCC_OscConfig+0x13c>
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d11f      	bne.n	8004278 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004238:	4b4f      	ldr	r3, [pc, #316]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_OscConfig+0x154>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e25d      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004250:	4b49      	ldr	r3, [pc, #292]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	4946      	ldr	r1, [pc, #280]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004260:	4313      	orrs	r3, r2
 8004262:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004264:	4b45      	ldr	r3, [pc, #276]	; (800437c <HAL_RCC_OscConfig+0x280>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd fc07 	bl	8001a7c <HAL_InitTick>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d043      	beq.n	80042fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e249      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d023      	beq.n	80042c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004280:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fc42 	bl	8001b14 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004294:	f7fd fc3e 	bl	8001b14 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e232      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b2:	4b31      	ldr	r3, [pc, #196]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	061b      	lsls	r3, r3, #24
 80042c0:	492d      	ldr	r1, [pc, #180]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
 80042c6:	e01a      	b.n	80042fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042c8:	4b2b      	ldr	r3, [pc, #172]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 80042ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fd fc1e 	bl	8001b14 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042dc:	f7fd fc1a 	bl	8001b14 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e20e      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x1e0>
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d041      	beq.n	800438e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01c      	beq.n	800434c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004312:	4b19      	ldr	r3, [pc, #100]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004318:	4a17      	ldr	r2, [pc, #92]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004322:	f7fd fbf7 	bl	8001b14 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800432a:	f7fd fbf3 	bl	8001b14 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e1e7      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 800433e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ef      	beq.n	800432a <HAL_RCC_OscConfig+0x22e>
 800434a:	e020      	b.n	800438e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 800434e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <HAL_RCC_OscConfig+0x27c>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435c:	f7fd fbda 	bl	8001b14 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004362:	e00d      	b.n	8004380 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004364:	f7fd fbd6 	bl	8001b14 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d906      	bls.n	8004380 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e1ca      	b.n	800470c <HAL_RCC_OscConfig+0x610>
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004380:	4b8c      	ldr	r3, [pc, #560]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ea      	bne.n	8004364 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 80a6 	beq.w	80044e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439c:	2300      	movs	r3, #0
 800439e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043a0:	4b84      	ldr	r3, [pc, #528]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2b4>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x2b6>
 80043b0:	2300      	movs	r3, #0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00d      	beq.n	80043d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b6:	4b7f      	ldr	r3, [pc, #508]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	4a7e      	ldr	r2, [pc, #504]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 80043bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c0:	6593      	str	r3, [r2, #88]	; 0x58
 80043c2:	4b7c      	ldr	r3, [pc, #496]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043ce:	2301      	movs	r3, #1
 80043d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d2:	4b79      	ldr	r3, [pc, #484]	; (80045b8 <HAL_RCC_OscConfig+0x4bc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d118      	bne.n	8004410 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043de:	4b76      	ldr	r3, [pc, #472]	; (80045b8 <HAL_RCC_OscConfig+0x4bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a75      	ldr	r2, [pc, #468]	; (80045b8 <HAL_RCC_OscConfig+0x4bc>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7fd fb93 	bl	8001b14 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f2:	f7fd fb8f 	bl	8001b14 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e183      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004404:	4b6c      	ldr	r3, [pc, #432]	; (80045b8 <HAL_RCC_OscConfig+0x4bc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d108      	bne.n	800442a <HAL_RCC_OscConfig+0x32e>
 8004418:	4b66      	ldr	r3, [pc, #408]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441e:	4a65      	ldr	r2, [pc, #404]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004428:	e024      	b.n	8004474 <HAL_RCC_OscConfig+0x378>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	2b05      	cmp	r3, #5
 8004430:	d110      	bne.n	8004454 <HAL_RCC_OscConfig+0x358>
 8004432:	4b60      	ldr	r3, [pc, #384]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004438:	4a5e      	ldr	r2, [pc, #376]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004442:	4b5c      	ldr	r3, [pc, #368]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004448:	4a5a      	ldr	r2, [pc, #360]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004452:	e00f      	b.n	8004474 <HAL_RCC_OscConfig+0x378>
 8004454:	4b57      	ldr	r3, [pc, #348]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445a:	4a56      	ldr	r2, [pc, #344]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004464:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	4a52      	ldr	r2, [pc, #328]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	f023 0304 	bic.w	r3, r3, #4
 8004470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d016      	beq.n	80044aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fd fb4a 	bl	8001b14 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004482:	e00a      	b.n	800449a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004484:	f7fd fb46 	bl	8001b14 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004492:	4293      	cmp	r3, r2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e138      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800449a:	4b46      	ldr	r3, [pc, #280]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0ed      	beq.n	8004484 <HAL_RCC_OscConfig+0x388>
 80044a8:	e015      	b.n	80044d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044aa:	f7fd fb33 	bl	8001b14 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044b0:	e00a      	b.n	80044c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b2:	f7fd fb2f 	bl	8001b14 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e121      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044c8:	4b3a      	ldr	r3, [pc, #232]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1ed      	bne.n	80044b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044d6:	7ffb      	ldrb	r3, [r7, #31]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d105      	bne.n	80044e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044dc:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 80044de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e0:	4a34      	ldr	r2, [pc, #208]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 80044e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d03c      	beq.n	800456e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01c      	beq.n	8004536 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80044fc:	4b2d      	ldr	r3, [pc, #180]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 80044fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004502:	4a2c      	ldr	r2, [pc, #176]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450c:	f7fd fb02 	bl	8001b14 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004514:	f7fd fafe 	bl	8001b14 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0f2      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004526:	4b23      	ldr	r3, [pc, #140]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004528:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ef      	beq.n	8004514 <HAL_RCC_OscConfig+0x418>
 8004534:	e01b      	b.n	800456e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004536:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004538:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800453c:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fd fae5 	bl	8001b14 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800454e:	f7fd fae1 	bl	8001b14 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e0d5      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004560:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1ef      	bne.n	800454e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80c9 	beq.w	800470a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030c 	and.w	r3, r3, #12
 8004580:	2b0c      	cmp	r3, #12
 8004582:	f000 8083 	beq.w	800468c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d15e      	bne.n	800464c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <HAL_RCC_OscConfig+0x4b8>)
 8004594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459a:	f7fd fabb 	bl	8001b14 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a0:	e00c      	b.n	80045bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a2:	f7fd fab7 	bl	8001b14 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d905      	bls.n	80045bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e0ab      	b.n	800470c <HAL_RCC_OscConfig+0x610>
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045bc:	4b55      	ldr	r3, [pc, #340]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ec      	bne.n	80045a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045c8:	4b52      	ldr	r3, [pc, #328]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	4b52      	ldr	r3, [pc, #328]	; (8004718 <HAL_RCC_OscConfig+0x61c>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6a11      	ldr	r1, [r2, #32]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045d8:	3a01      	subs	r2, #1
 80045da:	0112      	lsls	r2, r2, #4
 80045dc:	4311      	orrs	r1, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80045e2:	0212      	lsls	r2, r2, #8
 80045e4:	4311      	orrs	r1, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045ea:	0852      	lsrs	r2, r2, #1
 80045ec:	3a01      	subs	r2, #1
 80045ee:	0552      	lsls	r2, r2, #21
 80045f0:	4311      	orrs	r1, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f6:	0852      	lsrs	r2, r2, #1
 80045f8:	3a01      	subs	r2, #1
 80045fa:	0652      	lsls	r2, r2, #25
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004602:	06d2      	lsls	r2, r2, #27
 8004604:	430a      	orrs	r2, r1
 8004606:	4943      	ldr	r1, [pc, #268]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004608:	4313      	orrs	r3, r2
 800460a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800460c:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a40      	ldr	r2, [pc, #256]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004616:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004618:	4b3e      	ldr	r3, [pc, #248]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a3d      	ldr	r2, [pc, #244]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800461e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004622:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fd fa76 	bl	8001b14 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800462c:	f7fd fa72 	bl	8001b14 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e066      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800463e:	4b35      	ldr	r3, [pc, #212]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x530>
 800464a:	e05e      	b.n	800470a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464c:	4b31      	ldr	r3, [pc, #196]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a30      	ldr	r2, [pc, #192]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd fa5c 	bl	8001b14 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004660:	f7fd fa58 	bl	8001b14 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e04c      	b.n	800470c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004672:	4b28      	ldr	r3, [pc, #160]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800467e:	4b25      	ldr	r3, [pc, #148]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	4924      	ldr	r1, [pc, #144]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 8004684:	4b25      	ldr	r3, [pc, #148]	; (800471c <HAL_RCC_OscConfig+0x620>)
 8004686:	4013      	ands	r3, r2
 8004688:	60cb      	str	r3, [r1, #12]
 800468a:	e03e      	b.n	800470a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e039      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004698:	4b1e      	ldr	r3, [pc, #120]	; (8004714 <HAL_RCC_OscConfig+0x618>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f003 0203 	and.w	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d12c      	bne.n	8004706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	3b01      	subs	r3, #1
 80046b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d123      	bne.n	8004706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d11b      	bne.n	8004706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d113      	bne.n	8004706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	3b01      	subs	r3, #1
 80046ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d109      	bne.n	8004706 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	3b01      	subs	r3, #1
 8004700:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3720      	adds	r7, #32
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	019f800c 	.word	0x019f800c
 800471c:	feeefffc 	.word	0xfeeefffc

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e11e      	b.n	8004976 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004738:	4b91      	ldr	r3, [pc, #580]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 030f 	and.w	r3, r3, #15
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d910      	bls.n	8004768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004746:	4b8e      	ldr	r3, [pc, #568]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 020f 	bic.w	r2, r3, #15
 800474e:	498c      	ldr	r1, [pc, #560]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004756:	4b8a      	ldr	r3, [pc, #552]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	429a      	cmp	r2, r3
 8004762:	d001      	beq.n	8004768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e106      	b.n	8004976 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d073      	beq.n	800485c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d129      	bne.n	80047d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477c:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0f4      	b.n	8004976 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800478c:	f000 f99e 	bl	8004acc <RCC_GetSysClockFreqFromPLLSource>
 8004790:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4a7c      	ldr	r2, [pc, #496]	; (8004988 <HAL_RCC_ClockConfig+0x268>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d93f      	bls.n	800481a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800479a:	4b7a      	ldr	r3, [pc, #488]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d033      	beq.n	800481a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d12f      	bne.n	800481a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047ba:	4b72      	ldr	r3, [pc, #456]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047c2:	4a70      	ldr	r2, [pc, #448]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 80047c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	e024      	b.n	800481a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d107      	bne.n	80047e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047d8:	4b6a      	ldr	r3, [pc, #424]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0c6      	b.n	8004976 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047e8:	4b66      	ldr	r3, [pc, #408]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0be      	b.n	8004976 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80047f8:	f000 f8ce 	bl	8004998 <HAL_RCC_GetSysClockFreq>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4a61      	ldr	r2, [pc, #388]	; (8004988 <HAL_RCC_ClockConfig+0x268>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d909      	bls.n	800481a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004806:	4b5f      	ldr	r3, [pc, #380]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480e:	4a5d      	ldr	r2, [pc, #372]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 8004810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004814:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800481a:	4b5a      	ldr	r3, [pc, #360]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 0203 	bic.w	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4957      	ldr	r1, [pc, #348]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 8004828:	4313      	orrs	r3, r2
 800482a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482c:	f7fd f972 	bl	8001b14 <HAL_GetTick>
 8004830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004832:	e00a      	b.n	800484a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004834:	f7fd f96e 	bl	8001b14 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e095      	b.n	8004976 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484a:	4b4e      	ldr	r3, [pc, #312]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 020c 	and.w	r2, r3, #12
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	429a      	cmp	r2, r3
 800485a:	d1eb      	bne.n	8004834 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d023      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004874:	4b43      	ldr	r3, [pc, #268]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	4a42      	ldr	r2, [pc, #264]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 800487a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800487e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800488c:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004894:	4a3b      	ldr	r2, [pc, #236]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 8004896:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800489a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4936      	ldr	r1, [pc, #216]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b80      	cmp	r3, #128	; 0x80
 80048b4:	d105      	bne.n	80048c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048b6:	4b33      	ldr	r3, [pc, #204]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	4a32      	ldr	r2, [pc, #200]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 80048bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048c2:	4b2f      	ldr	r3, [pc, #188]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d21d      	bcs.n	800490c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d0:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 020f 	bic.w	r2, r3, #15
 80048d8:	4929      	ldr	r1, [pc, #164]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	4313      	orrs	r3, r2
 80048de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048e0:	f7fd f918 	bl	8001b14 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e8:	f7fd f914 	bl	8001b14 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e03b      	b.n	8004976 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_RCC_ClockConfig+0x260>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d1ed      	bne.n	80048e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004918:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	4917      	ldr	r1, [pc, #92]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	490f      	ldr	r1, [pc, #60]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 8004946:	4313      	orrs	r3, r2
 8004948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800494a:	f000 f825 	bl	8004998 <HAL_RCC_GetSysClockFreq>
 800494e:	4602      	mov	r2, r0
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <HAL_RCC_ClockConfig+0x264>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	490c      	ldr	r1, [pc, #48]	; (800498c <HAL_RCC_ClockConfig+0x26c>)
 800495c:	5ccb      	ldrb	r3, [r1, r3]
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	fa22 f303 	lsr.w	r3, r2, r3
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <HAL_RCC_ClockConfig+0x270>)
 8004968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800496a:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <HAL_RCC_ClockConfig+0x274>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd f884 	bl	8001a7c <HAL_InitTick>
 8004974:	4603      	mov	r3, r0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40022000 	.word	0x40022000
 8004984:	40021000 	.word	0x40021000
 8004988:	04c4b400 	.word	0x04c4b400
 800498c:	0800788c 	.word	0x0800788c
 8004990:	20000028 	.word	0x20000028
 8004994:	2000002c 	.word	0x2000002c

08004998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800499e:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d102      	bne.n	80049b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049aa:	4b2a      	ldr	r3, [pc, #168]	; (8004a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	e047      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049b0:	4b27      	ldr	r3, [pc, #156]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 030c 	and.w	r3, r3, #12
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d102      	bne.n	80049c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049bc:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	e03e      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049c2:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b0c      	cmp	r3, #12
 80049cc:	d136      	bne.n	8004a3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049d8:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	091b      	lsrs	r3, r3, #4
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	3301      	adds	r3, #1
 80049e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d10c      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049ec:	4a1a      	ldr	r2, [pc, #104]	; (8004a58 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f4:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f6:	68d2      	ldr	r2, [r2, #12]
 80049f8:	0a12      	lsrs	r2, r2, #8
 80049fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	617b      	str	r3, [r7, #20]
      break;
 8004a04:	e00c      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a06:	4a13      	ldr	r2, [pc, #76]	; (8004a54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0e:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a10:	68d2      	ldr	r2, [r2, #12]
 8004a12:	0a12      	lsrs	r2, r2, #8
 8004a14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a18:	fb02 f303 	mul.w	r3, r2, r3
 8004a1c:	617b      	str	r3, [r7, #20]
      break;
 8004a1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	0e5b      	lsrs	r3, r3, #25
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e001      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a40:	693b      	ldr	r3, [r7, #16]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40021000 	.word	0x40021000
 8004a54:	00f42400 	.word	0x00f42400
 8004a58:	016e3600 	.word	0x016e3600

08004a5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a62:	681b      	ldr	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000028 	.word	0x20000028

08004a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a78:	f7ff fff0 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0a1b      	lsrs	r3, r3, #8
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4904      	ldr	r1, [pc, #16]	; (8004a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	0800789c 	.word	0x0800789c

08004aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004aa4:	f7ff ffda 	bl	8004a5c <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0adb      	lsrs	r3, r3, #11
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4904      	ldr	r1, [pc, #16]	; (8004ac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	0800789c 	.word	0x0800789c

08004acc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ad2:	4b1e      	ldr	r3, [pc, #120]	; (8004b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004adc:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d10c      	bne.n	8004b0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004af0:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004afa:	68d2      	ldr	r2, [r2, #12]
 8004afc:	0a12      	lsrs	r2, r2, #8
 8004afe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	617b      	str	r3, [r7, #20]
    break;
 8004b08:	e00c      	b.n	8004b24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b0a:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b14:	68d2      	ldr	r2, [r2, #12]
 8004b16:	0a12      	lsrs	r2, r2, #8
 8004b18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b1c:	fb02 f303 	mul.w	r3, r2, r3
 8004b20:	617b      	str	r3, [r7, #20]
    break;
 8004b22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	0e5b      	lsrs	r3, r3, #25
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b3e:	687b      	ldr	r3, [r7, #4]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	016e3600 	.word	0x016e3600
 8004b54:	00f42400 	.word	0x00f42400

08004b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b60:	2300      	movs	r3, #0
 8004b62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b64:	2300      	movs	r3, #0
 8004b66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8098 	beq.w	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b7a:	4b43      	ldr	r3, [pc, #268]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10d      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b86:	4b40      	ldr	r3, [pc, #256]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	4a3f      	ldr	r2, [pc, #252]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b90:	6593      	str	r3, [r2, #88]	; 0x58
 8004b92:	4b3d      	ldr	r3, [pc, #244]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba2:	4b3a      	ldr	r3, [pc, #232]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a39      	ldr	r2, [pc, #228]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bae:	f7fc ffb1 	bl	8001b14 <HAL_GetTick>
 8004bb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bb4:	e009      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb6:	f7fc ffad 	bl	8001b14 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d902      	bls.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	74fb      	strb	r3, [r7, #19]
        break;
 8004bc8:	e005      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bca:	4b30      	ldr	r3, [pc, #192]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ef      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d159      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bdc:	4b2a      	ldr	r3, [pc, #168]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01e      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d019      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bf8:	4b23      	ldr	r3, [pc, #140]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c04:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	4a1f      	ldr	r2, [pc, #124]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c14:	4b1c      	ldr	r3, [pc, #112]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c24:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d016      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c36:	f7fc ff6d 	bl	8001b14 <HAL_GetTick>
 8004c3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c3c:	e00b      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fc ff69 	bl	8001b14 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d902      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	74fb      	strb	r3, [r7, #19]
            break;
 8004c54:	e006      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ec      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10b      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c6a:	4b07      	ldr	r3, [pc, #28]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c78:	4903      	ldr	r1, [pc, #12]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c80:	e008      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c82:	7cfb      	ldrb	r3, [r7, #19]
 8004c84:	74bb      	strb	r3, [r7, #18]
 8004c86:	e005      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	7cfb      	ldrb	r3, [r7, #19]
 8004c92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c94:	7c7b      	ldrb	r3, [r7, #17]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d105      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9a:	4ba7      	ldr	r3, [pc, #668]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	4aa6      	ldr	r2, [pc, #664]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cb2:	4ba1      	ldr	r3, [pc, #644]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb8:	f023 0203 	bic.w	r2, r3, #3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	499d      	ldr	r1, [pc, #628]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cd4:	4b98      	ldr	r3, [pc, #608]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f023 020c 	bic.w	r2, r3, #12
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	4995      	ldr	r1, [pc, #596]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cf6:	4b90      	ldr	r3, [pc, #576]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	498c      	ldr	r1, [pc, #560]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d18:	4b87      	ldr	r3, [pc, #540]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	4984      	ldr	r1, [pc, #528]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d3a:	4b7f      	ldr	r3, [pc, #508]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	497b      	ldr	r1, [pc, #492]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d5c:	4b76      	ldr	r3, [pc, #472]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	4973      	ldr	r1, [pc, #460]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d7e:	4b6e      	ldr	r3, [pc, #440]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	496a      	ldr	r1, [pc, #424]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004da0:	4b65      	ldr	r3, [pc, #404]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	4962      	ldr	r1, [pc, #392]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dc2:	4b5d      	ldr	r3, [pc, #372]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	4959      	ldr	r1, [pc, #356]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004de4:	4b54      	ldr	r3, [pc, #336]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dea:	f023 0203 	bic.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	4951      	ldr	r1, [pc, #324]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e06:	4b4c      	ldr	r3, [pc, #304]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	4948      	ldr	r1, [pc, #288]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d015      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e28:	4b43      	ldr	r3, [pc, #268]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	4940      	ldr	r1, [pc, #256]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e46:	d105      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e48:	4b3b      	ldr	r3, [pc, #236]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a3a      	ldr	r2, [pc, #232]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d015      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e60:	4b35      	ldr	r3, [pc, #212]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	4932      	ldr	r1, [pc, #200]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7e:	d105      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e80:	4b2d      	ldr	r3, [pc, #180]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d015      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e98:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	4924      	ldr	r1, [pc, #144]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004eb6:	d105      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eb8:	4b1f      	ldr	r3, [pc, #124]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d015      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ed0:	4b19      	ldr	r3, [pc, #100]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	4916      	ldr	r1, [pc, #88]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eee:	d105      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef0:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a10      	ldr	r2, [pc, #64]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004efa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d019      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	4908      	ldr	r1, [pc, #32]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f26:	d109      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a02      	ldr	r2, [pc, #8]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f32:	60d3      	str	r3, [r2, #12]
 8004f34:	e002      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f36:	bf00      	nop
 8004f38:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d015      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f48:	4b29      	ldr	r3, [pc, #164]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	4926      	ldr	r1, [pc, #152]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f66:	d105      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f68:	4b21      	ldr	r3, [pc, #132]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a20      	ldr	r2, [pc, #128]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f72:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d015      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f86:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8e:	4918      	ldr	r1, [pc, #96]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9e:	d105      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	4a12      	ldr	r2, [pc, #72]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004faa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	490a      	ldr	r1, [pc, #40]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fd6:	d105      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000

08004ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e09d      	b.n	8005142 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	2b00      	cmp	r3, #0
 800500c:	d108      	bne.n	8005020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005016:	d009      	beq.n	800502c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	61da      	str	r2, [r3, #28]
 800501e:	e005      	b.n	800502c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7fc f9c0 	bl	80013cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005062:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800506c:	d902      	bls.n	8005074 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e002      	b.n	800507a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005078:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005082:	d007      	beq.n	8005094 <HAL_SPI_Init+0xa0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800508c:	d002      	beq.n	8005094 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	ea42 0103 	orr.w	r1, r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	f003 0204 	and.w	r2, r3, #4
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005110:	ea42 0103 	orr.w	r1, r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e049      	b.n	80051f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fc fa49 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3304      	adds	r3, #4
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f000 fa5f 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e049      	b.n	800529e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc f938 	bl	8001494 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 fa08 	bl	800564c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e066      	b.n	8005394 <HAL_TIM_OC_ConfigChannel+0xec>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b14      	cmp	r3, #20
 80052d2:	d857      	bhi.n	8005384 <HAL_TIM_OC_ConfigChannel+0xdc>
 80052d4:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <HAL_TIM_OC_ConfigChannel+0x34>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005331 	.word	0x08005331
 80052e0:	08005385 	.word	0x08005385
 80052e4:	08005385 	.word	0x08005385
 80052e8:	08005385 	.word	0x08005385
 80052ec:	0800533f 	.word	0x0800533f
 80052f0:	08005385 	.word	0x08005385
 80052f4:	08005385 	.word	0x08005385
 80052f8:	08005385 	.word	0x08005385
 80052fc:	0800534d 	.word	0x0800534d
 8005300:	08005385 	.word	0x08005385
 8005304:	08005385 	.word	0x08005385
 8005308:	08005385 	.word	0x08005385
 800530c:	0800535b 	.word	0x0800535b
 8005310:	08005385 	.word	0x08005385
 8005314:	08005385 	.word	0x08005385
 8005318:	08005385 	.word	0x08005385
 800531c:	08005369 	.word	0x08005369
 8005320:	08005385 	.word	0x08005385
 8005324:	08005385 	.word	0x08005385
 8005328:	08005385 	.word	0x08005385
 800532c:	08005377 	.word	0x08005377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fa3c 	bl	80057b4 <TIM_OC1_SetConfig>
      break;
 800533c:	e025      	b.n	800538a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 facf 	bl	80058e8 <TIM_OC2_SetConfig>
      break;
 800534a:	e01e      	b.n	800538a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fb5c 	bl	8005a10 <TIM_OC3_SetConfig>
      break;
 8005358:	e017      	b.n	800538a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fbe7 	bl	8005b34 <TIM_OC4_SetConfig>
      break;
 8005366:	e010      	b.n	800538a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fc74 	bl	8005c5c <TIM_OC5_SetConfig>
      break;
 8005374:	e009      	b.n	800538a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fcd7 	bl	8005d30 <TIM_OC6_SetConfig>
      break;
 8005382:	e002      	b.n	800538a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	75fb      	strb	r3, [r7, #23]
      break;
 8005388:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIM_ConfigClockSource+0x1c>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e0f6      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x20a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80053d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a6f      	ldr	r2, [pc, #444]	; (80055b0 <HAL_TIM_ConfigClockSource+0x214>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	f000 80c1 	beq.w	800557a <HAL_TIM_ConfigClockSource+0x1de>
 80053f8:	4a6d      	ldr	r2, [pc, #436]	; (80055b0 <HAL_TIM_ConfigClockSource+0x214>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	f200 80c6 	bhi.w	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 8005400:	4a6c      	ldr	r2, [pc, #432]	; (80055b4 <HAL_TIM_ConfigClockSource+0x218>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f000 80b9 	beq.w	800557a <HAL_TIM_ConfigClockSource+0x1de>
 8005408:	4a6a      	ldr	r2, [pc, #424]	; (80055b4 <HAL_TIM_ConfigClockSource+0x218>)
 800540a:	4293      	cmp	r3, r2
 800540c:	f200 80be 	bhi.w	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 8005410:	4a69      	ldr	r2, [pc, #420]	; (80055b8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	f000 80b1 	beq.w	800557a <HAL_TIM_ConfigClockSource+0x1de>
 8005418:	4a67      	ldr	r2, [pc, #412]	; (80055b8 <HAL_TIM_ConfigClockSource+0x21c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f200 80b6 	bhi.w	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 8005420:	4a66      	ldr	r2, [pc, #408]	; (80055bc <HAL_TIM_ConfigClockSource+0x220>)
 8005422:	4293      	cmp	r3, r2
 8005424:	f000 80a9 	beq.w	800557a <HAL_TIM_ConfigClockSource+0x1de>
 8005428:	4a64      	ldr	r2, [pc, #400]	; (80055bc <HAL_TIM_ConfigClockSource+0x220>)
 800542a:	4293      	cmp	r3, r2
 800542c:	f200 80ae 	bhi.w	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 8005430:	4a63      	ldr	r2, [pc, #396]	; (80055c0 <HAL_TIM_ConfigClockSource+0x224>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f000 80a1 	beq.w	800557a <HAL_TIM_ConfigClockSource+0x1de>
 8005438:	4a61      	ldr	r2, [pc, #388]	; (80055c0 <HAL_TIM_ConfigClockSource+0x224>)
 800543a:	4293      	cmp	r3, r2
 800543c:	f200 80a6 	bhi.w	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 8005440:	4a60      	ldr	r2, [pc, #384]	; (80055c4 <HAL_TIM_ConfigClockSource+0x228>)
 8005442:	4293      	cmp	r3, r2
 8005444:	f000 8099 	beq.w	800557a <HAL_TIM_ConfigClockSource+0x1de>
 8005448:	4a5e      	ldr	r2, [pc, #376]	; (80055c4 <HAL_TIM_ConfigClockSource+0x228>)
 800544a:	4293      	cmp	r3, r2
 800544c:	f200 809e 	bhi.w	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 8005450:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005454:	f000 8091 	beq.w	800557a <HAL_TIM_ConfigClockSource+0x1de>
 8005458:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800545c:	f200 8096 	bhi.w	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 8005460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005464:	f000 8089 	beq.w	800557a <HAL_TIM_ConfigClockSource+0x1de>
 8005468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800546c:	f200 808e 	bhi.w	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 8005470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005474:	d03e      	beq.n	80054f4 <HAL_TIM_ConfigClockSource+0x158>
 8005476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547a:	f200 8087 	bhi.w	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 800547e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005482:	f000 8086 	beq.w	8005592 <HAL_TIM_ConfigClockSource+0x1f6>
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548a:	d87f      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 800548c:	2b70      	cmp	r3, #112	; 0x70
 800548e:	d01a      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x12a>
 8005490:	2b70      	cmp	r3, #112	; 0x70
 8005492:	d87b      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 8005494:	2b60      	cmp	r3, #96	; 0x60
 8005496:	d050      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x19e>
 8005498:	2b60      	cmp	r3, #96	; 0x60
 800549a:	d877      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 800549c:	2b50      	cmp	r3, #80	; 0x50
 800549e:	d03c      	beq.n	800551a <HAL_TIM_ConfigClockSource+0x17e>
 80054a0:	2b50      	cmp	r3, #80	; 0x50
 80054a2:	d873      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d058      	beq.n	800555a <HAL_TIM_ConfigClockSource+0x1be>
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d86f      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 80054ac:	2b30      	cmp	r3, #48	; 0x30
 80054ae:	d064      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x1de>
 80054b0:	2b30      	cmp	r3, #48	; 0x30
 80054b2:	d86b      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d060      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x1de>
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d867      	bhi.n	800558c <HAL_TIM_ConfigClockSource+0x1f0>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d05c      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x1de>
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d05a      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x1de>
 80054c4:	e062      	b.n	800558c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054d6:	f000 fdf3 	bl	80060c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	609a      	str	r2, [r3, #8]
      break;
 80054f2:	e04f      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005504:	f000 fddc 	bl	80060c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005516:	609a      	str	r2, [r3, #8]
      break;
 8005518:	e03c      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005526:	461a      	mov	r2, r3
 8005528:	f000 fd4e 	bl	8005fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2150      	movs	r1, #80	; 0x50
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fda7 	bl	8006086 <TIM_ITRx_SetConfig>
      break;
 8005538:	e02c      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005546:	461a      	mov	r2, r3
 8005548:	f000 fd6d 	bl	8006026 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2160      	movs	r1, #96	; 0x60
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fd97 	bl	8006086 <TIM_ITRx_SetConfig>
      break;
 8005558:	e01c      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005566:	461a      	mov	r2, r3
 8005568:	f000 fd2e 	bl	8005fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2140      	movs	r1, #64	; 0x40
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fd87 	bl	8006086 <TIM_ITRx_SetConfig>
      break;
 8005578:	e00c      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f000 fd7e 	bl	8006086 <TIM_ITRx_SetConfig>
      break;
 800558a:	e003      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
      break;
 8005590:	e000      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005592:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	00100070 	.word	0x00100070
 80055b4:	00100060 	.word	0x00100060
 80055b8:	00100050 	.word	0x00100050
 80055bc:	00100040 	.word	0x00100040
 80055c0:	00100030 	.word	0x00100030
 80055c4:	00100020 	.word	0x00100020

080055c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80055dc:	2302      	movs	r3, #2
 80055de:	e031      	b.n	8005644 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80055f0:	6839      	ldr	r1, [r7, #0]
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 fc08 	bl	8005e08 <TIM_SlaveTimer_SetConfig>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e018      	b.n	8005644 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005620:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005630:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a4c      	ldr	r2, [pc, #304]	; (8005790 <TIM_Base_SetConfig+0x144>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d017      	beq.n	8005694 <TIM_Base_SetConfig+0x48>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566a:	d013      	beq.n	8005694 <TIM_Base_SetConfig+0x48>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a49      	ldr	r2, [pc, #292]	; (8005794 <TIM_Base_SetConfig+0x148>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00f      	beq.n	8005694 <TIM_Base_SetConfig+0x48>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a48      	ldr	r2, [pc, #288]	; (8005798 <TIM_Base_SetConfig+0x14c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00b      	beq.n	8005694 <TIM_Base_SetConfig+0x48>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a47      	ldr	r2, [pc, #284]	; (800579c <TIM_Base_SetConfig+0x150>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d007      	beq.n	8005694 <TIM_Base_SetConfig+0x48>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a46      	ldr	r2, [pc, #280]	; (80057a0 <TIM_Base_SetConfig+0x154>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0x48>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a45      	ldr	r2, [pc, #276]	; (80057a4 <TIM_Base_SetConfig+0x158>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d108      	bne.n	80056a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a39      	ldr	r2, [pc, #228]	; (8005790 <TIM_Base_SetConfig+0x144>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d023      	beq.n	80056f6 <TIM_Base_SetConfig+0xaa>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d01f      	beq.n	80056f6 <TIM_Base_SetConfig+0xaa>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a36      	ldr	r2, [pc, #216]	; (8005794 <TIM_Base_SetConfig+0x148>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01b      	beq.n	80056f6 <TIM_Base_SetConfig+0xaa>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a35      	ldr	r2, [pc, #212]	; (8005798 <TIM_Base_SetConfig+0x14c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d017      	beq.n	80056f6 <TIM_Base_SetConfig+0xaa>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a34      	ldr	r2, [pc, #208]	; (800579c <TIM_Base_SetConfig+0x150>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <TIM_Base_SetConfig+0xaa>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a33      	ldr	r2, [pc, #204]	; (80057a0 <TIM_Base_SetConfig+0x154>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00f      	beq.n	80056f6 <TIM_Base_SetConfig+0xaa>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a33      	ldr	r2, [pc, #204]	; (80057a8 <TIM_Base_SetConfig+0x15c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_Base_SetConfig+0xaa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a32      	ldr	r2, [pc, #200]	; (80057ac <TIM_Base_SetConfig+0x160>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <TIM_Base_SetConfig+0xaa>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a31      	ldr	r2, [pc, #196]	; (80057b0 <TIM_Base_SetConfig+0x164>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_Base_SetConfig+0xaa>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2c      	ldr	r2, [pc, #176]	; (80057a4 <TIM_Base_SetConfig+0x158>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d108      	bne.n	8005708 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a18      	ldr	r2, [pc, #96]	; (8005790 <TIM_Base_SetConfig+0x144>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <TIM_Base_SetConfig+0x110>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a1a      	ldr	r2, [pc, #104]	; (80057a0 <TIM_Base_SetConfig+0x154>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00f      	beq.n	800575c <TIM_Base_SetConfig+0x110>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a1a      	ldr	r2, [pc, #104]	; (80057a8 <TIM_Base_SetConfig+0x15c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00b      	beq.n	800575c <TIM_Base_SetConfig+0x110>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a19      	ldr	r2, [pc, #100]	; (80057ac <TIM_Base_SetConfig+0x160>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <TIM_Base_SetConfig+0x110>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <TIM_Base_SetConfig+0x164>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_Base_SetConfig+0x110>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <TIM_Base_SetConfig+0x158>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d103      	bne.n	8005764 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b01      	cmp	r3, #1
 8005774:	d105      	bne.n	8005782 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f023 0201 	bic.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	611a      	str	r2, [r3, #16]
  }
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40012c00 	.word	0x40012c00
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40013400 	.word	0x40013400
 80057a4:	40015000 	.word	0x40015000
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800

080057b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f023 0201 	bic.w	r2, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0303 	bic.w	r3, r3, #3
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f023 0302 	bic.w	r3, r3, #2
 8005800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a30      	ldr	r2, [pc, #192]	; (80058d0 <TIM_OC1_SetConfig+0x11c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <TIM_OC1_SetConfig+0x88>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a2f      	ldr	r2, [pc, #188]	; (80058d4 <TIM_OC1_SetConfig+0x120>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00f      	beq.n	800583c <TIM_OC1_SetConfig+0x88>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a2e      	ldr	r2, [pc, #184]	; (80058d8 <TIM_OC1_SetConfig+0x124>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00b      	beq.n	800583c <TIM_OC1_SetConfig+0x88>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a2d      	ldr	r2, [pc, #180]	; (80058dc <TIM_OC1_SetConfig+0x128>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d007      	beq.n	800583c <TIM_OC1_SetConfig+0x88>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a2c      	ldr	r2, [pc, #176]	; (80058e0 <TIM_OC1_SetConfig+0x12c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC1_SetConfig+0x88>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a2b      	ldr	r2, [pc, #172]	; (80058e4 <TIM_OC1_SetConfig+0x130>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10c      	bne.n	8005856 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0308 	bic.w	r3, r3, #8
 8005842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f023 0304 	bic.w	r3, r3, #4
 8005854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <TIM_OC1_SetConfig+0x11c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <TIM_OC1_SetConfig+0xd2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a1c      	ldr	r2, [pc, #112]	; (80058d4 <TIM_OC1_SetConfig+0x120>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00f      	beq.n	8005886 <TIM_OC1_SetConfig+0xd2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a1b      	ldr	r2, [pc, #108]	; (80058d8 <TIM_OC1_SetConfig+0x124>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00b      	beq.n	8005886 <TIM_OC1_SetConfig+0xd2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <TIM_OC1_SetConfig+0x128>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d007      	beq.n	8005886 <TIM_OC1_SetConfig+0xd2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <TIM_OC1_SetConfig+0x12c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d003      	beq.n	8005886 <TIM_OC1_SetConfig+0xd2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a18      	ldr	r2, [pc, #96]	; (80058e4 <TIM_OC1_SetConfig+0x130>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d111      	bne.n	80058aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800588c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	621a      	str	r2, [r3, #32]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	40013400 	.word	0x40013400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400
 80058e0:	40014800 	.word	0x40014800
 80058e4:	40015000 	.word	0x40015000

080058e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	f023 0210 	bic.w	r2, r3, #16
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f023 0320 	bic.w	r3, r3, #32
 8005936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	4313      	orrs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a2c      	ldr	r2, [pc, #176]	; (80059f8 <TIM_OC2_SetConfig+0x110>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d007      	beq.n	800595c <TIM_OC2_SetConfig+0x74>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a2b      	ldr	r2, [pc, #172]	; (80059fc <TIM_OC2_SetConfig+0x114>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_OC2_SetConfig+0x74>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a2a      	ldr	r2, [pc, #168]	; (8005a00 <TIM_OC2_SetConfig+0x118>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d10d      	bne.n	8005978 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005976:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <TIM_OC2_SetConfig+0x110>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <TIM_OC2_SetConfig+0xc0>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <TIM_OC2_SetConfig+0x114>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00f      	beq.n	80059a8 <TIM_OC2_SetConfig+0xc0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <TIM_OC2_SetConfig+0x11c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d00b      	beq.n	80059a8 <TIM_OC2_SetConfig+0xc0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a1d      	ldr	r2, [pc, #116]	; (8005a08 <TIM_OC2_SetConfig+0x120>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d007      	beq.n	80059a8 <TIM_OC2_SetConfig+0xc0>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a1c      	ldr	r2, [pc, #112]	; (8005a0c <TIM_OC2_SetConfig+0x124>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_OC2_SetConfig+0xc0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <TIM_OC2_SetConfig+0x118>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d113      	bne.n	80059d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	621a      	str	r2, [r3, #32]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40013400 	.word	0x40013400
 8005a00:	40015000 	.word	0x40015000
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800

08005a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2b      	ldr	r2, [pc, #172]	; (8005b1c <TIM_OC3_SetConfig+0x10c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <TIM_OC3_SetConfig+0x72>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2a      	ldr	r2, [pc, #168]	; (8005b20 <TIM_OC3_SetConfig+0x110>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_OC3_SetConfig+0x72>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a29      	ldr	r2, [pc, #164]	; (8005b24 <TIM_OC3_SetConfig+0x114>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d10d      	bne.n	8005a9e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a1e      	ldr	r2, [pc, #120]	; (8005b1c <TIM_OC3_SetConfig+0x10c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <TIM_OC3_SetConfig+0xbe>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a1d      	ldr	r2, [pc, #116]	; (8005b20 <TIM_OC3_SetConfig+0x110>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00f      	beq.n	8005ace <TIM_OC3_SetConfig+0xbe>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	; (8005b28 <TIM_OC3_SetConfig+0x118>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00b      	beq.n	8005ace <TIM_OC3_SetConfig+0xbe>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a1c      	ldr	r2, [pc, #112]	; (8005b2c <TIM_OC3_SetConfig+0x11c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d007      	beq.n	8005ace <TIM_OC3_SetConfig+0xbe>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <TIM_OC3_SetConfig+0x120>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d003      	beq.n	8005ace <TIM_OC3_SetConfig+0xbe>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a16      	ldr	r2, [pc, #88]	; (8005b24 <TIM_OC3_SetConfig+0x114>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d113      	bne.n	8005af6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	621a      	str	r2, [r3, #32]
}
 8005b10:	bf00      	nop
 8005b12:	371c      	adds	r7, #28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40012c00 	.word	0x40012c00
 8005b20:	40013400 	.word	0x40013400
 8005b24:	40015000 	.word	0x40015000
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	40014400 	.word	0x40014400
 8005b30:	40014800 	.word	0x40014800

08005b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	021b      	lsls	r3, r3, #8
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	031b      	lsls	r3, r3, #12
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a2c      	ldr	r2, [pc, #176]	; (8005c44 <TIM_OC4_SetConfig+0x110>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_OC4_SetConfig+0x74>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a2b      	ldr	r2, [pc, #172]	; (8005c48 <TIM_OC4_SetConfig+0x114>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC4_SetConfig+0x74>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a2a      	ldr	r2, [pc, #168]	; (8005c4c <TIM_OC4_SetConfig+0x118>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d10d      	bne.n	8005bc4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	031b      	lsls	r3, r3, #12
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a1f      	ldr	r2, [pc, #124]	; (8005c44 <TIM_OC4_SetConfig+0x110>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d013      	beq.n	8005bf4 <TIM_OC4_SetConfig+0xc0>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <TIM_OC4_SetConfig+0x114>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d00f      	beq.n	8005bf4 <TIM_OC4_SetConfig+0xc0>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <TIM_OC4_SetConfig+0x11c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00b      	beq.n	8005bf4 <TIM_OC4_SetConfig+0xc0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <TIM_OC4_SetConfig+0x120>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d007      	beq.n	8005bf4 <TIM_OC4_SetConfig+0xc0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a1c      	ldr	r2, [pc, #112]	; (8005c58 <TIM_OC4_SetConfig+0x124>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_OC4_SetConfig+0xc0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <TIM_OC4_SetConfig+0x118>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d113      	bne.n	8005c1c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bfa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c02:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	019b      	lsls	r3, r3, #6
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	019b      	lsls	r3, r3, #6
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40015000 	.word	0x40015000
 8005c50:	40014000 	.word	0x40014000
 8005c54:	40014400 	.word	0x40014400
 8005c58:	40014800 	.word	0x40014800

08005c5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <TIM_OC5_SetConfig+0xbc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <TIM_OC5_SetConfig+0x82>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <TIM_OC5_SetConfig+0xc0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00f      	beq.n	8005cde <TIM_OC5_SetConfig+0x82>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <TIM_OC5_SetConfig+0xc4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d00b      	beq.n	8005cde <TIM_OC5_SetConfig+0x82>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <TIM_OC5_SetConfig+0xc8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d007      	beq.n	8005cde <TIM_OC5_SetConfig+0x82>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	; (8005d28 <TIM_OC5_SetConfig+0xcc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d003      	beq.n	8005cde <TIM_OC5_SetConfig+0x82>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <TIM_OC5_SetConfig+0xd0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d109      	bne.n	8005cf2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	621a      	str	r2, [r3, #32]
}
 8005d0c:	bf00      	nop
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	40014800 	.word	0x40014800
 8005d2c:	40015000 	.word	0x40015000

08005d30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	021b      	lsls	r3, r3, #8
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	051b      	lsls	r3, r3, #20
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a1a      	ldr	r2, [pc, #104]	; (8005df0 <TIM_OC6_SetConfig+0xc0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d013      	beq.n	8005db4 <TIM_OC6_SetConfig+0x84>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a19      	ldr	r2, [pc, #100]	; (8005df4 <TIM_OC6_SetConfig+0xc4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00f      	beq.n	8005db4 <TIM_OC6_SetConfig+0x84>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <TIM_OC6_SetConfig+0xc8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00b      	beq.n	8005db4 <TIM_OC6_SetConfig+0x84>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a17      	ldr	r2, [pc, #92]	; (8005dfc <TIM_OC6_SetConfig+0xcc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d007      	beq.n	8005db4 <TIM_OC6_SetConfig+0x84>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <TIM_OC6_SetConfig+0xd0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_OC6_SetConfig+0x84>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <TIM_OC6_SetConfig+0xd4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d109      	bne.n	8005dc8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	029b      	lsls	r3, r3, #10
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40012c00 	.word	0x40012c00
 8005df4:	40013400 	.word	0x40013400
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40014400 	.word	0x40014400
 8005e00:	40014800 	.word	0x40014800
 8005e04:	40015000 	.word	0x40015000

08005e08 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e28:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3a:	f023 0307 	bic.w	r3, r3, #7
 8005e3e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	4a56      	ldr	r2, [pc, #344]	; (8005fb0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	f000 80a2 	beq.w	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005e5e:	4a54      	ldr	r2, [pc, #336]	; (8005fb0 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	f200 809b 	bhi.w	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005e66:	4a53      	ldr	r2, [pc, #332]	; (8005fb4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	f000 809a 	beq.w	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005e6e:	4a51      	ldr	r2, [pc, #324]	; (8005fb4 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	f200 8093 	bhi.w	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005e76:	4a50      	ldr	r2, [pc, #320]	; (8005fb8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	f000 8092 	beq.w	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005e7e:	4a4e      	ldr	r2, [pc, #312]	; (8005fb8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	f200 808b 	bhi.w	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005e86:	4a4d      	ldr	r2, [pc, #308]	; (8005fbc <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	f000 808a 	beq.w	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005e8e:	4a4b      	ldr	r2, [pc, #300]	; (8005fbc <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	f200 8083 	bhi.w	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005e96:	4a4a      	ldr	r2, [pc, #296]	; (8005fc0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	f000 8082 	beq.w	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005e9e:	4a48      	ldr	r2, [pc, #288]	; (8005fc0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d87b      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005ea4:	4a47      	ldr	r2, [pc, #284]	; (8005fc4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d07b      	beq.n	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005eaa:	4a46      	ldr	r2, [pc, #280]	; (8005fc4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d875      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005eb0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005eb4:	d075      	beq.n	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005eb6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005eba:	d86f      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec0:	d06f      	beq.n	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec6:	d869      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005ec8:	2b70      	cmp	r3, #112	; 0x70
 8005eca:	d01a      	beq.n	8005f02 <TIM_SlaveTimer_SetConfig+0xfa>
 8005ecc:	2b70      	cmp	r3, #112	; 0x70
 8005ece:	d865      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005ed0:	2b60      	cmp	r3, #96	; 0x60
 8005ed2:	d059      	beq.n	8005f88 <TIM_SlaveTimer_SetConfig+0x180>
 8005ed4:	2b60      	cmp	r3, #96	; 0x60
 8005ed6:	d861      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005ed8:	2b50      	cmp	r3, #80	; 0x50
 8005eda:	d04b      	beq.n	8005f74 <TIM_SlaveTimer_SetConfig+0x16c>
 8005edc:	2b50      	cmp	r3, #80	; 0x50
 8005ede:	d85d      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005ee0:	2b40      	cmp	r3, #64	; 0x40
 8005ee2:	d019      	beq.n	8005f18 <TIM_SlaveTimer_SetConfig+0x110>
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d859      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005ee8:	2b30      	cmp	r3, #48	; 0x30
 8005eea:	d05a      	beq.n	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005eec:	2b30      	cmp	r3, #48	; 0x30
 8005eee:	d855      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	d056      	beq.n	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d851      	bhi.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d052      	beq.n	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d050      	beq.n	8005fa2 <TIM_SlaveTimer_SetConfig+0x19a>
 8005f00:	e04c      	b.n	8005f9c <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005f12:	f000 f8d5 	bl	80060c0 <TIM_ETR_SetConfig>
      break;
 8005f16:	e045      	b.n	8005fa4 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b05      	cmp	r3, #5
 8005f1e:	d004      	beq.n	8005f2a <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005f24:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005f28:	d101      	bne.n	8005f2e <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e03b      	b.n	8005fa6 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0201 	bic.w	r2, r2, #1
 8005f44:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f54:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	621a      	str	r2, [r3, #32]
      break;
 8005f72:	e017      	b.n	8005fa4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f80:	461a      	mov	r2, r3
 8005f82:	f000 f821 	bl	8005fc8 <TIM_TI1_ConfigInputStage>
      break;
 8005f86:	e00d      	b.n	8005fa4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f94:	461a      	mov	r2, r3
 8005f96:	f000 f846 	bl	8006026 <TIM_TI2_ConfigInputStage>
      break;
 8005f9a:	e003      	b.n	8005fa4 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005fa0:	e000      	b.n	8005fa4 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8005fa2:	bf00      	nop
  }

  return status;
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	00100070 	.word	0x00100070
 8005fb4:	00100060 	.word	0x00100060
 8005fb8:	00100050 	.word	0x00100050
 8005fbc:	00100040 	.word	0x00100040
 8005fc0:	00100030 	.word	0x00100030
 8005fc4:	00100020 	.word	0x00100020

08005fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f023 0201 	bic.w	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f023 030a 	bic.w	r3, r3, #10
 8006004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006026:	b480      	push	{r7}
 8006028:	b087      	sub	sp, #28
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f023 0210 	bic.w	r2, r3, #16
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006050:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	031b      	lsls	r3, r3, #12
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006062:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006086:	b480      	push	{r7}
 8006088:	b085      	sub	sp, #20
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800609c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f043 0307 	orr.w	r3, r3, #7
 80060ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	609a      	str	r2, [r3, #8]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	021a      	lsls	r2, r3, #8
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	609a      	str	r2, [r3, #8]
}
 80060f4:	bf00      	nop
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006114:	2302      	movs	r3, #2
 8006116:	e074      	b.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a34      	ldr	r2, [pc, #208]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d009      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a33      	ldr	r2, [pc, #204]	; (8006214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d004      	beq.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a31      	ldr	r2, [pc, #196]	; (8006218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d108      	bne.n	8006168 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800615c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a21      	ldr	r2, [pc, #132]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d022      	beq.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006198:	d01d      	beq.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a1f      	ldr	r2, [pc, #124]	; (800621c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d018      	beq.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1d      	ldr	r2, [pc, #116]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d013      	beq.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d00e      	beq.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a15      	ldr	r2, [pc, #84]	; (8006214 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d009      	beq.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a18      	ldr	r2, [pc, #96]	; (8006228 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d004      	beq.n	80061d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a11      	ldr	r2, [pc, #68]	; (8006218 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10c      	bne.n	80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40012c00 	.word	0x40012c00
 8006214:	40013400 	.word	0x40013400
 8006218:	40015000 	.word	0x40015000
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40014000 	.word	0x40014000

0800622c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006244:	2302      	movs	r3, #2
 8006246:	e078      	b.n	800633a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	041b      	lsls	r3, r3, #16
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1b      	ldr	r2, [pc, #108]	; (800634c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a19      	ldr	r2, [pc, #100]	; (8006350 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d11c      	bne.n	8006328 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	051b      	lsls	r3, r3, #20
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00
 800634c:	40013400 	.word	0x40013400
 8006350:	40015000 	.word	0x40015000

08006354 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006354:	b480      	push	{r7}
 8006356:	b08b      	sub	sp, #44	; 0x2c
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_TIMEx_ConfigBreakInput+0x20>
 8006370:	2302      	movs	r3, #2
 8006372:	e10b      	b.n	800658c <HAL_TIMEx_ConfigBreakInput+0x238>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b80      	cmp	r3, #128	; 0x80
 8006382:	f000 8096 	beq.w	80064b2 <HAL_TIMEx_ConfigBreakInput+0x15e>
 8006386:	2b80      	cmp	r3, #128	; 0x80
 8006388:	f200 809c 	bhi.w	80064c4 <HAL_TIMEx_ConfigBreakInput+0x170>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d849      	bhi.n	8006424 <HAL_TIMEx_ConfigBreakInput+0xd0>
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8097 	beq.w	80064c4 <HAL_TIMEx_ConfigBreakInput+0x170>
 8006396:	3b01      	subs	r3, #1
 8006398:	2b1f      	cmp	r3, #31
 800639a:	f200 8093 	bhi.w	80064c4 <HAL_TIMEx_ConfigBreakInput+0x170>
 800639e:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <HAL_TIMEx_ConfigBreakInput+0x50>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	0800642b 	.word	0x0800642b
 80063a8:	0800643f 	.word	0x0800643f
 80063ac:	080064c5 	.word	0x080064c5
 80063b0:	08006453 	.word	0x08006453
 80063b4:	080064c5 	.word	0x080064c5
 80063b8:	080064c5 	.word	0x080064c5
 80063bc:	080064c5 	.word	0x080064c5
 80063c0:	08006467 	.word	0x08006467
 80063c4:	080064c5 	.word	0x080064c5
 80063c8:	080064c5 	.word	0x080064c5
 80063cc:	080064c5 	.word	0x080064c5
 80063d0:	080064c5 	.word	0x080064c5
 80063d4:	080064c5 	.word	0x080064c5
 80063d8:	080064c5 	.word	0x080064c5
 80063dc:	080064c5 	.word	0x080064c5
 80063e0:	0800647b 	.word	0x0800647b
 80063e4:	080064c5 	.word	0x080064c5
 80063e8:	080064c5 	.word	0x080064c5
 80063ec:	080064c5 	.word	0x080064c5
 80063f0:	080064c5 	.word	0x080064c5
 80063f4:	080064c5 	.word	0x080064c5
 80063f8:	080064c5 	.word	0x080064c5
 80063fc:	080064c5 	.word	0x080064c5
 8006400:	080064c5 	.word	0x080064c5
 8006404:	080064c5 	.word	0x080064c5
 8006408:	080064c5 	.word	0x080064c5
 800640c:	080064c5 	.word	0x080064c5
 8006410:	080064c5 	.word	0x080064c5
 8006414:	080064c5 	.word	0x080064c5
 8006418:	080064c5 	.word	0x080064c5
 800641c:	080064c5 	.word	0x080064c5
 8006420:	0800648f 	.word	0x0800648f
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d03b      	beq.n	80064a0 <HAL_TIMEx_ConfigBreakInput+0x14c>
 8006428:	e04c      	b.n	80064c4 <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800642a:	2301      	movs	r3, #1
 800642c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800642e:	2300      	movs	r3, #0
 8006430:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8006432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006436:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8006438:	2309      	movs	r3, #9
 800643a:	617b      	str	r3, [r7, #20]
      break;
 800643c:	e04b      	b.n	80064d6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800643e:	2302      	movs	r3, #2
 8006440:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8006442:	2301      	movs	r3, #1
 8006444:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8006446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800644a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800644c:	230a      	movs	r3, #10
 800644e:	617b      	str	r3, [r7, #20]
      break;
 8006450:	e041      	b.n	80064d6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8006452:	2304      	movs	r3, #4
 8006454:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8006456:	2302      	movs	r3, #2
 8006458:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800645a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800645e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8006460:	230b      	movs	r3, #11
 8006462:	617b      	str	r3, [r7, #20]
      break;
 8006464:	e037      	b.n	80064d6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8006466:	2308      	movs	r3, #8
 8006468:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800646a:	2303      	movs	r3, #3
 800646c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800646e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006472:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8006474:	230c      	movs	r3, #12
 8006476:	617b      	str	r3, [r7, #20]
      break;
 8006478:	e02d      	b.n	80064d6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800647a:	2310      	movs	r3, #16
 800647c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800647e:	2304      	movs	r3, #4
 8006480:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8006482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006486:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8006488:	230d      	movs	r3, #13
 800648a:	617b      	str	r3, [r7, #20]
      break;
 800648c:	e023      	b.n	80064d6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 800648e:	2320      	movs	r3, #32
 8006490:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8006492:	2305      	movs	r3, #5
 8006494:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	617b      	str	r3, [r7, #20]
      break;
 800649e:	e01a      	b.n	80064d6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 80064a0:	2340      	movs	r3, #64	; 0x40
 80064a2:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 80064a4:	2306      	movs	r3, #6
 80064a6:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
      break;
 80064b0:	e011      	b.n	80064d6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 80064b2:	2380      	movs	r3, #128	; 0x80
 80064b4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 80064b6:	2307      	movs	r3, #7
 80064b8:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	617b      	str	r3, [r7, #20]
      break;
 80064c2:	e008      	b.n	80064d6 <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]
      break;
 80064d4:	bf00      	nop
    }
  }

  switch (BreakInput)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d003      	beq.n	80064e4 <HAL_TIMEx_ConfigBreakInput+0x190>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d025      	beq.n	800652e <HAL_TIMEx_ConfigBreakInput+0x1da>
 80064e2:	e049      	b.n	8006578 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ea:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	43db      	mvns	r3, r3
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4013      	ands	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	409a      	lsls	r2, r3
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	4013      	ands	r3, r2
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	43db      	mvns	r3, r3
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4013      	ands	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	409a      	lsls	r2, r3
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4013      	ands	r3, r2
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800652c:	e028      	b.n	8006580 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006534:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	43db      	mvns	r3, r3
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4013      	ands	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	409a      	lsls	r2, r3
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	4013      	ands	r3, r2
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	43db      	mvns	r3, r3
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4013      	ands	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	409a      	lsls	r2, r3
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4013      	ands	r3, r2
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8006576:	e003      	b.n	8006580 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800657e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800658c:	4618      	mov	r0, r3
 800658e:	372c      	adds	r7, #44	; 0x2c
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e042      	b.n	8006630 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d106      	bne.n	80065c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7fb f953 	bl	8001868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2224      	movs	r2, #36	; 0x24
 80065c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0201 	bic.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fb24 	bl	8006c30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f825 	bl	8006638 <UART_SetConfig>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e01b      	b.n	8006630 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0201 	orr.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 fba3 	bl	8006d74 <UART_CheckIdleState>
 800662e:	4603      	mov	r3, r0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800663c:	b08c      	sub	sp, #48	; 0x30
 800663e:	af00      	add	r7, sp, #0
 8006640:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	431a      	orrs	r2, r3
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	431a      	orrs	r2, r3
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	4313      	orrs	r3, r2
 800665e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4baa      	ldr	r3, [pc, #680]	; (8006910 <UART_SetConfig+0x2d8>)
 8006668:	4013      	ands	r3, r2
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006670:	430b      	orrs	r3, r1
 8006672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a9f      	ldr	r2, [pc, #636]	; (8006914 <UART_SetConfig+0x2dc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d004      	beq.n	80066a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066a0:	4313      	orrs	r3, r2
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80066ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	6812      	ldr	r2, [r2, #0]
 80066b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066b8:	430b      	orrs	r3, r1
 80066ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	f023 010f 	bic.w	r1, r3, #15
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a90      	ldr	r2, [pc, #576]	; (8006918 <UART_SetConfig+0x2e0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d125      	bne.n	8006728 <UART_SetConfig+0xf0>
 80066dc:	4b8f      	ldr	r3, [pc, #572]	; (800691c <UART_SetConfig+0x2e4>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d81a      	bhi.n	8006720 <UART_SetConfig+0xe8>
 80066ea:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <UART_SetConfig+0xb8>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006701 	.word	0x08006701
 80066f4:	08006711 	.word	0x08006711
 80066f8:	08006709 	.word	0x08006709
 80066fc:	08006719 	.word	0x08006719
 8006700:	2301      	movs	r3, #1
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006706:	e116      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006708:	2302      	movs	r3, #2
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670e:	e112      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006710:	2304      	movs	r3, #4
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006716:	e10e      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006718:	2308      	movs	r3, #8
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800671e:	e10a      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006720:	2310      	movs	r3, #16
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006726:	e106      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a7c      	ldr	r2, [pc, #496]	; (8006920 <UART_SetConfig+0x2e8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d138      	bne.n	80067a4 <UART_SetConfig+0x16c>
 8006732:	4b7a      	ldr	r3, [pc, #488]	; (800691c <UART_SetConfig+0x2e4>)
 8006734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006738:	f003 030c 	and.w	r3, r3, #12
 800673c:	2b0c      	cmp	r3, #12
 800673e:	d82d      	bhi.n	800679c <UART_SetConfig+0x164>
 8006740:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <UART_SetConfig+0x110>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	0800677d 	.word	0x0800677d
 800674c:	0800679d 	.word	0x0800679d
 8006750:	0800679d 	.word	0x0800679d
 8006754:	0800679d 	.word	0x0800679d
 8006758:	0800678d 	.word	0x0800678d
 800675c:	0800679d 	.word	0x0800679d
 8006760:	0800679d 	.word	0x0800679d
 8006764:	0800679d 	.word	0x0800679d
 8006768:	08006785 	.word	0x08006785
 800676c:	0800679d 	.word	0x0800679d
 8006770:	0800679d 	.word	0x0800679d
 8006774:	0800679d 	.word	0x0800679d
 8006778:	08006795 	.word	0x08006795
 800677c:	2300      	movs	r3, #0
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006782:	e0d8      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006784:	2302      	movs	r3, #2
 8006786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678a:	e0d4      	b.n	8006936 <UART_SetConfig+0x2fe>
 800678c:	2304      	movs	r3, #4
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006792:	e0d0      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006794:	2308      	movs	r3, #8
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679a:	e0cc      	b.n	8006936 <UART_SetConfig+0x2fe>
 800679c:	2310      	movs	r3, #16
 800679e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a2:	e0c8      	b.n	8006936 <UART_SetConfig+0x2fe>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a5e      	ldr	r2, [pc, #376]	; (8006924 <UART_SetConfig+0x2ec>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d125      	bne.n	80067fa <UART_SetConfig+0x1c2>
 80067ae:	4b5b      	ldr	r3, [pc, #364]	; (800691c <UART_SetConfig+0x2e4>)
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067b8:	2b30      	cmp	r3, #48	; 0x30
 80067ba:	d016      	beq.n	80067ea <UART_SetConfig+0x1b2>
 80067bc:	2b30      	cmp	r3, #48	; 0x30
 80067be:	d818      	bhi.n	80067f2 <UART_SetConfig+0x1ba>
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d00a      	beq.n	80067da <UART_SetConfig+0x1a2>
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d814      	bhi.n	80067f2 <UART_SetConfig+0x1ba>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <UART_SetConfig+0x19a>
 80067cc:	2b10      	cmp	r3, #16
 80067ce:	d008      	beq.n	80067e2 <UART_SetConfig+0x1aa>
 80067d0:	e00f      	b.n	80067f2 <UART_SetConfig+0x1ba>
 80067d2:	2300      	movs	r3, #0
 80067d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067d8:	e0ad      	b.n	8006936 <UART_SetConfig+0x2fe>
 80067da:	2302      	movs	r3, #2
 80067dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e0:	e0a9      	b.n	8006936 <UART_SetConfig+0x2fe>
 80067e2:	2304      	movs	r3, #4
 80067e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067e8:	e0a5      	b.n	8006936 <UART_SetConfig+0x2fe>
 80067ea:	2308      	movs	r3, #8
 80067ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f0:	e0a1      	b.n	8006936 <UART_SetConfig+0x2fe>
 80067f2:	2310      	movs	r3, #16
 80067f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067f8:	e09d      	b.n	8006936 <UART_SetConfig+0x2fe>
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a4a      	ldr	r2, [pc, #296]	; (8006928 <UART_SetConfig+0x2f0>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d125      	bne.n	8006850 <UART_SetConfig+0x218>
 8006804:	4b45      	ldr	r3, [pc, #276]	; (800691c <UART_SetConfig+0x2e4>)
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800680e:	2bc0      	cmp	r3, #192	; 0xc0
 8006810:	d016      	beq.n	8006840 <UART_SetConfig+0x208>
 8006812:	2bc0      	cmp	r3, #192	; 0xc0
 8006814:	d818      	bhi.n	8006848 <UART_SetConfig+0x210>
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	d00a      	beq.n	8006830 <UART_SetConfig+0x1f8>
 800681a:	2b80      	cmp	r3, #128	; 0x80
 800681c:	d814      	bhi.n	8006848 <UART_SetConfig+0x210>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <UART_SetConfig+0x1f0>
 8006822:	2b40      	cmp	r3, #64	; 0x40
 8006824:	d008      	beq.n	8006838 <UART_SetConfig+0x200>
 8006826:	e00f      	b.n	8006848 <UART_SetConfig+0x210>
 8006828:	2300      	movs	r3, #0
 800682a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800682e:	e082      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006830:	2302      	movs	r3, #2
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006836:	e07e      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006838:	2304      	movs	r3, #4
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800683e:	e07a      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006840:	2308      	movs	r3, #8
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006846:	e076      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006848:	2310      	movs	r3, #16
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800684e:	e072      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a35      	ldr	r2, [pc, #212]	; (800692c <UART_SetConfig+0x2f4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d12a      	bne.n	80068b0 <UART_SetConfig+0x278>
 800685a:	4b30      	ldr	r3, [pc, #192]	; (800691c <UART_SetConfig+0x2e4>)
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006868:	d01a      	beq.n	80068a0 <UART_SetConfig+0x268>
 800686a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800686e:	d81b      	bhi.n	80068a8 <UART_SetConfig+0x270>
 8006870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006874:	d00c      	beq.n	8006890 <UART_SetConfig+0x258>
 8006876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687a:	d815      	bhi.n	80068a8 <UART_SetConfig+0x270>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <UART_SetConfig+0x250>
 8006880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006884:	d008      	beq.n	8006898 <UART_SetConfig+0x260>
 8006886:	e00f      	b.n	80068a8 <UART_SetConfig+0x270>
 8006888:	2300      	movs	r3, #0
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688e:	e052      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006890:	2302      	movs	r3, #2
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006896:	e04e      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006898:	2304      	movs	r3, #4
 800689a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800689e:	e04a      	b.n	8006936 <UART_SetConfig+0x2fe>
 80068a0:	2308      	movs	r3, #8
 80068a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068a6:	e046      	b.n	8006936 <UART_SetConfig+0x2fe>
 80068a8:	2310      	movs	r3, #16
 80068aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ae:	e042      	b.n	8006936 <UART_SetConfig+0x2fe>
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a17      	ldr	r2, [pc, #92]	; (8006914 <UART_SetConfig+0x2dc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d13a      	bne.n	8006930 <UART_SetConfig+0x2f8>
 80068ba:	4b18      	ldr	r3, [pc, #96]	; (800691c <UART_SetConfig+0x2e4>)
 80068bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068c8:	d01a      	beq.n	8006900 <UART_SetConfig+0x2c8>
 80068ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ce:	d81b      	bhi.n	8006908 <UART_SetConfig+0x2d0>
 80068d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d4:	d00c      	beq.n	80068f0 <UART_SetConfig+0x2b8>
 80068d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068da:	d815      	bhi.n	8006908 <UART_SetConfig+0x2d0>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <UART_SetConfig+0x2b0>
 80068e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e4:	d008      	beq.n	80068f8 <UART_SetConfig+0x2c0>
 80068e6:	e00f      	b.n	8006908 <UART_SetConfig+0x2d0>
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ee:	e022      	b.n	8006936 <UART_SetConfig+0x2fe>
 80068f0:	2302      	movs	r3, #2
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f6:	e01e      	b.n	8006936 <UART_SetConfig+0x2fe>
 80068f8:	2304      	movs	r3, #4
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fe:	e01a      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006900:	2308      	movs	r3, #8
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006906:	e016      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006908:	2310      	movs	r3, #16
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690e:	e012      	b.n	8006936 <UART_SetConfig+0x2fe>
 8006910:	cfff69f3 	.word	0xcfff69f3
 8006914:	40008000 	.word	0x40008000
 8006918:	40013800 	.word	0x40013800
 800691c:	40021000 	.word	0x40021000
 8006920:	40004400 	.word	0x40004400
 8006924:	40004800 	.word	0x40004800
 8006928:	40004c00 	.word	0x40004c00
 800692c:	40005000 	.word	0x40005000
 8006930:	2310      	movs	r3, #16
 8006932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4aae      	ldr	r2, [pc, #696]	; (8006bf4 <UART_SetConfig+0x5bc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	f040 8097 	bne.w	8006a70 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006942:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006946:	2b08      	cmp	r3, #8
 8006948:	d823      	bhi.n	8006992 <UART_SetConfig+0x35a>
 800694a:	a201      	add	r2, pc, #4	; (adr r2, 8006950 <UART_SetConfig+0x318>)
 800694c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006950:	08006975 	.word	0x08006975
 8006954:	08006993 	.word	0x08006993
 8006958:	0800697d 	.word	0x0800697d
 800695c:	08006993 	.word	0x08006993
 8006960:	08006983 	.word	0x08006983
 8006964:	08006993 	.word	0x08006993
 8006968:	08006993 	.word	0x08006993
 800696c:	08006993 	.word	0x08006993
 8006970:	0800698b 	.word	0x0800698b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006974:	f7fe f87e 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8006978:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800697a:	e010      	b.n	800699e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800697c:	4b9e      	ldr	r3, [pc, #632]	; (8006bf8 <UART_SetConfig+0x5c0>)
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006980:	e00d      	b.n	800699e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006982:	f7fe f809 	bl	8004998 <HAL_RCC_GetSysClockFreq>
 8006986:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006988:	e009      	b.n	800699e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006990:	e005      	b.n	800699e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800699c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8130 	beq.w	8006c06 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	4a94      	ldr	r2, [pc, #592]	; (8006bfc <UART_SetConfig+0x5c4>)
 80069ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d305      	bcc.n	80069d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d903      	bls.n	80069de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069dc:	e113      	b.n	8006c06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	2200      	movs	r2, #0
 80069e2:	60bb      	str	r3, [r7, #8]
 80069e4:	60fa      	str	r2, [r7, #12]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	4a84      	ldr	r2, [pc, #528]	; (8006bfc <UART_SetConfig+0x5c4>)
 80069ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2200      	movs	r2, #0
 80069f4:	603b      	str	r3, [r7, #0]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a00:	f7f9 fc0a 	bl	8000218 <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4610      	mov	r0, r2
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	020b      	lsls	r3, r1, #8
 8006a16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a1a:	0202      	lsls	r2, r0, #8
 8006a1c:	6979      	ldr	r1, [r7, #20]
 8006a1e:	6849      	ldr	r1, [r1, #4]
 8006a20:	0849      	lsrs	r1, r1, #1
 8006a22:	2000      	movs	r0, #0
 8006a24:	460c      	mov	r4, r1
 8006a26:	4605      	mov	r5, r0
 8006a28:	eb12 0804 	adds.w	r8, r2, r4
 8006a2c:	eb43 0905 	adc.w	r9, r3, r5
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	469a      	mov	sl, r3
 8006a38:	4693      	mov	fp, r2
 8006a3a:	4652      	mov	r2, sl
 8006a3c:	465b      	mov	r3, fp
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	f7f9 fbe9 	bl	8000218 <__aeabi_uldivmod>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a54:	d308      	bcc.n	8006a68 <UART_SetConfig+0x430>
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a5c:	d204      	bcs.n	8006a68 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6a3a      	ldr	r2, [r7, #32]
 8006a64:	60da      	str	r2, [r3, #12]
 8006a66:	e0ce      	b.n	8006c06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a6e:	e0ca      	b.n	8006c06 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a78:	d166      	bne.n	8006b48 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006a7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d827      	bhi.n	8006ad2 <UART_SetConfig+0x49a>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <UART_SetConfig+0x450>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006aad 	.word	0x08006aad
 8006a8c:	08006ab5 	.word	0x08006ab5
 8006a90:	08006abd 	.word	0x08006abd
 8006a94:	08006ad3 	.word	0x08006ad3
 8006a98:	08006ac3 	.word	0x08006ac3
 8006a9c:	08006ad3 	.word	0x08006ad3
 8006aa0:	08006ad3 	.word	0x08006ad3
 8006aa4:	08006ad3 	.word	0x08006ad3
 8006aa8:	08006acb 	.word	0x08006acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aac:	f7fd ffe2 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8006ab0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ab2:	e014      	b.n	8006ade <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab4:	f7fd fff4 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 8006ab8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006aba:	e010      	b.n	8006ade <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006abc:	4b4e      	ldr	r3, [pc, #312]	; (8006bf8 <UART_SetConfig+0x5c0>)
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ac0:	e00d      	b.n	8006ade <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ac2:	f7fd ff69 	bl	8004998 <HAL_RCC_GetSysClockFreq>
 8006ac6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ac8:	e009      	b.n	8006ade <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ad0:	e005      	b.n	8006ade <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006adc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 8090 	beq.w	8006c06 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	4a44      	ldr	r2, [pc, #272]	; (8006bfc <UART_SetConfig+0x5c4>)
 8006aec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006af8:	005a      	lsls	r2, r3, #1
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	085b      	lsrs	r3, r3, #1
 8006b00:	441a      	add	r2, r3
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	2b0f      	cmp	r3, #15
 8006b10:	d916      	bls.n	8006b40 <UART_SetConfig+0x508>
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b18:	d212      	bcs.n	8006b40 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f023 030f 	bic.w	r3, r3, #15
 8006b22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	8bfb      	ldrh	r3, [r7, #30]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	8bfa      	ldrh	r2, [r7, #30]
 8006b3c:	60da      	str	r2, [r3, #12]
 8006b3e:	e062      	b.n	8006c06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b46:	e05e      	b.n	8006c06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b4c:	2b08      	cmp	r3, #8
 8006b4e:	d828      	bhi.n	8006ba2 <UART_SetConfig+0x56a>
 8006b50:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <UART_SetConfig+0x520>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006b7d 	.word	0x08006b7d
 8006b5c:	08006b85 	.word	0x08006b85
 8006b60:	08006b8d 	.word	0x08006b8d
 8006b64:	08006ba3 	.word	0x08006ba3
 8006b68:	08006b93 	.word	0x08006b93
 8006b6c:	08006ba3 	.word	0x08006ba3
 8006b70:	08006ba3 	.word	0x08006ba3
 8006b74:	08006ba3 	.word	0x08006ba3
 8006b78:	08006b9b 	.word	0x08006b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b7c:	f7fd ff7a 	bl	8004a74 <HAL_RCC_GetPCLK1Freq>
 8006b80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b82:	e014      	b.n	8006bae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b84:	f7fd ff8c 	bl	8004aa0 <HAL_RCC_GetPCLK2Freq>
 8006b88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b8a:	e010      	b.n	8006bae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b8c:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <UART_SetConfig+0x5c0>)
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006b90:	e00d      	b.n	8006bae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b92:	f7fd ff01 	bl	8004998 <HAL_RCC_GetSysClockFreq>
 8006b96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006b98:	e009      	b.n	8006bae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ba0:	e005      	b.n	8006bae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006bac:	bf00      	nop
    }

    if (pclk != 0U)
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d028      	beq.n	8006c06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	4a10      	ldr	r2, [pc, #64]	; (8006bfc <UART_SetConfig+0x5c4>)
 8006bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	441a      	add	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	2b0f      	cmp	r3, #15
 8006bdc:	d910      	bls.n	8006c00 <UART_SetConfig+0x5c8>
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006be4:	d20c      	bcs.n	8006c00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60da      	str	r2, [r3, #12]
 8006bf0:	e009      	b.n	8006c06 <UART_SetConfig+0x5ce>
 8006bf2:	bf00      	nop
 8006bf4:	40008000 	.word	0x40008000
 8006bf8:	00f42400 	.word	0x00f42400
 8006bfc:	080078a4 	.word	0x080078a4
      }
      else
      {
        ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006c22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3730      	adds	r7, #48	; 0x30
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00a      	beq.n	8006c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01a      	beq.n	8006d46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d2e:	d10a      	bne.n	8006d46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b098      	sub	sp, #96	; 0x60
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d84:	f7fa fec6 	bl	8001b14 <HAL_GetTick>
 8006d88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d12f      	bne.n	8006df8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006da0:	2200      	movs	r2, #0
 8006da2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f88e 	bl	8006ec8 <UART_WaitOnFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d022      	beq.n	8006df8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dba:	e853 3f00 	ldrex	r3, [r3]
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e6      	bne.n	8006db2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e063      	b.n	8006ec0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d149      	bne.n	8006e9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f857 	bl	8006ec8 <UART_WaitOnFlagUntilTimeout>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d03c      	beq.n	8006e9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e6      	bne.n	8006e20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3308      	adds	r3, #8
 8006e58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f023 0301 	bic.w	r3, r3, #1
 8006e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	3308      	adds	r3, #8
 8006e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e72:	61fa      	str	r2, [r7, #28]
 8006e74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	69b9      	ldr	r1, [r7, #24]
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e5      	bne.n	8006e52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e012      	b.n	8006ec0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3758      	adds	r7, #88	; 0x58
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed8:	e04f      	b.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d04b      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ee2:	f7fa fe17 	bl	8001b14 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	69ba      	ldr	r2, [r7, #24]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d302      	bcc.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e04e      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d037      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b80      	cmp	r3, #128	; 0x80
 8006f0e:	d034      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b40      	cmp	r3, #64	; 0x40
 8006f14:	d031      	beq.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d110      	bne.n	8006f46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f838 	bl	8006fa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2208      	movs	r2, #8
 8006f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e029      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f54:	d111      	bne.n	8006f7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 f81e 	bl	8006fa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e00f      	b.n	8006f9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4013      	ands	r3, r2
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	bf0c      	ite	eq
 8006f8a:	2301      	moveq	r3, #1
 8006f8c:	2300      	movne	r3, #0
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	79fb      	ldrb	r3, [r7, #7]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d0a0      	beq.n	8006eda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b095      	sub	sp, #84	; 0x54
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8006fca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006fce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fd0:	e841 2300 	strex	r3, r2, [r1]
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e6      	bne.n	8006faa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007000:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e3      	bne.n	8006fdc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d118      	bne.n	800704e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	60bb      	str	r3, [r7, #8]
   return(result);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f023 0310 	bic.w	r3, r3, #16
 8007030:	647b      	str	r3, [r7, #68]	; 0x44
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6979      	ldr	r1, [r7, #20]
 8007040:	69ba      	ldr	r2, [r7, #24]
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	613b      	str	r3, [r7, #16]
   return(result);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e6      	bne.n	800701c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007062:	bf00      	nop
 8007064:	3754      	adds	r7, #84	; 0x54
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800706e:	b480      	push	{r7}
 8007070:	b085      	sub	sp, #20
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <HAL_UARTEx_DisableFifoMode+0x16>
 8007080:	2302      	movs	r3, #2
 8007082:	e027      	b.n	80070d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2224      	movs	r2, #36	; 0x24
 8007090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d101      	bne.n	80070f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e02d      	b.n	8007154 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2224      	movs	r2, #36	; 0x24
 8007104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 0201 	bic.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f84f 	bl	80071d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007170:	2302      	movs	r3, #2
 8007172:	e02d      	b.n	80071d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2224      	movs	r2, #36	; 0x24
 8007180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0201 	bic.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f811 	bl	80071d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d108      	bne.n	80071fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071f8:	e031      	b.n	800725e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071fa:	2308      	movs	r3, #8
 80071fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071fe:	2308      	movs	r3, #8
 8007200:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	0e5b      	lsrs	r3, r3, #25
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	0f5b      	lsrs	r3, r3, #29
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	7b3a      	ldrb	r2, [r7, #12]
 8007226:	4911      	ldr	r1, [pc, #68]	; (800726c <UARTEx_SetNbDataToProcess+0x94>)
 8007228:	5c8a      	ldrb	r2, [r1, r2]
 800722a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800722e:	7b3a      	ldrb	r2, [r7, #12]
 8007230:	490f      	ldr	r1, [pc, #60]	; (8007270 <UARTEx_SetNbDataToProcess+0x98>)
 8007232:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007234:	fb93 f3f2 	sdiv	r3, r3, r2
 8007238:	b29a      	uxth	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	7b7a      	ldrb	r2, [r7, #13]
 8007244:	4909      	ldr	r1, [pc, #36]	; (800726c <UARTEx_SetNbDataToProcess+0x94>)
 8007246:	5c8a      	ldrb	r2, [r1, r2]
 8007248:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800724c:	7b7a      	ldrb	r2, [r7, #13]
 800724e:	4908      	ldr	r1, [pc, #32]	; (8007270 <UARTEx_SetNbDataToProcess+0x98>)
 8007250:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007252:	fb93 f3f2 	sdiv	r3, r3, r2
 8007256:	b29a      	uxth	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	080078bc 	.word	0x080078bc
 8007270:	080078c4 	.word	0x080078c4

08007274 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800727c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007280:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	b29b      	uxth	r3, r3
 800728e:	43db      	mvns	r3, r3
 8007290:	b29b      	uxth	r3, r3
 8007292:	4013      	ands	r3, r2
 8007294:	b29a      	uxth	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b085      	sub	sp, #20
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	1d3b      	adds	r3, r7, #4
 80072b4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
	...

080072e8 <arm_conv_f32>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	b08b      	sub	sp, #44	; 0x2c
 80072ee:	4299      	cmp	r1, r3
 80072f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80072f2:	d205      	bcs.n	8007300 <arm_conv_f32+0x18>
 80072f4:	4606      	mov	r6, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	4610      	mov	r0, r2
 80072fa:	4619      	mov	r1, r3
 80072fc:	4632      	mov	r2, r6
 80072fe:	4623      	mov	r3, r4
 8007300:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8007304:	3101      	adds	r1, #1
 8007306:	1ac9      	subs	r1, r1, r3
 8007308:	f10b 3bff 	add.w	fp, fp, #4294967295
 800730c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8007310:	9101      	str	r1, [sp, #4]
 8007312:	1e59      	subs	r1, r3, #1
 8007314:	eb02 070b 	add.w	r7, r2, fp
 8007318:	f000 8277 	beq.w	800780a <arm_conv_f32+0x522>
 800731c:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80075dc <arm_conv_f32+0x2f4>
 8007320:	f102 0904 	add.w	r9, r2, #4
 8007324:	46aa      	mov	sl, r5
 8007326:	4680      	mov	r8, r0
 8007328:	2401      	movs	r4, #1
 800732a:	f014 0603 	ands.w	r6, r4, #3
 800732e:	d01b      	beq.n	8007368 <arm_conv_f32+0x80>
 8007330:	ed92 7a00 	vldr	s14, [r2]
 8007334:	edd8 6a00 	vldr	s13, [r8]
 8007338:	ee27 7a26 	vmul.f32	s14, s14, s13
 800733c:	3e01      	subs	r6, #1
 800733e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007342:	d011      	beq.n	8007368 <arm_conv_f32+0x80>
 8007344:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007348:	edd8 6a01 	vldr	s13, [r8, #4]
 800734c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007350:	2e01      	cmp	r6, #1
 8007352:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007356:	d007      	beq.n	8007368 <arm_conv_f32+0x80>
 8007358:	ed98 7a02 	vldr	s14, [r8, #8]
 800735c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8007360:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007364:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007368:	3401      	adds	r4, #1
 800736a:	42a3      	cmp	r3, r4
 800736c:	ecea 7a01 	vstmia	sl!, {s15}
 8007370:	464a      	mov	r2, r9
 8007372:	d03a      	beq.n	80073ea <arm_conv_f32+0x102>
 8007374:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8007378:	f000 824c 	beq.w	8007814 <arm_conv_f32+0x52c>
 800737c:	f100 0210 	add.w	r2, r0, #16
 8007380:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8007384:	eddf 7a95 	vldr	s15, [pc, #596]	; 80075dc <arm_conv_f32+0x2f4>
 8007388:	eb02 0c08 	add.w	ip, r2, r8
 800738c:	f1a9 0610 	sub.w	r6, r9, #16
 8007390:	ed12 7a04 	vldr	s14, [r2, #-16]
 8007394:	edd6 3a04 	vldr	s7, [r6, #16]
 8007398:	ed12 6a03 	vldr	s12, [r2, #-12]
 800739c:	ed96 4a03 	vldr	s8, [r6, #12]
 80073a0:	ed52 6a02 	vldr	s13, [r2, #-8]
 80073a4:	edd6 4a02 	vldr	s9, [r6, #8]
 80073a8:	ed52 5a01 	vldr	s11, [r2, #-4]
 80073ac:	ed96 5a01 	vldr	s10, [r6, #4]
 80073b0:	ee27 7a23 	vmul.f32	s14, s14, s7
 80073b4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80073b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073bc:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80073c0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80073c4:	ee65 6a85 	vmul.f32	s13, s11, s10
 80073c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073cc:	3210      	adds	r2, #16
 80073ce:	4594      	cmp	ip, r2
 80073d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d4:	f1a6 0610 	sub.w	r6, r6, #16
 80073d8:	d1da      	bne.n	8007390 <arm_conv_f32+0xa8>
 80073da:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 80073de:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 80073e2:	4480      	add	r8, r0
 80073e4:	f109 0904 	add.w	r9, r9, #4
 80073e8:	e79f      	b.n	800732a <arm_conv_f32+0x42>
 80073ea:	2b03      	cmp	r3, #3
 80073ec:	445d      	add	r5, fp
 80073ee:	f240 80e9 	bls.w	80075c4 <arm_conv_f32+0x2dc>
 80073f2:	9b01      	ldr	r3, [sp, #4]
 80073f4:	089a      	lsrs	r2, r3, #2
 80073f6:	9202      	str	r2, [sp, #8]
 80073f8:	f000 8203 	beq.w	8007802 <arm_conv_f32+0x51a>
 80073fc:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8007400:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8007404:	0112      	lsls	r2, r2, #4
 8007406:	f004 0603 	and.w	r6, r4, #3
 800740a:	9203      	str	r2, [sp, #12]
 800740c:	f1a3 0a10 	sub.w	sl, r3, #16
 8007410:	f1a3 020c 	sub.w	r2, r3, #12
 8007414:	3b08      	subs	r3, #8
 8007416:	9204      	str	r2, [sp, #16]
 8007418:	9305      	str	r3, [sp, #20]
 800741a:	f106 39ff 	add.w	r9, r6, #4294967295
 800741e:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8007422:	9a03      	ldr	r2, [sp, #12]
 8007424:	f100 0c1c 	add.w	ip, r0, #28
 8007428:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800742c:	464c      	mov	r4, r9
 800742e:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8007432:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 8007436:	f1a7 0310 	sub.w	r3, r7, #16
 800743a:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800743e:	eb05 0b02 	add.w	fp, r5, r2
 8007442:	461f      	mov	r7, r3
 8007444:	3510      	adds	r5, #16
 8007446:	ed9f 6a65 	vldr	s12, [pc, #404]	; 80075dc <arm_conv_f32+0x2f4>
 800744a:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 800744e:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8007452:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8007456:	eeb0 5a46 	vmov.f32	s10, s12
 800745a:	eef0 4a46 	vmov.f32	s9, s12
 800745e:	eef0 5a46 	vmov.f32	s11, s12
 8007462:	463a      	mov	r2, r7
 8007464:	4663      	mov	r3, ip
 8007466:	4641      	mov	r1, r8
 8007468:	edd2 6a04 	vldr	s13, [r2, #16]
 800746c:	ed13 0a04 	vldr	s0, [r3, #-16]
 8007470:	ed92 7a03 	vldr	s14, [r2, #12]
 8007474:	edd2 7a02 	vldr	s15, [r2, #8]
 8007478:	edd2 0a01 	vldr	s1, [r2, #4]
 800747c:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8007480:	ee62 3a26 	vmul.f32	s7, s4, s13
 8007484:	ee61 2a26 	vmul.f32	s5, s2, s13
 8007488:	ed13 1a03 	vldr	s2, [r3, #-12]
 800748c:	ee66 6a80 	vmul.f32	s13, s13, s0
 8007490:	ee21 4a87 	vmul.f32	s8, s3, s14
 8007494:	ee73 4a24 	vadd.f32	s9, s6, s9
 8007498:	ee33 5a85 	vadd.f32	s10, s7, s10
 800749c:	ee22 3a07 	vmul.f32	s6, s4, s14
 80074a0:	ed53 1a02 	vldr	s3, [r3, #-8]
 80074a4:	ee72 2aa5 	vadd.f32	s5, s5, s11
 80074a8:	ee36 6a86 	vadd.f32	s12, s13, s12
 80074ac:	ee60 3a07 	vmul.f32	s7, s0, s14
 80074b0:	ee27 7a01 	vmul.f32	s14, s14, s2
 80074b4:	ee33 3a24 	vadd.f32	s6, s6, s9
 80074b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80074bc:	ee74 2a22 	vadd.f32	s5, s8, s5
 80074c0:	ee60 4a27 	vmul.f32	s9, s0, s15
 80074c4:	ee22 4a27 	vmul.f32	s8, s4, s15
 80074c8:	ee73 3a85 	vadd.f32	s7, s7, s10
 80074cc:	ed13 2a01 	vldr	s4, [r3, #-4]
 80074d0:	ee21 5a27 	vmul.f32	s10, s2, s15
 80074d4:	ee67 7aa1 	vmul.f32	s15, s15, s3
 80074d8:	ee74 4a83 	vadd.f32	s9, s9, s6
 80074dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074e0:	ee34 4a22 	vadd.f32	s8, s8, s5
 80074e4:	ee60 5a20 	vmul.f32	s11, s0, s1
 80074e8:	ee21 3a20 	vmul.f32	s6, s2, s1
 80074ec:	ee35 5a23 	vadd.f32	s10, s10, s7
 80074f0:	ee21 7aa0 	vmul.f32	s14, s3, s1
 80074f4:	ee20 6a82 	vmul.f32	s12, s1, s4
 80074f8:	3901      	subs	r1, #1
 80074fa:	f1a2 0210 	sub.w	r2, r2, #16
 80074fe:	ee75 5a84 	vadd.f32	s11, s11, s8
 8007502:	ee73 4a24 	vadd.f32	s9, s6, s9
 8007506:	ee37 5a05 	vadd.f32	s10, s14, s10
 800750a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800750e:	f103 0310 	add.w	r3, r3, #16
 8007512:	d1a9      	bne.n	8007468 <arm_conv_f32+0x180>
 8007514:	eb0a 030c 	add.w	r3, sl, ip
 8007518:	2e00      	cmp	r6, #0
 800751a:	d042      	beq.n	80075a2 <arm_conv_f32+0x2ba>
 800751c:	edde 7a00 	vldr	s15, [lr]
 8007520:	ed93 4a00 	vldr	s8, [r3]
 8007524:	ee61 6a27 	vmul.f32	s13, s2, s15
 8007528:	ee61 3aa7 	vmul.f32	s7, s3, s15
 800752c:	ee22 7a27 	vmul.f32	s14, s4, s15
 8007530:	ee64 7a27 	vmul.f32	s15, s8, s15
 8007534:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8007538:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800753c:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007540:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007544:	eb09 030c 	add.w	r3, r9, ip
 8007548:	b35c      	cbz	r4, 80075a2 <arm_conv_f32+0x2ba>
 800754a:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800754e:	edd3 6a00 	vldr	s13, [r3]
 8007552:	ee21 7aa7 	vmul.f32	s14, s3, s15
 8007556:	ee22 3a27 	vmul.f32	s6, s4, s15
 800755a:	ee67 3a84 	vmul.f32	s7, s15, s8
 800755e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007562:	2c01      	cmp	r4, #1
 8007564:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007568:	ee74 4a83 	vadd.f32	s9, s9, s6
 800756c:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007570:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007574:	eb00 030c 	add.w	r3, r0, ip
 8007578:	d013      	beq.n	80075a2 <arm_conv_f32+0x2ba>
 800757a:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800757e:	edd3 3a00 	vldr	s7, [r3]
 8007582:	ee62 7a07 	vmul.f32	s15, s4, s14
 8007586:	ee27 4a04 	vmul.f32	s8, s14, s8
 800758a:	ee67 6a26 	vmul.f32	s13, s14, s13
 800758e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007592:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8007596:	ee74 4a84 	vadd.f32	s9, s9, s8
 800759a:	ee35 5a26 	vadd.f32	s10, s10, s13
 800759e:	ee36 6a07 	vadd.f32	s12, s12, s14
 80075a2:	45ab      	cmp	fp, r5
 80075a4:	ed45 5a04 	vstr	s11, [r5, #-16]
 80075a8:	ed45 4a03 	vstr	s9, [r5, #-12]
 80075ac:	ed05 5a02 	vstr	s10, [r5, #-8]
 80075b0:	ed05 6a01 	vstr	s12, [r5, #-4]
 80075b4:	f10c 0c10 	add.w	ip, ip, #16
 80075b8:	f105 0310 	add.w	r3, r5, #16
 80075bc:	f000 809e 	beq.w	80076fc <arm_conv_f32+0x414>
 80075c0:	461d      	mov	r5, r3
 80075c2:	e740      	b.n	8007446 <arm_conv_f32+0x15e>
 80075c4:	9a01      	ldr	r2, [sp, #4]
 80075c6:	46ac      	mov	ip, r5
 80075c8:	2a00      	cmp	r2, #0
 80075ca:	d037      	beq.n	800763c <arm_conv_f32+0x354>
 80075cc:	9a01      	ldr	r2, [sp, #4]
 80075ce:	ed9f 6a03 	vldr	s12, [pc, #12]	; 80075dc <arm_conv_f32+0x2f4>
 80075d2:	0096      	lsls	r6, r2, #2
 80075d4:	eb05 0c06 	add.w	ip, r5, r6
 80075d8:	4604      	mov	r4, r0
 80075da:	e021      	b.n	8007620 <arm_conv_f32+0x338>
 80075dc:	00000000 	.word	0x00000000
 80075e0:	edd7 7a00 	vldr	s15, [r7]
 80075e4:	ecb2 7a01 	vldmia	r2!, {s14}
 80075e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075ec:	ee77 7a86 	vadd.f32	s15, s15, s12
 80075f0:	b189      	cbz	r1, 8007616 <arm_conv_f32+0x32e>
 80075f2:	ed17 7a01 	vldr	s14, [r7, #-4]
 80075f6:	edd4 6a01 	vldr	s13, [r4, #4]
 80075fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80075fe:	2b02      	cmp	r3, #2
 8007600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007604:	d007      	beq.n	8007616 <arm_conv_f32+0x32e>
 8007606:	ed94 7a02 	vldr	s14, [r4, #8]
 800760a:	ed57 6a02 	vldr	s13, [r7, #-8]
 800760e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007612:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007616:	ece5 7a01 	vstmia	r5!, {s15}
 800761a:	4565      	cmp	r5, ip
 800761c:	4614      	mov	r4, r2
 800761e:	d00a      	beq.n	8007636 <arm_conv_f32+0x34e>
 8007620:	4622      	mov	r2, r4
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1dc      	bne.n	80075e0 <arm_conv_f32+0x2f8>
 8007626:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80075dc <arm_conv_f32+0x2f4>
 800762a:	ece5 7a01 	vstmia	r5!, {s15}
 800762e:	1d22      	adds	r2, r4, #4
 8007630:	4565      	cmp	r5, ip
 8007632:	4614      	mov	r4, r2
 8007634:	d1f4      	bne.n	8007620 <arm_conv_f32+0x338>
 8007636:	4430      	add	r0, r6
 8007638:	2900      	cmp	r1, #0
 800763a:	d059      	beq.n	80076f0 <arm_conv_f32+0x408>
 800763c:	088d      	lsrs	r5, r1, #2
 800763e:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 80075dc <arm_conv_f32+0x2f4>
 8007642:	d058      	beq.n	80076f6 <arm_conv_f32+0x40e>
 8007644:	f100 0210 	add.w	r2, r0, #16
 8007648:	f1a7 0310 	sub.w	r3, r7, #16
 800764c:	462c      	mov	r4, r5
 800764e:	ed52 6a04 	vldr	s13, [r2, #-16]
 8007652:	edd3 3a04 	vldr	s7, [r3, #16]
 8007656:	ed12 7a03 	vldr	s14, [r2, #-12]
 800765a:	ed93 4a03 	vldr	s8, [r3, #12]
 800765e:	ed52 7a02 	vldr	s15, [r2, #-8]
 8007662:	edd3 4a02 	vldr	s9, [r3, #8]
 8007666:	ed12 6a01 	vldr	s12, [r2, #-4]
 800766a:	ed93 5a01 	vldr	s10, [r3, #4]
 800766e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007672:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007676:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800767a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800767e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007682:	ee66 6a05 	vmul.f32	s13, s12, s10
 8007686:	ee77 7a87 	vadd.f32	s15, s15, s14
 800768a:	3c01      	subs	r4, #1
 800768c:	f102 0210 	add.w	r2, r2, #16
 8007690:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8007694:	f1a3 0310 	sub.w	r3, r3, #16
 8007698:	d1d9      	bne.n	800764e <arm_conv_f32+0x366>
 800769a:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800769e:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80076a2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80076a6:	f011 0203 	ands.w	r2, r1, #3
 80076aa:	d01b      	beq.n	80076e4 <arm_conv_f32+0x3fc>
 80076ac:	edd3 7a00 	vldr	s15, [r3]
 80076b0:	ed95 7a00 	vldr	s14, [r5]
 80076b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076b8:	3a01      	subs	r2, #1
 80076ba:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80076be:	d011      	beq.n	80076e4 <arm_conv_f32+0x3fc>
 80076c0:	ed53 7a01 	vldr	s15, [r3, #-4]
 80076c4:	ed95 7a01 	vldr	s14, [r5, #4]
 80076c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076cc:	2a01      	cmp	r2, #1
 80076ce:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80076d2:	d007      	beq.n	80076e4 <arm_conv_f32+0x3fc>
 80076d4:	edd5 7a02 	vldr	s15, [r5, #8]
 80076d8:	ed13 7a02 	vldr	s14, [r3, #-8]
 80076dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076e0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80076e4:	3901      	subs	r1, #1
 80076e6:	ecec 5a01 	vstmia	ip!, {s11}
 80076ea:	f100 0004 	add.w	r0, r0, #4
 80076ee:	d1a5      	bne.n	800763c <arm_conv_f32+0x354>
 80076f0:	b00b      	add	sp, #44	; 0x2c
 80076f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f6:	463b      	mov	r3, r7
 80076f8:	4605      	mov	r5, r0
 80076fa:	e7d4      	b.n	80076a6 <arm_conv_f32+0x3be>
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	9b03      	ldr	r3, [sp, #12]
 8007708:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 800770c:	4403      	add	r3, r0
 800770e:	465d      	mov	r5, fp
 8007710:	469e      	mov	lr, r3
 8007712:	9b01      	ldr	r3, [sp, #4]
 8007714:	f013 0c03 	ands.w	ip, r3, #3
 8007718:	d075      	beq.n	8007806 <arm_conv_f32+0x51e>
 800771a:	9b02      	ldr	r3, [sp, #8]
 800771c:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8007720:	f004 0403 	and.w	r4, r4, #3
 8007724:	f104 3bff 	add.w	fp, r4, #4294967295
 8007728:	f103 0801 	add.w	r8, r3, #1
 800772c:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8007730:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8007734:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8007738:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800773c:	f1a7 0210 	sub.w	r2, r7, #16
 8007740:	4618      	mov	r0, r3
 8007742:	465b      	mov	r3, fp
 8007744:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8007748:	468b      	mov	fp, r1
 800774a:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800774e:	4621      	mov	r1, r4
 8007750:	4617      	mov	r7, r2
 8007752:	461c      	mov	r4, r3
 8007754:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 80075dc <arm_conv_f32+0x2f4>
 8007758:	f10e 0210 	add.w	r2, lr, #16
 800775c:	463b      	mov	r3, r7
 800775e:	4656      	mov	r6, sl
 8007760:	ed12 7a04 	vldr	s14, [r2, #-16]
 8007764:	edd3 3a04 	vldr	s7, [r3, #16]
 8007768:	ed12 6a03 	vldr	s12, [r2, #-12]
 800776c:	ed93 4a03 	vldr	s8, [r3, #12]
 8007770:	ed52 6a02 	vldr	s13, [r2, #-8]
 8007774:	edd3 4a02 	vldr	s9, [r3, #8]
 8007778:	ed52 5a01 	vldr	s11, [r2, #-4]
 800777c:	ed93 5a01 	vldr	s10, [r3, #4]
 8007780:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007784:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800778c:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8007790:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007794:	ee65 6a85 	vmul.f32	s13, s11, s10
 8007798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800779c:	3e01      	subs	r6, #1
 800779e:	f102 0210 	add.w	r2, r2, #16
 80077a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a6:	f1a3 0310 	sub.w	r3, r3, #16
 80077aa:	d1d9      	bne.n	8007760 <arm_conv_f32+0x478>
 80077ac:	4486      	add	lr, r0
 80077ae:	b1d1      	cbz	r1, 80077e6 <arm_conv_f32+0x4fe>
 80077b0:	ed99 7a00 	vldr	s14, [r9]
 80077b4:	edde 6a00 	vldr	s13, [lr]
 80077b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80077bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077c0:	b18c      	cbz	r4, 80077e6 <arm_conv_f32+0x4fe>
 80077c2:	ed19 7a01 	vldr	s14, [r9, #-4]
 80077c6:	edde 6a01 	vldr	s13, [lr, #4]
 80077ca:	ee27 7a26 	vmul.f32	s14, s14, s13
 80077ce:	2c01      	cmp	r4, #1
 80077d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077d4:	d007      	beq.n	80077e6 <arm_conv_f32+0x4fe>
 80077d6:	ed9e 7a02 	vldr	s14, [lr, #8]
 80077da:	ed59 6a02 	vldr	s13, [r9, #-8]
 80077de:	ee27 7a26 	vmul.f32	s14, s14, s13
 80077e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077e6:	ece5 7a01 	vstmia	r5!, {s15}
 80077ea:	4565      	cmp	r5, ip
 80077ec:	46c6      	mov	lr, r8
 80077ee:	f108 0804 	add.w	r8, r8, #4
 80077f2:	d1af      	bne.n	8007754 <arm_conv_f32+0x46c>
 80077f4:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 80077f8:	4659      	mov	r1, fp
 80077fa:	9b01      	ldr	r3, [sp, #4]
 80077fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007800:	e71c      	b.n	800763c <arm_conv_f32+0x354>
 8007802:	4686      	mov	lr, r0
 8007804:	e785      	b.n	8007712 <arm_conv_f32+0x42a>
 8007806:	46ac      	mov	ip, r5
 8007808:	e7f7      	b.n	80077fa <arm_conv_f32+0x512>
 800780a:	9a01      	ldr	r2, [sp, #4]
 800780c:	2a00      	cmp	r2, #0
 800780e:	f47f aedd 	bne.w	80075cc <arm_conv_f32+0x2e4>
 8007812:	e76d      	b.n	80076f0 <arm_conv_f32+0x408>
 8007814:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80075dc <arm_conv_f32+0x2f4>
 8007818:	4680      	mov	r8, r0
 800781a:	e5e3      	b.n	80073e4 <arm_conv_f32+0xfc>

0800781c <memset>:
 800781c:	4402      	add	r2, r0
 800781e:	4603      	mov	r3, r0
 8007820:	4293      	cmp	r3, r2
 8007822:	d100      	bne.n	8007826 <memset+0xa>
 8007824:	4770      	bx	lr
 8007826:	f803 1b01 	strb.w	r1, [r3], #1
 800782a:	e7f9      	b.n	8007820 <memset+0x4>

0800782c <__libc_init_array>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	4d0d      	ldr	r5, [pc, #52]	; (8007864 <__libc_init_array+0x38>)
 8007830:	4c0d      	ldr	r4, [pc, #52]	; (8007868 <__libc_init_array+0x3c>)
 8007832:	1b64      	subs	r4, r4, r5
 8007834:	10a4      	asrs	r4, r4, #2
 8007836:	2600      	movs	r6, #0
 8007838:	42a6      	cmp	r6, r4
 800783a:	d109      	bne.n	8007850 <__libc_init_array+0x24>
 800783c:	4d0b      	ldr	r5, [pc, #44]	; (800786c <__libc_init_array+0x40>)
 800783e:	4c0c      	ldr	r4, [pc, #48]	; (8007870 <__libc_init_array+0x44>)
 8007840:	f000 f818 	bl	8007874 <_init>
 8007844:	1b64      	subs	r4, r4, r5
 8007846:	10a4      	asrs	r4, r4, #2
 8007848:	2600      	movs	r6, #0
 800784a:	42a6      	cmp	r6, r4
 800784c:	d105      	bne.n	800785a <__libc_init_array+0x2e>
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	f855 3b04 	ldr.w	r3, [r5], #4
 8007854:	4798      	blx	r3
 8007856:	3601      	adds	r6, #1
 8007858:	e7ee      	b.n	8007838 <__libc_init_array+0xc>
 800785a:	f855 3b04 	ldr.w	r3, [r5], #4
 800785e:	4798      	blx	r3
 8007860:	3601      	adds	r6, #1
 8007862:	e7f2      	b.n	800784a <__libc_init_array+0x1e>
 8007864:	080078d4 	.word	0x080078d4
 8007868:	080078d4 	.word	0x080078d4
 800786c:	080078d4 	.word	0x080078d4
 8007870:	080078d8 	.word	0x080078d8

08007874 <_init>:
 8007874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007876:	bf00      	nop
 8007878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800787a:	bc08      	pop	{r3}
 800787c:	469e      	mov	lr, r3
 800787e:	4770      	bx	lr

08007880 <_fini>:
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	bf00      	nop
 8007884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007886:	bc08      	pop	{r3}
 8007888:	469e      	mov	lr, r3
 800788a:	4770      	bx	lr
