
Benchmark_Accelerators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a2c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008c04  08008c04  00018c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c44  08008c44  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08008c44  08008c44  00018c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c4c  08008c4c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c50  08008c50  00018c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08008c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a00  20000034  08008c88  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  08008c88  00020a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026c91  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ceb  00000000  00000000  00046dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002218  00000000  00000000  0004aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aa2  00000000  00000000  0004ccb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002deaf  00000000  00000000  0004e752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027d9d  00000000  00000000  0007c601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001453fe  00000000  00000000  000a439e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009798  00000000  00000000  001e979c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001f2f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001363  00000000  00000000  001f2fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001f4309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008bec 	.word	0x08008bec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	08008bec 	.word	0x08008bec

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
float32_t b[5] = {1,2,3,4,5};
float32_t c[9];


int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f001 ff94 	bl	8002446 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f839 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 ffdd 	bl	80014e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000526:	f000 f881 	bl	800062c <MX_ADC1_Init>
  MX_ADC2_Init();
 800052a:	f000 f8f7 	bl	800071c <MX_ADC2_Init>
  MX_ADC3_Init();
 800052e:	f000 f95b 	bl	80007e8 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000532:	f000 f9d1 	bl	80008d8 <MX_ADC4_Init>
  MX_DAC1_Init();
 8000536:	f000 fa35 	bl	80009a4 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 800053a:	f000 fa77 	bl	8000a2c <MX_FDCAN1_Init>
  MX_HRTIM1_Init();
 800053e:	f000 fabb 	bl	8000ab8 <MX_HRTIM1_Init>
  MX_I2C3_SMBUS_Init();
 8000542:	f000 fb33 	bl	8000bac <MX_I2C3_SMBUS_Init>
  MX_OPAMP1_Init();
 8000546:	f000 fb73 	bl	8000c30 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 800054a:	f000 fb99 	bl	8000c80 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 800054e:	f000 fbbf 	bl	8000cd0 <MX_OPAMP3_Init>
  MX_OPAMP4_Init();
 8000552:	f000 fbe5 	bl	8000d20 <MX_OPAMP4_Init>
  MX_SPI2_Init();
 8000556:	f000 fc0b 	bl	8000d70 <MX_SPI2_Init>
  MX_TIM1_Init();
 800055a:	f000 fc47 	bl	8000dec <MX_TIM1_Init>
  MX_TIM2_Init();
 800055e:	f000 fd09 	bl	8000f74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000562:	f000 fd77 	bl	8001054 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000566:	f000 fddb 	bl	8001120 <MX_TIM5_Init>
  MX_TIM8_Init();
 800056a:	f000 fe49 	bl	8001200 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800056e:	f000 ff41 	bl	80013f4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000572:	f000 ff8d 	bl	8001490 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  arm_conv_f32(a,5,b,5,c);
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <main+0x74>)
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2305      	movs	r3, #5
 800057c:	4a03      	ldr	r2, [pc, #12]	; (800058c <main+0x78>)
 800057e:	2105      	movs	r1, #5
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <main+0x7c>)
 8000582:	f008 f86d 	bl	8008660 <arm_conv_f32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000586:	e7fe      	b.n	8000586 <main+0x72>
 8000588:	20000a04 	.word	0x20000a04
 800058c:	20000014 	.word	0x20000014
 8000590:	20000000 	.word	0x20000000

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	2238      	movs	r2, #56	; 0x38
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f008 faf6 	bl	8008b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ba:	f004 fdad 	bl	8005118 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005be:	2321      	movs	r3, #33	; 0x21
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d0:	2303      	movs	r3, #3
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d8:	2332      	movs	r3, #50	; 0x32
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0318 	add.w	r3, r7, #24
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 fe37 	bl	8005260 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80005f8:	f001 f862 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2303      	movs	r3, #3
 8000602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2104      	movs	r1, #4
 8000614:	4618      	mov	r0, r3
 8000616:	f005 f935 	bl	8005884 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000620:	f001 f84e 	bl	80016c0 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	; 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2220      	movs	r2, #32
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f008 faa5 	bl	8008b94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800064a:	4b32      	ldr	r3, [pc, #200]	; (8000714 <MX_ADC1_Init+0xe8>)
 800064c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000650:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000652:	4b30      	ldr	r3, [pc, #192]	; (8000714 <MX_ADC1_Init+0xe8>)
 8000654:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000658:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065a:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000660:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <MX_ADC1_Init+0xe8>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066c:	4b29      	ldr	r3, [pc, #164]	; (8000714 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <MX_ADC1_Init+0xe8>)
 8000674:	2204      	movs	r2, #4
 8000676:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000678:	4b26      	ldr	r3, [pc, #152]	; (8000714 <MX_ADC1_Init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067e:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_ADC1_Init+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <MX_ADC1_Init+0xe8>)
 8000686:	2201      	movs	r2, #1
 8000688:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_ADC1_Init+0xe8>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_ADC1_Init+0xe8>)
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_ADC1_Init+0xe8>)
 800069a:	2200      	movs	r2, #0
 800069c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_ADC1_Init+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_ADC1_Init+0xe8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_ADC1_Init+0xe8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b4:	4817      	ldr	r0, [pc, #92]	; (8000714 <MX_ADC1_Init+0xe8>)
 80006b6:	f002 f90d 	bl	80028d4 <HAL_ADC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006c0:	f000 fffe 	bl	80016c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006cc:	4619      	mov	r1, r3
 80006ce:	4811      	ldr	r0, [pc, #68]	; (8000714 <MX_ADC1_Init+0xe8>)
 80006d0:	f002 ff22 	bl	8003518 <HAL_ADCEx_MultiModeConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006da:	f000 fff1 	bl	80016c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_ADC1_Init+0xec>)
 80006e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e2:	2306      	movs	r3, #6
 80006e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ea:	237f      	movs	r3, #127	; 0x7f
 80006ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ee:	2304      	movs	r3, #4
 80006f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_ADC1_Init+0xe8>)
 80006fc:	f002 faa6 	bl	8002c4c <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000706:	f000 ffdb 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	; 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000050 	.word	0x20000050
 8000718:	1d500080 	.word	0x1d500080

0800071c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2220      	movs	r2, #32
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f008 fa33 	bl	8008b94 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000730:	4a2b      	ldr	r2, [pc, #172]	; (80007e0 <MX_ADC2_Init+0xc4>)
 8000732:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000736:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800073a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000742:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000756:	2204      	movs	r2, #4
 8000758:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800075a:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_ADC2_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000768:	2201      	movs	r2, #1
 800076a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_ADC2_Init+0xc0>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000776:	2200      	movs	r2, #0
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_ADC2_Init+0xc0>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_ADC2_Init+0xc0>)
 800078a:	2200      	movs	r2, #0
 800078c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <MX_ADC2_Init+0xc0>)
 8000798:	f002 f89c 	bl	80028d4 <HAL_ADC_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80007a2:	f000 ff8d 	bl	80016c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_ADC2_Init+0xc8>)
 80007a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007aa:	2306      	movs	r3, #6
 80007ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b2:	237f      	movs	r3, #127	; 0x7f
 80007b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b6:	2304      	movs	r3, #4
 80007b8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_ADC2_Init+0xc0>)
 80007c4:	f002 fa42 	bl	8002c4c <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007ce:	f000 ff77 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3720      	adds	r7, #32
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000bc 	.word	0x200000bc
 80007e0:	50000100 	.word	0x50000100
 80007e4:	14f00020 	.word	0x14f00020

080007e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2220      	movs	r2, #32
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f008 f9c7 	bl	8008b94 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000806:	4b31      	ldr	r3, [pc, #196]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000808:	4a31      	ldr	r2, [pc, #196]	; (80008d0 <MX_ADC3_Init+0xe8>)
 800080a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800080c:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_ADC3_Init+0xe4>)
 800080e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000812:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_ADC3_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082c:	4b27      	ldr	r3, [pc, #156]	; (80008cc <MX_ADC3_Init+0xe4>)
 800082e:	2204      	movs	r2, #4
 8000830:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000834:	2200      	movs	r2, #0
 8000836:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <MX_ADC3_Init+0xe4>)
 800083a:	2200      	movs	r2, #0
 800083c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000840:	2201      	movs	r2, #1
 8000842:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084c:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_ADC3_Init+0xe4>)
 800084e:	2200      	movs	r2, #0
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000852:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_ADC3_Init+0xe4>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000862:	2200      	movs	r2, #0
 8000864:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800086e:	4817      	ldr	r0, [pc, #92]	; (80008cc <MX_ADC3_Init+0xe4>)
 8000870:	f002 f830 	bl	80028d4 <HAL_ADC_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800087a:	f000 ff21 	bl	80016c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	4619      	mov	r1, r3
 8000888:	4810      	ldr	r0, [pc, #64]	; (80008cc <MX_ADC3_Init+0xe4>)
 800088a:	f002 fe45 	bl	8003518 <HAL_ADCEx_MultiModeConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000894:	f000 ff14 	bl	80016c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_ADC3_Init+0xec>)
 800089a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089c:	2306      	movs	r3, #6
 800089e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008a4:	237f      	movs	r3, #127	; 0x7f
 80008a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a8:	2304      	movs	r3, #4
 80008aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_ADC3_Init+0xe4>)
 80008b6:	f002 f9c9 	bl	8002c4c <HAL_ADC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80008c0:	f000 fefe 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3730      	adds	r7, #48	; 0x30
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000128 	.word	0x20000128
 80008d0:	50000400 	.word	0x50000400
 80008d4:	25b00200 	.word	0x25b00200

080008d8 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2220      	movs	r2, #32
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f008 f955 	bl	8008b94 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80008ea:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_ADC4_Init+0xc0>)
 80008ec:	4a2b      	ldr	r2, [pc, #172]	; (800099c <MX_ADC4_Init+0xc4>)
 80008ee:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008f0:	4b29      	ldr	r3, [pc, #164]	; (8000998 <MX_ADC4_Init+0xc0>)
 80008f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008f6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_ADC4_Init+0xc0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_ADC4_Init+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_ADC4_Init+0xc0>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_ADC4_Init+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_ADC4_Init+0xc0>)
 8000912:	2204      	movs	r2, #4
 8000914:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_ADC4_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800091c:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_ADC4_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_ADC4_Init+0xc0>)
 8000924:	2201      	movs	r2, #1
 8000926:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_ADC4_Init+0xc0>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ADC4_Init+0xc0>)
 8000932:	2200      	movs	r2, #0
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_ADC4_Init+0xc0>)
 8000938:	2200      	movs	r2, #0
 800093a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_ADC4_Init+0xc0>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_ADC4_Init+0xc0>)
 8000946:	2200      	movs	r2, #0
 8000948:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_ADC4_Init+0xc0>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000952:	4811      	ldr	r0, [pc, #68]	; (8000998 <MX_ADC4_Init+0xc0>)
 8000954:	f001 ffbe 	bl	80028d4 <HAL_ADC_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800095e:	f000 feaf 	bl	80016c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_ADC4_Init+0xc8>)
 8000964:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000966:	2306      	movs	r3, #6
 8000968:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800096e:	237f      	movs	r3, #127	; 0x7f
 8000970:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000972:	2304      	movs	r3, #4
 8000974:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_ADC4_Init+0xc0>)
 8000980:	f002 f964 	bl	8002c4c <HAL_ADC_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 800098a:	f000 fe99 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000194 	.word	0x20000194
 800099c:	50000500 	.word	0x50000500
 80009a0:	32601000 	.word	0x32601000

080009a4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2230      	movs	r2, #48	; 0x30
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f008 f8ef 	bl	8008b94 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_DAC1_Init+0x80>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_DAC1_Init+0x84>)
 80009ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009bc:	4819      	ldr	r0, [pc, #100]	; (8000a24 <MX_DAC1_Init+0x80>)
 80009be:	f002 ff96 	bl	80038ee <HAL_DAC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009c8:	f000 fe7a 	bl	80016c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80009cc:	2302      	movs	r3, #2
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009f0:	463b      	mov	r3, r7
 80009f2:	2200      	movs	r2, #0
 80009f4:	4619      	mov	r1, r3
 80009f6:	480b      	ldr	r0, [pc, #44]	; (8000a24 <MX_DAC1_Init+0x80>)
 80009f8:	f002 ff9c 	bl	8003934 <HAL_DAC_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000a02:	f000 fe5d 	bl	80016c0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a06:	463b      	mov	r3, r7
 8000a08:	2210      	movs	r2, #16
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_DAC1_Init+0x80>)
 8000a0e:	f002 ff91 	bl	8003934 <HAL_DAC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000a18:	f000 fe52 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3730      	adds	r7, #48	; 0x30
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000200 	.word	0x20000200
 8000a28:	50000800 	.word	0x50000800

08000a2c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a32:	4a20      	ldr	r2, [pc, #128]	; (8000ab4 <MX_FDCAN1_Init+0x88>)
 8000a34:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a5c:	2210      	movs	r2, #16
 8000a5e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a68:	2202      	movs	r2, #2
 8000a6a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_FDCAN1_Init+0x84>)
 8000a9e:	f003 f901 	bl	8003ca4 <HAL_FDCAN_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000aa8:	f000 fe0a 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000214 	.word	0x20000214
 8000ab4:	40006400 	.word	0x40006400

08000ab8 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b09c      	sub	sp, #112	; 0x70
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000abe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2260      	movs	r2, #96	; 0x60
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 f85e 	bl	8008b94 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000ad8:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <MX_HRTIM1_Init+0xec>)
 8000ada:	4a33      	ldr	r2, [pc, #204]	; (8000ba8 <MX_HRTIM1_Init+0xf0>)
 8000adc:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <MX_HRTIM1_Init+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <MX_HRTIM1_Init+0xec>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000aea:	482e      	ldr	r0, [pc, #184]	; (8000ba4 <MX_HRTIM1_Init+0xec>)
 8000aec:	f003 fc3a 	bl	8004364 <HAL_HRTIM_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_HRTIM1_Init+0x42>
  {
    Error_Handler();
 8000af6:	f000 fde3 	bl	80016c0 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000afa:	210c      	movs	r1, #12
 8000afc:	4829      	ldr	r0, [pc, #164]	; (8000ba4 <MX_HRTIM1_Init+0xec>)
 8000afe:	f003 fd01 	bl	8004504 <HAL_HRTIM_DLLCalibrationStart>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_HRTIM1_Init+0x54>
  {
    Error_Handler();
 8000b08:	f000 fdda 	bl	80016c0 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8000b0c:	210a      	movs	r1, #10
 8000b0e:	4825      	ldr	r0, [pc, #148]	; (8000ba4 <MX_HRTIM1_Init+0xec>)
 8000b10:	f003 fd50 	bl	80045b4 <HAL_HRTIM_PollForDLLCalibration>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_HRTIM1_Init+0x66>
  {
    Error_Handler();
 8000b1a:	f000 fdd1 	bl	80016c0 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFDF;
 8000b1e:	f64f 73df 	movw	r3, #65503	; 0xffdf
 8000b22:	663b      	str	r3, [r7, #96]	; 0x60
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000b24:	2300      	movs	r3, #0
 8000b26:	667b      	str	r3, [r7, #100]	; 0x64
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000b30:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b34:	461a      	mov	r2, r3
 8000b36:	2106      	movs	r1, #6
 8000b38:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <MX_HRTIM1_Init+0xec>)
 8000b3a:	f003 fd6f 	bl	800461c <HAL_HRTIM_TimeBaseConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_HRTIM1_Init+0x90>
  {
    Error_Handler();
 8000b44:	f000 fdbc 	bl	80016c0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	603b      	str	r3, [r7, #0]
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
  pTimerCfg.DMASrcAddress = 0x0000;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  pTimerCfg.DMADstAddress = 0x0000;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  pTimerCfg.DMASize = 0x1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	613b      	str	r3, [r7, #16]
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	461a      	mov	r2, r3
 8000b88:	2106      	movs	r1, #6
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_HRTIM1_Init+0xec>)
 8000b8c:	f003 fd6e 	bl	800466c <HAL_HRTIM_WaveformTimerConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_HRTIM1_Init+0xe2>
  {
    Error_Handler();
 8000b96:	f000 fd93 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3770      	adds	r7, #112	; 0x70
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000278 	.word	0x20000278
 8000ba8:	40016800 	.word	0x40016800

08000bac <MX_I2C3_SMBUS_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_SMBUS_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hsmbus3.Instance = I2C3;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bb2:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <MX_I2C3_SMBUS_Init+0x7c>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hsmbus3.Init.Timing = 0x20C0EDFF;
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bb8:	4a1c      	ldr	r2, [pc, #112]	; (8000c2c <MX_I2C3_SMBUS_Init+0x80>)
 8000bba:	605a      	str	r2, [r3, #4]
  hsmbus3.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000bbc:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hsmbus3.Init.OwnAddress1 = 2;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	60da      	str	r2, [r3, #12]
  hsmbus3.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000bc8:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	611a      	str	r2, [r3, #16]
  hsmbus3.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hsmbus3.Init.OwnAddress2 = 0;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hsmbus3.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hsmbus3.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  hsmbus3.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus3.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus3.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus3.Init.SMBusTimeout = 0x00008727;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000bfa:	f248 7227 	movw	r2, #34599	; 0x8727
 8000bfe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus3) != HAL_OK)
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000c02:	f005 faa9 	bl	8006158 <HAL_SMBUS_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_I2C3_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000c0c:	f000 fd58 	bl	80016c0 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus3) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_I2C3_SMBUS_Init+0x78>)
 8000c12:	f005 fb59 	bl	80062c8 <HAL_SMBUS_EnableAlert_IT>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C3_SMBUS_Init+0x74>
  {
    Error_Handler();
 8000c1c:	f000 fd50 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000374 	.word	0x20000374
 8000c28:	40007800 	.word	0x40007800
 8000c2c:	20c0edff 	.word	0x20c0edff

08000c30 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_OPAMP1_Init+0x48>)
 8000c36:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <MX_OPAMP1_Init+0x4c>)
 8000c38:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_OPAMP1_Init+0x48>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <MX_OPAMP1_Init+0x48>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_OPAMP1_Init+0x48>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <MX_OPAMP1_Init+0x48>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_OPAMP1_Init+0x48>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <MX_OPAMP1_Init+0x48>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_OPAMP1_Init+0x48>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <MX_OPAMP1_Init+0x48>)
 8000c66:	f004 f88f 	bl	8004d88 <HAL_OPAMP_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_OPAMP1_Init+0x44>
  {
    Error_Handler();
 8000c70:	f000 fd26 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200003c4 	.word	0x200003c4
 8000c7c:	40010300 	.word	0x40010300

08000c80 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000c84:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_OPAMP2_Init+0x48>)
 8000c86:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <MX_OPAMP2_Init+0x4c>)
 8000c88:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_OPAMP2_Init+0x48>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <MX_OPAMP2_Init+0x48>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hopamp2.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO1;
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_OPAMP2_Init+0x48>)
 8000c98:	2220      	movs	r2, #32
 8000c9a:	60da      	str	r2, [r3, #12]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MX_OPAMP2_Init+0x48>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_OPAMP2_Init+0x48>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <MX_OPAMP2_Init+0x48>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_OPAMP2_Init+0x48>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_OPAMP2_Init+0x48>)
 8000cb6:	f004 f867 	bl	8004d88 <HAL_OPAMP_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_OPAMP2_Init+0x44>
  {
    Error_Handler();
 8000cc0:	f000 fcfe 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000400 	.word	0x20000400
 8000ccc:	40010304 	.word	0x40010304

08000cd0 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_OPAMP3_Init+0x48>)
 8000cd6:	4a11      	ldr	r2, [pc, #68]	; (8000d1c <MX_OPAMP3_Init+0x4c>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_OPAMP3_Init+0x48>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_STANDALONE_MODE;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_OPAMP3_Init+0x48>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  hopamp3.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_OPAMP3_Init+0x48>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_OPAMP3_Init+0x48>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_OPAMP3_Init+0x48>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <MX_OPAMP3_Init+0x48>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_OPAMP3_Init+0x48>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_OPAMP3_Init+0x48>)
 8000d06:	f004 f83f 	bl	8004d88 <HAL_OPAMP_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_OPAMP3_Init+0x44>
  {
    Error_Handler();
 8000d10:	f000 fcd6 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000043c 	.word	0x2000043c
 8000d1c:	40010308 	.word	0x40010308

08000d20 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <MX_OPAMP4_Init+0x48>)
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <MX_OPAMP4_Init+0x4c>)
 8000d28:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_OPAMP4_Init+0x48>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_STANDALONE_MODE;
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <MX_OPAMP4_Init+0x48>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hopamp4.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_OPAMP4_Init+0x48>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <MX_OPAMP4_Init+0x48>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_OPAMP4_Init+0x48>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <MX_OPAMP4_Init+0x48>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_OPAMP4_Init+0x48>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_OPAMP4_Init+0x48>)
 8000d56:	f004 f817 	bl	8004d88 <HAL_OPAMP_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_OPAMP4_Init+0x44>
  {
    Error_Handler();
 8000d60:	f000 fcae 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000478 	.word	0x20000478
 8000d6c:	4001030c 	.word	0x4001030c

08000d70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <MX_SPI2_Init+0x78>)
 8000d78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000d7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000d8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d8e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000da6:	2218      	movs	r2, #24
 8000da8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000dca:	2208      	movs	r2, #8
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_SPI2_Init+0x74>)
 8000dd0:	f005 facd 	bl	800636e <HAL_SPI_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000dda:	f000 fc71 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200004b4 	.word	0x200004b4
 8000de8:	40003800 	.word	0x40003800

08000dec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b09a      	sub	sp, #104	; 0x68
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000dfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	615a      	str	r2, [r3, #20]
 8000e1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2234      	movs	r2, #52	; 0x34
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f007 feb5 	bl	8008b94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e2a:	4b50      	ldr	r3, [pc, #320]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000e2c:	4a50      	ldr	r2, [pc, #320]	; (8000f70 <MX_TIM1_Init+0x184>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e30:	4b4e      	ldr	r3, [pc, #312]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b4d      	ldr	r3, [pc, #308]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e3c:	4b4b      	ldr	r3, [pc, #300]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b49      	ldr	r3, [pc, #292]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e4a:	4b48      	ldr	r3, [pc, #288]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000e56:	4845      	ldr	r0, [pc, #276]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000e58:	f005 fb8b 	bl	8006572 <HAL_TIM_OC_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e62:	f000 fc2d 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e76:	4619      	mov	r1, r3
 8000e78:	483c      	ldr	r0, [pc, #240]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000e7a:	f006 fafd 	bl	8007478 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000e84:	f000 fc1c 	bl	80016c0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000e94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e98:	461a      	mov	r2, r3
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	4833      	ldr	r0, [pc, #204]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000e9e:	f006 fc15 	bl	80076cc <HAL_TIMEx_ConfigBreakInput>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000ea8:	f000 fc0a 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4826      	ldr	r0, [pc, #152]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000ed2:	f005 fba5 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000edc:	f000 fbf0 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4820      	ldr	r0, [pc, #128]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000eea:	f005 fb99 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000ef4:	f000 fbe4 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000efc:	2208      	movs	r2, #8
 8000efe:	4619      	mov	r1, r3
 8000f00:	481a      	ldr	r0, [pc, #104]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000f02:	f005 fb8d 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000f0c:	f000 fbd8 	bl	80016c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000f50:	f006 fb28 	bl	80075a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000f5a:	f000 fbb1 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f5e:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM1_Init+0x180>)
 8000f60:	f001 f894 	bl	800208c <HAL_TIM_MspPostInit>

}
 8000f64:	bf00      	nop
 8000f66:	3768      	adds	r7, #104	; 0x68
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000518 	.word	0x20000518
 8000f70:	40012c00 	.word	0x40012c00

08000f74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <MX_TIM2_Init+0xdc>)
 8000f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <MX_TIM2_Init+0xdc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <MX_TIM2_Init+0xdc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <MX_TIM2_Init+0xdc>)
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_TIM2_Init+0xdc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <MX_TIM2_Init+0xdc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000fc0:	4823      	ldr	r0, [pc, #140]	; (8001050 <MX_TIM2_Init+0xdc>)
 8000fc2:	f005 fad6 	bl	8006572 <HAL_TIM_OC_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000fcc:	f000 fb78 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481c      	ldr	r0, [pc, #112]	; (8001050 <MX_TIM2_Init+0xdc>)
 8000fe0:	f006 fa4a 	bl	8007478 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000fea:	f000 fb69 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	4812      	ldr	r0, [pc, #72]	; (8001050 <MX_TIM2_Init+0xdc>)
 8001006:	f005 fb0b 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001010:	f000 fb56 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	2204      	movs	r2, #4
 8001018:	4619      	mov	r1, r3
 800101a:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_TIM2_Init+0xdc>)
 800101c:	f005 fb00 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001026:	f000 fb4b 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	2208      	movs	r2, #8
 800102e:	4619      	mov	r1, r3
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <MX_TIM2_Init+0xdc>)
 8001032:	f005 faf5 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800103c:	f000 fb40 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <MX_TIM2_Init+0xdc>)
 8001042:	f001 f823 	bl	800208c <HAL_TIM_MspPostInit>

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000564 	.word	0x20000564

08001054 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <MX_TIM3_Init+0xc4>)
 800107a:	4a28      	ldr	r2, [pc, #160]	; (800111c <MX_TIM3_Init+0xc8>)
 800107c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <MX_TIM3_Init+0xc4>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <MX_TIM3_Init+0xc4>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <MX_TIM3_Init+0xc4>)
 800108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001090:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_TIM3_Init+0xc4>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_TIM3_Init+0xc4>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800109e:	481e      	ldr	r0, [pc, #120]	; (8001118 <MX_TIM3_Init+0xc4>)
 80010a0:	f005 fa67 	bl	8006572 <HAL_TIM_OC_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80010aa:	f000 fb09 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4816      	ldr	r0, [pc, #88]	; (8001118 <MX_TIM3_Init+0xc4>)
 80010be:	f006 f9db 	bl	8007478 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80010c8:	f000 fafa 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	4619      	mov	r1, r3
 80010e2:	480d      	ldr	r0, [pc, #52]	; (8001118 <MX_TIM3_Init+0xc4>)
 80010e4:	f005 fa9c 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80010ee:	f000 fae7 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	2204      	movs	r2, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM3_Init+0xc4>)
 80010fa:	f005 fa91 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001104:	f000 fadc 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM3_Init+0xc4>)
 800110a:	f000 ffbf 	bl	800208c <HAL_TIM_MspPostInit>

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200005b0 	.word	0x200005b0
 800111c:	40000400 	.word	0x40000400

08001120 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001144:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <MX_TIM5_Init+0xd8>)
 8001146:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <MX_TIM5_Init+0xdc>)
 8001148:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_TIM5_Init+0xd8>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_TIM5_Init+0xd8>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <MX_TIM5_Init+0xd8>)
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_TIM5_Init+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_TIM5_Init+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800116a:	4823      	ldr	r0, [pc, #140]	; (80011f8 <MX_TIM5_Init+0xd8>)
 800116c:	f005 fa01 	bl	8006572 <HAL_TIM_OC_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001176:	f000 faa3 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	481b      	ldr	r0, [pc, #108]	; (80011f8 <MX_TIM5_Init+0xd8>)
 800118a:	f006 f975 	bl	8007478 <HAL_TIMEx_MasterConfigSynchronization>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001194:	f000 fa94 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001198:	2300      	movs	r3, #0
 800119a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4812      	ldr	r0, [pc, #72]	; (80011f8 <MX_TIM5_Init+0xd8>)
 80011b0:	f005 fa36 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80011ba:	f000 fa81 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	2204      	movs	r2, #4
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM5_Init+0xd8>)
 80011c6:	f005 fa2b 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80011d0:	f000 fa76 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	2208      	movs	r2, #8
 80011d8:	4619      	mov	r1, r3
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <MX_TIM5_Init+0xd8>)
 80011dc:	f005 fa20 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 80011e6:	f000 fa6b 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <MX_TIM5_Init+0xd8>)
 80011ec:	f000 ff4e 	bl	800208c <HAL_TIM_MspPostInit>

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200005fc 	.word	0x200005fc
 80011fc:	40000c00 	.word	0x40000c00

08001200 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0a4      	sub	sp, #144	; 0x90
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001214:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001230:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]
 800124e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2234      	movs	r2, #52	; 0x34
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f007 fc9c 	bl	8008b94 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800125c:	4b63      	ldr	r3, [pc, #396]	; (80013ec <MX_TIM8_Init+0x1ec>)
 800125e:	4a64      	ldr	r2, [pc, #400]	; (80013f0 <MX_TIM8_Init+0x1f0>)
 8001260:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <MX_TIM8_Init+0x1ec>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b60      	ldr	r3, [pc, #384]	; (80013ec <MX_TIM8_Init+0x1ec>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <MX_TIM8_Init+0x1ec>)
 8001270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001274:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <MX_TIM8_Init+0x1ec>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800127c:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <MX_TIM8_Init+0x1ec>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b5a      	ldr	r3, [pc, #360]	; (80013ec <MX_TIM8_Init+0x1ec>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001288:	4858      	ldr	r0, [pc, #352]	; (80013ec <MX_TIM8_Init+0x1ec>)
 800128a:	f005 f91b 	bl	80064c4 <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001294:	f000 fa14 	bl	80016c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012a4:	4619      	mov	r1, r3
 80012a6:	4851      	ldr	r0, [pc, #324]	; (80013ec <MX_TIM8_Init+0x1ec>)
 80012a8:	f005 fa34 	bl	8006714 <HAL_TIM_ConfigClockSource>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80012b2:	f000 fa05 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80012b6:	484d      	ldr	r0, [pc, #308]	; (80013ec <MX_TIM8_Init+0x1ec>)
 80012b8:	f005 f95b 	bl	8006572 <HAL_TIM_OC_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80012c2:	f000 f9fd 	bl	80016c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80012c6:	2306      	movs	r3, #6
 80012c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80012ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012d2:	4619      	mov	r1, r3
 80012d4:	4845      	ldr	r0, [pc, #276]	; (80013ec <MX_TIM8_Init+0x1ec>)
 80012d6:	f005 fb33 	bl	8006940 <HAL_TIM_SlaveConfigSynchro>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 80012e0:	f000 f9ee 	bl	80016c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012e8:	2300      	movs	r3, #0
 80012ea:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012f4:	4619      	mov	r1, r3
 80012f6:	483d      	ldr	r0, [pc, #244]	; (80013ec <MX_TIM8_Init+0x1ec>)
 80012f8:	f006 f8be 	bl	8007478 <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8001302:	f000 f9dd 	bl	80016c0 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001306:	2301      	movs	r3, #1
 8001308:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800130a:	2301      	movs	r3, #1
 800130c:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800130e:	2300      	movs	r3, #0
 8001310:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001312:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001316:	461a      	mov	r2, r3
 8001318:	2101      	movs	r1, #1
 800131a:	4834      	ldr	r0, [pc, #208]	; (80013ec <MX_TIM8_Init+0x1ec>)
 800131c:	f006 f9d6 	bl	80076cc <HAL_TIMEx_ConfigBreakInput>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001326:	f000 f9cb 	bl	80016c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800132a:	2300      	movs	r3, #0
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001332:	2300      	movs	r3, #0
 8001334:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001346:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800134a:	2200      	movs	r2, #0
 800134c:	4619      	mov	r1, r3
 800134e:	4827      	ldr	r0, [pc, #156]	; (80013ec <MX_TIM8_Init+0x1ec>)
 8001350:	f005 f966 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM8_Init+0x15e>
  {
    Error_Handler();
 800135a:	f000 f9b1 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800135e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001362:	2204      	movs	r2, #4
 8001364:	4619      	mov	r1, r3
 8001366:	4821      	ldr	r0, [pc, #132]	; (80013ec <MX_TIM8_Init+0x1ec>)
 8001368:	f005 f95a 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM8_Init+0x176>
  {
    Error_Handler();
 8001372:	f000 f9a5 	bl	80016c0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001376:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800137a:	2208      	movs	r2, #8
 800137c:	4619      	mov	r1, r3
 800137e:	481b      	ldr	r0, [pc, #108]	; (80013ec <MX_TIM8_Init+0x1ec>)
 8001380:	f005 f94e 	bl	8006620 <HAL_TIM_OC_ConfigChannel>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 800138a:	f000 f999 	bl	80016c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_TIM8_Init+0x1ec>)
 80013ce:	f006 f8e9 	bl	80075a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM8_Init+0x1dc>
  {
    Error_Handler();
 80013d8:	f000 f972 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <MX_TIM8_Init+0x1ec>)
 80013de:	f000 fe55 	bl	800208c <HAL_TIM_MspPostInit>

}
 80013e2:	bf00      	nop
 80013e4:	3790      	adds	r7, #144	; 0x90
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000648 	.word	0x20000648
 80013f0:	40013400 	.word	0x40013400

080013f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_USART1_UART_Init+0x94>)
 80013fa:	4a24      	ldr	r2, [pc, #144]	; (800148c <MX_USART1_UART_Init+0x98>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800140c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800140e:	4b1e      	ldr	r3, [pc, #120]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800141a:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_USART1_UART_Init+0x94>)
 800141c:	220c      	movs	r2, #12
 800141e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_USART1_UART_Init+0x94>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_USART1_UART_Init+0x94>)
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800143e:	4812      	ldr	r0, [pc, #72]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001440:	f006 fa66 	bl	8007910 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800144a:	f000 f939 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144e:	2100      	movs	r1, #0
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001452:	f007 f801 	bl	8008458 <HAL_UARTEx_SetTxFifoThreshold>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800145c:	f000 f930 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001460:	2100      	movs	r1, #0
 8001462:	4809      	ldr	r0, [pc, #36]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001464:	f007 f836 	bl	80084d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800146e:	f000 f927 	bl	80016c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USART1_UART_Init+0x94>)
 8001474:	f006 ffb7 	bl	80083e6 <HAL_UARTEx_DisableFifoMode>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800147e:	f000 f91f 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000694 	.word	0x20000694
 800148c:	40013800 	.word	0x40013800

08001490 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USB_PCD_Init+0x48>)
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <MX_USB_PCD_Init+0x4c>)
 8001498:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_USB_PCD_Init+0x48>)
 800149c:	2208      	movs	r2, #8
 800149e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <MX_USB_PCD_Init+0x48>)
 80014a2:	2202      	movs	r2, #2
 80014a4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USB_PCD_Init+0x48>)
 80014a8:	2202      	movs	r2, #2
 80014aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_USB_PCD_Init+0x48>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USB_PCD_Init+0x48>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <MX_USB_PCD_Init+0x48>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USB_PCD_Init+0x48>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_USB_PCD_Init+0x48>)
 80014c6:	f003 fd2f 	bl	8004f28 <HAL_PCD_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80014d0:	f000 f8f6 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000728 	.word	0x20000728
 80014dc:	40005c00 	.word	0x40005c00

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014f6:	4b6c      	ldr	r3, [pc, #432]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 80014f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fa:	4a6b      	ldr	r2, [pc, #428]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 80014fc:	f043 0310 	orr.w	r3, r3, #16
 8001500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001502:	4b69      	ldr	r3, [pc, #420]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b66      	ldr	r3, [pc, #408]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a65      	ldr	r2, [pc, #404]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b63      	ldr	r3, [pc, #396]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a59      	ldr	r2, [pc, #356]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b54      	ldr	r3, [pc, #336]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	4a53      	ldr	r2, [pc, #332]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001562:	4b51      	ldr	r3, [pc, #324]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b4e      	ldr	r3, [pc, #312]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800157a:	4b4b      	ldr	r3, [pc, #300]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001586:	4b48      	ldr	r3, [pc, #288]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a47      	ldr	r2, [pc, #284]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 800158c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b45      	ldr	r3, [pc, #276]	; (80016a8 <MX_GPIO_Init+0x1c8>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CN2_ICL_Shutout_Pin|CN2_Dissipative_Brake_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2130      	movs	r1, #48	; 0x30
 80015a2:	4842      	ldr	r0, [pc, #264]	; (80016ac <MX_GPIO_Init+0x1cc>)
 80015a4:	f002 fec6 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CN4_Dissipative_Brake_Pin|LED3_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80015ae:	4840      	ldr	r0, [pc, #256]	; (80016b0 <MX_GPIO_Init+0x1d0>)
 80015b0:	f002 fec0 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CN4_ICL_Shutout_GPIO_Port, CN4_ICL_Shutout_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015ba:	483e      	ldr	r0, [pc, #248]	; (80016b4 <MX_GPIO_Init+0x1d4>)
 80015bc:	f002 feba 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c6:	483c      	ldr	r0, [pc, #240]	; (80016b8 <MX_GPIO_Init+0x1d8>)
 80015c8:	f002 feb4 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d2:	483a      	ldr	r0, [pc, #232]	; (80016bc <MX_GPIO_Init+0x1dc>)
 80015d4:	f002 feae 	bl	8004334 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN2_ICL_Shutout_Pin CN2_Dissipative_Brake_Pin */
  GPIO_InitStruct.Pin = CN2_ICL_Shutout_Pin|CN2_Dissipative_Brake_Pin;
 80015d8:	2330      	movs	r3, #48	; 0x30
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	482f      	ldr	r0, [pc, #188]	; (80016ac <MX_GPIO_Init+0x1cc>)
 80015f0:	f002 fd1e 	bl	8004030 <HAL_GPIO_Init>

  /*Configure GPIO pin : TAMPER_KEY_Pin */
  GPIO_InitStruct.Pin = TAMPER_KEY_Pin;
 80015f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TAMPER_KEY_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	482b      	ldr	r0, [pc, #172]	; (80016b8 <MX_GPIO_Init+0x1d8>)
 800160a:	f002 fd11 	bl	8004030 <HAL_GPIO_Init>

  /*Configure GPIO pins : CN4_Dissipative_Brake_Pin LED3_Pin */
  GPIO_InitStruct.Pin = CN4_Dissipative_Brake_Pin|LED3_Pin;
 800160e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	4619      	mov	r1, r3
 8001626:	4822      	ldr	r0, [pc, #136]	; (80016b0 <MX_GPIO_Init+0x1d0>)
 8001628:	f002 fd02 	bl	8004030 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC45_IN12_Pin ADC45_IN13_Pin ADC345_IN7_Pin ADC345_IN9_Pin
                           ADC345_IN10_Pin */
  GPIO_InitStruct.Pin = ADC45_IN12_Pin|ADC45_IN13_Pin|ADC345_IN7_Pin|ADC345_IN9_Pin
 800162c:	f44f 535c 	mov.w	r3, #14080	; 0x3700
 8001630:	61fb      	str	r3, [r7, #28]
                          |ADC345_IN10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	481c      	ldr	r0, [pc, #112]	; (80016b4 <MX_GPIO_Init+0x1d4>)
 8001642:	f002 fcf5 	bl	8004030 <HAL_GPIO_Init>

  /*Configure GPIO pin : CN4_ICL_Shutout_Pin */
  GPIO_InitStruct.Pin = CN4_ICL_Shutout_Pin;
 8001646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CN4_ICL_Shutout_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4815      	ldr	r0, [pc, #84]	; (80016b4 <MX_GPIO_Init+0x1d4>)
 8001660:	f002 fce6 	bl	8004030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	480e      	ldr	r0, [pc, #56]	; (80016b8 <MX_GPIO_Init+0x1d8>)
 800167e:	f002 fcd7 	bl	8004030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001682:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <MX_GPIO_Init+0x1dc>)
 800169c:	f002 fcc8 	bl	8004030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a0:	bf00      	nop
 80016a2:	3730      	adds	r7, #48	; 0x30
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48001000 	.word	0x48001000
 80016b0:	48001400 	.word	0x48001400
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	48000800 	.word	0x48000800
 80016bc:	48001800 	.word	0x48001800

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x44>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x44>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6613      	str	r3, [r2, #96]	; 0x60
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x44>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x44>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x44>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x44>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0a6      	sub	sp, #152	; 0x98
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001730:	2254      	movs	r2, #84	; 0x54
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f007 fa2d 	bl	8008b94 <memset>
  if(hadc->Instance==ADC1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001742:	d140      	bne.n	80017c6 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001748:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800174a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800174e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001754:	4618      	mov	r0, r3
 8001756:	f004 fab1 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001760:	f7ff ffae 	bl	80016c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001764:	4b9f      	ldr	r3, [pc, #636]	; (80019e4 <HAL_ADC_MspInit+0x2d0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	4a9e      	ldr	r2, [pc, #632]	; (80019e4 <HAL_ADC_MspInit+0x2d0>)
 800176c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800176e:	4b9d      	ldr	r3, [pc, #628]	; (80019e4 <HAL_ADC_MspInit+0x2d0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10b      	bne.n	800178e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001776:	4b9c      	ldr	r3, [pc, #624]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177a:	4a9b      	ldr	r2, [pc, #620]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 800177c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001782:	4b99      	ldr	r3, [pc, #612]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b96      	ldr	r3, [pc, #600]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001792:	4a95      	ldr	r2, [pc, #596]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800179a:	4b93      	ldr	r3, [pc, #588]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC12_IN6_Pin|ADC12_IN7_Pin|ADC12_IN8_Pin|ADC12_IN9_Pin;
 80017a6:	230f      	movs	r3, #15
 80017a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ac:	2303      	movs	r3, #3
 80017ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017bc:	4619      	mov	r1, r3
 80017be:	488b      	ldr	r0, [pc, #556]	; (80019ec <HAL_ADC_MspInit+0x2d8>)
 80017c0:	f002 fc36 	bl	8004030 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80017c4:	e109      	b.n	80019da <HAL_ADC_MspInit+0x2c6>
  else if(hadc->Instance==ADC2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a89      	ldr	r2, [pc, #548]	; (80019f0 <HAL_ADC_MspInit+0x2dc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d140      	bne.n	8001852 <HAL_ADC_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80017d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017da:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 fa6b 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_ADC_MspInit+0xdc>
      Error_Handler();
 80017ec:	f7ff ff68 	bl	80016c0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <HAL_ADC_MspInit+0x2d0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	4a7b      	ldr	r2, [pc, #492]	; (80019e4 <HAL_ADC_MspInit+0x2d0>)
 80017f8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017fa:	4b7a      	ldr	r3, [pc, #488]	; (80019e4 <HAL_ADC_MspInit+0x2d0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d10b      	bne.n	800181a <HAL_ADC_MspInit+0x106>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001802:	4b79      	ldr	r3, [pc, #484]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a78      	ldr	r2, [pc, #480]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001808:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b76      	ldr	r3, [pc, #472]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181a:	4b73      	ldr	r3, [pc, #460]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a72      	ldr	r2, [pc, #456]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b70      	ldr	r3, [pc, #448]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = ADC12_IN6_Pin|ADC12_IN7_Pin|ADC12_IN8_Pin|ADC12_IN9_Pin
 8001832:	231f      	movs	r3, #31
 8001834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001838:	2303      	movs	r3, #3
 800183a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001844:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001848:	4619      	mov	r1, r3
 800184a:	4868      	ldr	r0, [pc, #416]	; (80019ec <HAL_ADC_MspInit+0x2d8>)
 800184c:	f002 fbf0 	bl	8004030 <HAL_GPIO_Init>
}
 8001850:	e0c3      	b.n	80019da <HAL_ADC_MspInit+0x2c6>
  else if(hadc->Instance==ADC3)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a67      	ldr	r2, [pc, #412]	; (80019f4 <HAL_ADC_MspInit+0x2e0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d15c      	bne.n	8001916 <HAL_ADC_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800185c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001862:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001866:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001868:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800186c:	4618      	mov	r0, r3
 800186e:	f004 fa25 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_ADC_MspInit+0x168>
      Error_Handler();
 8001878:	f7ff ff22 	bl	80016c0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800187c:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_ADC_MspInit+0x2e4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	4a5d      	ldr	r2, [pc, #372]	; (80019f8 <HAL_ADC_MspInit+0x2e4>)
 8001884:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001886:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <HAL_ADC_MspInit+0x2e4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10b      	bne.n	80018a6 <HAL_ADC_MspInit+0x192>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800188e:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a55      	ldr	r2, [pc, #340]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a6:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a4f      	ldr	r2, [pc, #316]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 80018ac:	f043 0310 	orr.w	r3, r3, #16
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018be:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a49      	ldr	r2, [pc, #292]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 80018c4:	f043 0308 	orr.w	r3, r3, #8
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ADC3_IN4_Pin;
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018dc:	2303      	movs	r3, #3
 80018de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(ADC3_IN4_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018ec:	4619      	mov	r1, r3
 80018ee:	4843      	ldr	r0, [pc, #268]	; (80019fc <HAL_ADC_MspInit+0x2e8>)
 80018f0:	f002 fb9e 	bl	8004030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC345_IN7_Pin|ADC345_IN9_Pin|ADC345_IN10_Pin;
 80018f4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80018f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fc:	2303      	movs	r3, #3
 80018fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001908:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800190c:	4619      	mov	r1, r3
 800190e:	483c      	ldr	r0, [pc, #240]	; (8001a00 <HAL_ADC_MspInit+0x2ec>)
 8001910:	f002 fb8e 	bl	8004030 <HAL_GPIO_Init>
}
 8001914:	e061      	b.n	80019da <HAL_ADC_MspInit+0x2c6>
  else if(hadc->Instance==ADC4)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a3a      	ldr	r2, [pc, #232]	; (8001a04 <HAL_ADC_MspInit+0x2f0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d15c      	bne.n	80019da <HAL_ADC_MspInit+0x2c6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001926:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800192a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001930:	4618      	mov	r0, r3
 8001932:	f004 f9c3 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_ADC_MspInit+0x22c>
      Error_Handler();
 800193c:	f7ff fec0 	bl	80016c0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_ADC_MspInit+0x2e4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	4a2c      	ldr	r2, [pc, #176]	; (80019f8 <HAL_ADC_MspInit+0x2e4>)
 8001948:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_ADC_MspInit+0x2e4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10b      	bne.n	800196a <HAL_ADC_MspInit+0x256>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001952:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196e:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001970:	f043 0310 	orr.w	r3, r3, #16
 8001974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_ADC_MspInit+0x2d4>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC4_IN1_Pin;
 800199a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800199e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a2:	2303      	movs	r3, #3
 80019a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(ADC4_IN1_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019b2:	4619      	mov	r1, r3
 80019b4:	4811      	ldr	r0, [pc, #68]	; (80019fc <HAL_ADC_MspInit+0x2e8>)
 80019b6:	f002 fb3b 	bl	8004030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC45_IN12_Pin|ADC45_IN13_Pin|ADC345_IN7_Pin|ADC345_IN9_Pin
 80019ba:	f44f 535c 	mov.w	r3, #14080	; 0x3700
 80019be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019c2:	2303      	movs	r3, #3
 80019c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ce:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019d2:	4619      	mov	r1, r3
 80019d4:	480a      	ldr	r0, [pc, #40]	; (8001a00 <HAL_ADC_MspInit+0x2ec>)
 80019d6:	f002 fb2b 	bl	8004030 <HAL_GPIO_Init>
}
 80019da:	bf00      	nop
 80019dc:	3798      	adds	r7, #152	; 0x98
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000a28 	.word	0x20000a28
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000800 	.word	0x48000800
 80019f0:	50000100 	.word	0x50000100
 80019f4:	50000400 	.word	0x50000400
 80019f8:	20000a2c 	.word	0x20000a2c
 80019fc:	48001000 	.word	0x48001000
 8001a00:	48000c00 	.word	0x48000c00
 8001a04:	50000500 	.word	0x50000500

08001a08 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <HAL_DAC_MspInit+0x74>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d124      	bne.n	8001a74 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_DAC_MspInit+0x78>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_DAC_MspInit+0x78>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_DAC_MspInit+0x78>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_DAC_MspInit+0x78>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <HAL_DAC_MspInit+0x78>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <HAL_DAC_MspInit+0x78>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a5a:	2330      	movs	r3, #48	; 0x30
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f002 fade 	bl	8004030 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	50000800 	.word	0x50000800
 8001a80:	40021000 	.word	0x40021000

08001a84 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b09e      	sub	sp, #120	; 0x78
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	2254      	movs	r2, #84	; 0x54
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f007 f875 	bl	8008b94 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <HAL_FDCAN_MspInit+0xac>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d138      	bne.n	8001b26 <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001abe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 f8f9 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001ad0:	f7ff fdf6 	bl	80016c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_FDCAN_MspInit+0xb0>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <HAL_FDCAN_MspInit+0xb0>)
 8001ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ade:	6593      	str	r3, [r2, #88]	; 0x58
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_FDCAN_MspInit+0xb0>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_FDCAN_MspInit+0xb0>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_FDCAN_MspInit+0xb0>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_FDCAN_MspInit+0xb0>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = BOOT0_FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001b04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b08:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001b16:	2309      	movs	r3, #9
 8001b18:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_FDCAN_MspInit+0xb4>)
 8001b22:	f002 fa85 	bl	8004030 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3778      	adds	r7, #120	; 0x78
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40006400 	.word	0x40006400
 8001b34:	40021000 	.word	0x40021000
 8001b38:	48000400 	.word	0x48000400

08001b3c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_HRTIM_MspInit+0x38>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10b      	bne.n	8001b66 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_HRTIM_MspInit+0x3c>)
 8001b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <HAL_HRTIM_MspInit+0x3c>)
 8001b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b58:	6613      	str	r3, [r2, #96]	; 0x60
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_HRTIM_MspInit+0x3c>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40016800 	.word	0x40016800
 8001b78:	40021000 	.word	0x40021000

08001b7c <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b09e      	sub	sp, #120	; 0x78
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	2254      	movs	r2, #84	; 0x54
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f006 fff9 	bl	8008b94 <memset>
  if(hsmbus->Instance==I2C3)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <HAL_SMBUS_MspInit+0xa8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d137      	bne.n	8001c1c <HAL_SMBUS_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 f87e 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8001bc6:	f7ff fd7b 	bl	80016c0 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_SMBUS_MspInit+0xac>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <HAL_SMBUS_MspInit+0xac>)
 8001bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_SMBUS_MspInit+0xac>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PG6     ------> I2C3_SMBA
    PG7     ------> I2C3_SCL
    PG8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = I2C3_SMBA_Pin|I2C3_SCL_Pin|I2C3_SDA_Pin;
 8001be2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001be6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be8:	2312      	movs	r3, #18
 8001bea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480b      	ldr	r0, [pc, #44]	; (8001c2c <HAL_SMBUS_MspInit+0xb0>)
 8001c00:	f002 fa16 	bl	8004030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_SMBUS_MspInit+0xac>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_SMBUS_MspInit+0xac>)
 8001c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_SMBUS_MspInit+0xac>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3778      	adds	r7, #120	; 0x78
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40007800 	.word	0x40007800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	48001800 	.word	0x48001800

08001c30 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08e      	sub	sp, #56	; 0x38
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a56      	ldr	r2, [pc, #344]	; (8001da8 <HAL_OPAMP_MspInit+0x178>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d119      	bne.n	8001c86 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b56      	ldr	r3, [pc, #344]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	4a55      	ldr	r2, [pc, #340]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	623b      	str	r3, [r7, #32]
 8001c68:	6a3b      	ldr	r3, [r7, #32]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c6a:	230e      	movs	r3, #14
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c80:	f002 f9d6 	bl	8004030 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP4_MspInit 1 */

  /* USER CODE END OPAMP4_MspInit 1 */
  }

}
 8001c84:	e08b      	b.n	8001d9e <HAL_OPAMP_MspInit+0x16e>
  else if(hopamp->Instance==OPAMP2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <HAL_OPAMP_MspInit+0x180>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d14a      	bne.n	8001d26 <HAL_OPAMP_MspInit+0xf6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	4a45      	ldr	r2, [pc, #276]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9c:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca8:	4b40      	ldr	r3, [pc, #256]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	4a3f      	ldr	r2, [pc, #252]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001cae:	f043 0304 	orr.w	r3, r3, #4
 8001cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb4:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	4a39      	ldr	r2, [pc, #228]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001cc6:	f043 0308 	orr.w	r3, r3, #8
 8001cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ccc:	4b37      	ldr	r3, [pc, #220]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd8:	23c0      	movs	r3, #192	; 0xc0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f002 f99f 	bl	8004030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d02:	4619      	mov	r1, r3
 8001d04:	482b      	ldr	r0, [pc, #172]	; (8001db4 <HAL_OPAMP_MspInit+0x184>)
 8001d06:	f002 f993 	bl	8004030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d10:	2303      	movs	r3, #3
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4826      	ldr	r0, [pc, #152]	; (8001db8 <HAL_OPAMP_MspInit+0x188>)
 8001d20:	f002 f986 	bl	8004030 <HAL_GPIO_Init>
}
 8001d24:	e03b      	b.n	8001d9e <HAL_OPAMP_MspInit+0x16e>
  else if(hopamp->Instance==OPAMP3)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a24      	ldr	r2, [pc, #144]	; (8001dbc <HAL_OPAMP_MspInit+0x18c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d118      	bne.n	8001d62 <HAL_OPAMP_MspInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d34:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4819      	ldr	r0, [pc, #100]	; (8001dc0 <HAL_OPAMP_MspInit+0x190>)
 8001d5c:	f002 f968 	bl	8004030 <HAL_GPIO_Init>
}
 8001d60:	e01d      	b.n	8001d9e <HAL_OPAMP_MspInit+0x16e>
  else if(hopamp->Instance==OPAMP4)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_OPAMP_MspInit+0x194>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d118      	bne.n	8001d9e <HAL_OPAMP_MspInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_OPAMP_MspInit+0x17c>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|OPAMP4_VOUT_Pin|GPIO_PIN_13;
 8001d84:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d96:	4619      	mov	r1, r3
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <HAL_OPAMP_MspInit+0x190>)
 8001d9a:	f002 f949 	bl	8004030 <HAL_GPIO_Init>
}
 8001d9e:	bf00      	nop
 8001da0:	3738      	adds	r7, #56	; 0x38
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40010300 	.word	0x40010300
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010304 	.word	0x40010304
 8001db4:	48000800 	.word	0x48000800
 8001db8:	48000c00 	.word	0x48000c00
 8001dbc:	40010308 	.word	0x40010308
 8001dc0:	48000400 	.word	0x48000400
 8001dc4:	4001030c 	.word	0x4001030c

08001dc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_SPI_MspInit+0xb8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d145      	bne.n	8001e76 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_SPI_MspInit+0xbc>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <HAL_SPI_MspInit+0xbc>)
 8001df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df4:	6593      	str	r3, [r2, #88]	; 0x58
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_SPI_MspInit+0xbc>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_SPI_MspInit+0xbc>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a1f      	ldr	r2, [pc, #124]	; (8001e84 <HAL_SPI_MspInit+0xbc>)
 8001e08:	f043 0320 	orr.w	r3, r3, #32
 8001e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_SPI_MspInit+0xbc>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <HAL_SPI_MspInit+0xbc>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <HAL_SPI_MspInit+0xbc>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_SPI_MspInit+0xbc>)
 8001e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF9     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8001e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e44:	2305      	movs	r3, #5
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480e      	ldr	r0, [pc, #56]	; (8001e88 <HAL_SPI_MspInit+0xc0>)
 8001e50:	f002 f8ee 	bl	8004030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001e54:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e66:	2305      	movs	r3, #5
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4806      	ldr	r0, [pc, #24]	; (8001e8c <HAL_SPI_MspInit+0xc4>)
 8001e72:	f002 f8dd 	bl	8004030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40003800 	.word	0x40003800
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48001400 	.word	0x48001400
 8001e8c:	48000400 	.word	0x48000400

08001e90 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08e      	sub	sp, #56	; 0x38
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(htim_oc->Instance==TIM1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	; (8001fec <HAL_TIM_OC_MspInit+0x15c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d129      	bne.n	8001f06 <HAL_TIM_OC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eb2:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb6:	4a4e      	ldr	r2, [pc, #312]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001eb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ebc:	6613      	str	r3, [r2, #96]	; 0x60
 8001ebe:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ec6:	623b      	str	r3, [r7, #32]
 8001ec8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eca:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a48      	ldr	r2, [pc, #288]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001ed0:	f043 0310 	orr.w	r3, r3, #16
 8001ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed6:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = TIM1_BKIN_Pin;
 8001ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee8:	2312      	movs	r3, #18
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM1_BKIN_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	483d      	ldr	r0, [pc, #244]	; (8001ff4 <HAL_TIM_OC_MspInit+0x164>)
 8001f00:	f002 f896 	bl	8004030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f04:	e06d      	b.n	8001fe2 <HAL_TIM_OC_MspInit+0x152>
  else if(htim_oc->Instance==TIM2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0e:	d10c      	bne.n	8001f2a <HAL_TIM_OC_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f10:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	4a36      	ldr	r2, [pc, #216]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1c:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	69bb      	ldr	r3, [r7, #24]
}
 8001f28:	e05b      	b.n	8001fe2 <HAL_TIM_OC_MspInit+0x152>
  else if(htim_oc->Instance==TIM3)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a32      	ldr	r2, [pc, #200]	; (8001ff8 <HAL_TIM_OC_MspInit+0x168>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d128      	bne.n	8001f86 <HAL_TIM_OC_MspInit+0xf6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f34:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	4a2d      	ldr	r2, [pc, #180]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f40:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4c:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f50:	4a27      	ldr	r2, [pc, #156]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f52:	f043 0308 	orr.w	r3, r3, #8
 8001f56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f58:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM3_ETR_Pin;
 8001f64:	2304      	movs	r3, #4
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f74:	2302      	movs	r3, #2
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM3_ETR_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	481f      	ldr	r0, [pc, #124]	; (8001ffc <HAL_TIM_OC_MspInit+0x16c>)
 8001f80:	f002 f856 	bl	8004030 <HAL_GPIO_Init>
}
 8001f84:	e02d      	b.n	8001fe2 <HAL_TIM_OC_MspInit+0x152>
  else if(htim_oc->Instance==TIM5)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_TIM_OC_MspInit+0x170>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d128      	bne.n	8001fe2 <HAL_TIM_OC_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f96:	f043 0308 	orr.w	r3, r3, #8
 8001f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001fae:	f043 0308 	orr.w	r3, r3, #8
 8001fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_TIM_OC_MspInit+0x160>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4807      	ldr	r0, [pc, #28]	; (8001ffc <HAL_TIM_OC_MspInit+0x16c>)
 8001fde:	f002 f827 	bl	8004030 <HAL_GPIO_Init>
}
 8001fe2:	bf00      	nop
 8001fe4:	3738      	adds	r7, #56	; 0x38
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	48001000 	.word	0x48001000
 8001ff8:	40000400 	.word	0x40000400
 8001ffc:	48000c00 	.word	0x48000c00
 8002000:	40000c00 	.word	0x40000c00

08002004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_TIM_Base_MspInit+0x7c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d127      	bne.n	8002076 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_TIM_Base_MspInit+0x80>)
 8002028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202a:	4a16      	ldr	r2, [pc, #88]	; (8002084 <HAL_TIM_Base_MspInit+0x80>)
 800202c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002030:	6613      	str	r3, [r2, #96]	; 0x60
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_TIM_Base_MspInit+0x80>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_TIM_Base_MspInit+0x80>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_TIM_Base_MspInit+0x80>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_TIM_Base_MspInit+0x80>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PB7     ------> TIM8_BKIN
    */
    GPIO_InitStruct.Pin = TIM8_BKIN_Pin;
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205a:	2312      	movs	r3, #18
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8002066:	2305      	movs	r3, #5
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM8_BKIN_GPIO_Port, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <HAL_TIM_Base_MspInit+0x84>)
 8002072:	f001 ffdd 	bl	8004030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002076:	bf00      	nop
 8002078:	3728      	adds	r7, #40	; 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40013400 	.word	0x40013400
 8002084:	40021000 	.word	0x40021000
 8002088:	48000400 	.word	0x48000400

0800208c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08e      	sub	sp, #56	; 0x38
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a65      	ldr	r2, [pc, #404]	; (8002240 <HAL_TIM_MspPostInit+0x1b4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d11d      	bne.n	80020ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ae:	4b65      	ldr	r3, [pc, #404]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	4a64      	ldr	r2, [pc, #400]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ba:	4b62      	ldr	r3, [pc, #392]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 80020bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	6a3b      	ldr	r3, [r7, #32]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin|TIM1_CH2N_Pin|TIM1_CH1E11_Pin
 80020c6:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |TIM1_CH3N_Pin|TIM1_CH3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80020d8:	2302      	movs	r3, #2
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	4619      	mov	r1, r3
 80020e2:	4859      	ldr	r0, [pc, #356]	; (8002248 <HAL_TIM_MspPostInit+0x1bc>)
 80020e4:	f001 ffa4 	bl	8004030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80020e8:	e0a5      	b.n	8002236 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f2:	d139      	bne.n	8002168 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f4:	4b53      	ldr	r3, [pc, #332]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	4a52      	ldr	r2, [pc, #328]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002100:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800210c:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002110:	4a4c      	ldr	r2, [pc, #304]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002118:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH1_Pin;
 8002124:	2301      	movs	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002134:	2301      	movs	r3, #1
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH1_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002142:	f001 ff75 	bl	8004030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH2_Pin|TIM2_CH3_Pin;
 8002146:	2390      	movs	r3, #144	; 0x90
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002156:	2302      	movs	r3, #2
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215e:	4619      	mov	r1, r3
 8002160:	483a      	ldr	r0, [pc, #232]	; (800224c <HAL_TIM_MspPostInit+0x1c0>)
 8002162:	f001 ff65 	bl	8004030 <HAL_GPIO_Init>
}
 8002166:	e066      	b.n	8002236 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM3)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a38      	ldr	r2, [pc, #224]	; (8002250 <HAL_TIM_MspPostInit+0x1c4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d11c      	bne.n	80021ac <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002172:	4b34      	ldr	r3, [pc, #208]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	4a33      	ldr	r2, [pc, #204]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 8002178:	f043 0310 	orr.w	r3, r3, #16
 800217c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM3_CH1_Pin|TIM3_CH2_Pin;
 800218a:	230c      	movs	r3, #12
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800219a:	2302      	movs	r3, #2
 800219c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800219e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a2:	4619      	mov	r1, r3
 80021a4:	4828      	ldr	r0, [pc, #160]	; (8002248 <HAL_TIM_MspPostInit+0x1bc>)
 80021a6:	f001 ff43 	bl	8004030 <HAL_GPIO_Init>
}
 80021aa:	e044      	b.n	8002236 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM5)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_TIM_MspPostInit+0x1c8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d11d      	bne.n	80021f2 <HAL_TIM_MspPostInit+0x166>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021b6:	4b23      	ldr	r3, [pc, #140]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	4a22      	ldr	r2, [pc, #136]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 80021bc:	f043 0320 	orr.w	r3, r3, #32
 80021c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH2_Pin|TIM5_CH2F8_Pin|TIM5_CH1_Pin;
 80021ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 80021e0:	2306      	movs	r3, #6
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	4619      	mov	r1, r3
 80021ea:	481b      	ldr	r0, [pc, #108]	; (8002258 <HAL_TIM_MspPostInit+0x1cc>)
 80021ec:	f001 ff20 	bl	8004030 <HAL_GPIO_Init>
}
 80021f0:	e021      	b.n	8002236 <HAL_TIM_MspPostInit+0x1aa>
  else if(htim->Instance==TIM8)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a19      	ldr	r2, [pc, #100]	; (800225c <HAL_TIM_MspPostInit+0x1d0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d11c      	bne.n	8002236 <HAL_TIM_MspPostInit+0x1aa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <HAL_TIM_MspPostInit+0x1b8>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_Pin|TIM8_CH2_Pin|TIM8_CH3_Pin|TIM8_CH1N_Pin
 8002214:	f44f 53ee 	mov.w	r3, #7616	; 0x1dc0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	2300      	movs	r3, #0
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002226:	2304      	movs	r3, #4
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222e:	4619      	mov	r1, r3
 8002230:	480b      	ldr	r0, [pc, #44]	; (8002260 <HAL_TIM_MspPostInit+0x1d4>)
 8002232:	f001 fefd 	bl	8004030 <HAL_GPIO_Init>
}
 8002236:	bf00      	nop
 8002238:	3738      	adds	r7, #56	; 0x38
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40012c00 	.word	0x40012c00
 8002244:	40021000 	.word	0x40021000
 8002248:	48001000 	.word	0x48001000
 800224c:	48000c00 	.word	0x48000c00
 8002250:	40000400 	.word	0x40000400
 8002254:	40000c00 	.word	0x40000c00
 8002258:	48001400 	.word	0x48001400
 800225c:	40013400 	.word	0x40013400
 8002260:	48000800 	.word	0x48000800

08002264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b09e      	sub	sp, #120	; 0x78
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	2254      	movs	r2, #84	; 0x54
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f006 fc85 	bl	8008b94 <memset>
  if(huart->Instance==USART1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_UART_MspInit+0xa8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d137      	bne.n	8002304 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002294:	2301      	movs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 fd0b 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022ac:	f7ff fa08 	bl	80016c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <HAL_UART_MspInit+0xac>)
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	4a16      	ldr	r2, [pc, #88]	; (8002310 <HAL_UART_MspInit+0xac>)
 80022b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ba:	6613      	str	r3, [r2, #96]	; 0x60
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_UART_MspInit+0xac>)
 80022be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <HAL_UART_MspInit+0xac>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022cc:	4a10      	ldr	r2, [pc, #64]	; (8002310 <HAL_UART_MspInit+0xac>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_UART_MspInit+0xac>)
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80022e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022e4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e6:	2302      	movs	r3, #2
 80022e8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ee:	2300      	movs	r3, #0
 80022f0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f2:	2307      	movs	r3, #7
 80022f4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002300:	f001 fe96 	bl	8004030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002304:	bf00      	nop
 8002306:	3778      	adds	r7, #120	; 0x78
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40013800 	.word	0x40013800
 8002310:	40021000 	.word	0x40021000

08002314 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b098      	sub	sp, #96	; 0x60
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	2254      	movs	r2, #84	; 0x54
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f006 fc35 	bl	8008b94 <memset>
  if(hpcd->Instance==USB)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a11      	ldr	r2, [pc, #68]	; (8002374 <HAL_PCD_MspInit+0x60>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d11a      	bne.n	800236a <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002338:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800233a:	2300      	movs	r3, #0
 800233c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	4618      	mov	r0, r3
 8002344:	f003 fcba 	bl	8005cbc <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800234e:	f7ff f9b7 	bl	80016c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <HAL_PCD_MspInit+0x64>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	4a08      	ldr	r2, [pc, #32]	; (8002378 <HAL_PCD_MspInit+0x64>)
 8002358:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800235c:	6593      	str	r3, [r2, #88]	; 0x58
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_PCD_MspInit+0x64>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800236a:	bf00      	nop
 800236c:	3760      	adds	r7, #96	; 0x60
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40005c00 	.word	0x40005c00
 8002378:	40021000 	.word	0x40021000

0800237c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002380:	e7fe      	b.n	8002380 <NMI_Handler+0x4>

08002382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002386:	e7fe      	b.n	8002386 <HardFault_Handler+0x4>

08002388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800238c:	e7fe      	b.n	800238c <MemManage_Handler+0x4>

0800238e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002392:	e7fe      	b.n	8002392 <BusFault_Handler+0x4>

08002394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <UsageFault_Handler+0x4>

0800239a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c8:	f000 f890 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023f4:	480d      	ldr	r0, [pc, #52]	; (800242c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023f8:	f7ff ffea 	bl	80023d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023fc:	480c      	ldr	r0, [pc, #48]	; (8002430 <LoopForever+0x6>)
  ldr r1, =_edata
 80023fe:	490d      	ldr	r1, [pc, #52]	; (8002434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <LoopForever+0xe>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002414:	4c0a      	ldr	r4, [pc, #40]	; (8002440 <LoopForever+0x16>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002422:	f006 fbbf 	bl	8008ba4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002426:	f7fe f875 	bl	8000514 <main>

0800242a <LoopForever>:

LoopForever:
    b LoopForever
 800242a:	e7fe      	b.n	800242a <LoopForever>
  ldr   r0, =_estack
 800242c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002438:	08008c54 	.word	0x08008c54
  ldr r2, =_sbss
 800243c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8002440:	20000a34 	.word	0x20000a34

08002444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC1_2_IRQHandler>

08002446 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002450:	2003      	movs	r0, #3
 8002452:	f001 fa1b 	bl	800388c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002456:	2000      	movs	r0, #0
 8002458:	f000 f80e 	bl	8002478 <HAL_InitTick>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	71fb      	strb	r3, [r7, #7]
 8002466:	e001      	b.n	800246c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002468:	f7ff f930 	bl	80016cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800246c:	79fb      	ldrb	r3, [r7, #7]

}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_InitTick+0x68>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d022      	beq.n	80024d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800248c:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_InitTick+0x6c>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <HAL_InitTick+0x68>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002498:	fbb1 f3f3 	udiv	r3, r1, r3
 800249c:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 fa18 	bl	80038d6 <HAL_SYSTICK_Config>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10f      	bne.n	80024cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	d809      	bhi.n	80024c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b2:	2200      	movs	r2, #0
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ba:	f001 f9f2 	bl	80038a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024be:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_InitTick+0x70>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	e007      	b.n	80024d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e004      	b.n	80024d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e001      	b.n	80024d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000030 	.word	0x20000030
 80024e4:	20000028 	.word	0x20000028
 80024e8:	2000002c 	.word	0x2000002c

080024ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_IncTick+0x1c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_IncTick+0x20>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a03      	ldr	r2, [pc, #12]	; (8002508 <HAL_IncTick+0x1c>)
 80024fc:	6013      	str	r3, [r2, #0]
}
 80024fe:	bf00      	nop
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	20000a30 	.word	0x20000a30
 800250c:	20000030 	.word	0x20000030

08002510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_GetTick+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000a30 	.word	0x20000a30

08002528 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	609a      	str	r2, [r3, #8]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3360      	adds	r3, #96	; 0x60
 80025a2:	461a      	mov	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <LL_ADC_SetOffset+0x44>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	4313      	orrs	r3, r2
 80025c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025c8:	bf00      	nop
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	03fff000 	.word	0x03fff000

080025d8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3360      	adds	r3, #96	; 0x60
 80025e6:	461a      	mov	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3360      	adds	r3, #96	; 0x60
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	431a      	orrs	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800262e:	bf00      	nop
 8002630:	371c      	adds	r7, #28
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800263a:	b480      	push	{r7}
 800263c:	b087      	sub	sp, #28
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3360      	adds	r3, #96	; 0x60
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	431a      	orrs	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002664:	bf00      	nop
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	3360      	adds	r3, #96	; 0x60
 8002680:	461a      	mov	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	431a      	orrs	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	615a      	str	r2, [r3, #20]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3330      	adds	r3, #48	; 0x30
 80026dc:	461a      	mov	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	4413      	add	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	211f      	movs	r1, #31
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	f003 011f 	and.w	r1, r3, #31
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	431a      	orrs	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002718:	bf00      	nop
 800271a:	371c      	adds	r7, #28
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3314      	adds	r3, #20
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	0e5b      	lsrs	r3, r3, #25
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	4413      	add	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	0d1b      	lsrs	r3, r3, #20
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2107      	movs	r1, #7
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	401a      	ands	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	0d1b      	lsrs	r3, r3, #20
 800275e:	f003 031f 	and.w	r3, r3, #31
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	431a      	orrs	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002794:	43db      	mvns	r3, r3
 8002796:	401a      	ands	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0318 	and.w	r3, r3, #24
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80027a0:	40d9      	lsrs	r1, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	400b      	ands	r3, r1
 80027a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027aa:	431a      	orrs	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	0007ffff 	.word	0x0007ffff

080027c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80027d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6093      	str	r3, [r2, #8]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027fc:	d101      	bne.n	8002802 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002820:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002824:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800284c:	d101      	bne.n	8002852 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <LL_ADC_IsEnabled+0x18>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <LL_ADC_IsEnabled+0x1a>
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b04      	cmp	r3, #4
 8002898:	d101      	bne.n	800289e <LL_ADC_REG_IsConversionOngoing+0x18>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d101      	bne.n	80028c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e1a9      	b.n	8002c42 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7fe ff09 	bl	8001714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff67 	bl	80027e8 <LL_ADC_IsDeepPowerDownEnabled>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d004      	beq.n	800292a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff4d 	bl	80027c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff ff82 	bl	8002838 <LL_ADC_IsInternalRegulatorEnabled>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d115      	bne.n	8002966 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff66 	bl	8002810 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002944:	4b9c      	ldr	r3, [pc, #624]	; (8002bb8 <HAL_ADC_Init+0x2e4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	4a9c      	ldr	r2, [pc, #624]	; (8002bbc <HAL_ADC_Init+0x2e8>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	3301      	adds	r3, #1
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002958:	e002      	b.n	8002960 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3b01      	subs	r3, #1
 800295e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f9      	bne.n	800295a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff64 	bl	8002838 <LL_ADC_IsInternalRegulatorEnabled>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	f043 0210 	orr.w	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff75 	bl	8002886 <LL_ADC_REG_IsConversionOngoing>
 800299c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 8142 	bne.w	8002c30 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f040 813e 	bne.w	8002c30 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029bc:	f043 0202 	orr.w	r2, r3, #2
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff49 	bl	8002860 <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d141      	bne.n	8002a58 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029dc:	d004      	beq.n	80029e8 <HAL_ADC_Init+0x114>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a77      	ldr	r2, [pc, #476]	; (8002bc0 <HAL_ADC_Init+0x2ec>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10f      	bne.n	8002a08 <HAL_ADC_Init+0x134>
 80029e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80029ec:	f7ff ff38 	bl	8002860 <LL_ADC_IsEnabled>
 80029f0:	4604      	mov	r4, r0
 80029f2:	4873      	ldr	r0, [pc, #460]	; (8002bc0 <HAL_ADC_Init+0x2ec>)
 80029f4:	f7ff ff34 	bl	8002860 <LL_ADC_IsEnabled>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4323      	orrs	r3, r4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	e012      	b.n	8002a2e <HAL_ADC_Init+0x15a>
 8002a08:	486e      	ldr	r0, [pc, #440]	; (8002bc4 <HAL_ADC_Init+0x2f0>)
 8002a0a:	f7ff ff29 	bl	8002860 <LL_ADC_IsEnabled>
 8002a0e:	4604      	mov	r4, r0
 8002a10:	486d      	ldr	r0, [pc, #436]	; (8002bc8 <HAL_ADC_Init+0x2f4>)
 8002a12:	f7ff ff25 	bl	8002860 <LL_ADC_IsEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	431c      	orrs	r4, r3
 8002a1a:	486c      	ldr	r0, [pc, #432]	; (8002bcc <HAL_ADC_Init+0x2f8>)
 8002a1c:	f7ff ff20 	bl	8002860 <LL_ADC_IsEnabled>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4323      	orrs	r3, r4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d012      	beq.n	8002a58 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a3a:	d004      	beq.n	8002a46 <HAL_ADC_Init+0x172>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a5f      	ldr	r2, [pc, #380]	; (8002bc0 <HAL_ADC_Init+0x2ec>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_Init+0x176>
 8002a46:	4a62      	ldr	r2, [pc, #392]	; (8002bd0 <HAL_ADC_Init+0x2fc>)
 8002a48:	e000      	b.n	8002a4c <HAL_ADC_Init+0x178>
 8002a4a:	4a62      	ldr	r2, [pc, #392]	; (8002bd4 <HAL_ADC_Init+0x300>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f7ff fd68 	bl	8002528 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	7f5b      	ldrb	r3, [r3, #29]
 8002a5c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a62:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a68:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a6e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a76:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d106      	bne.n	8002a94 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	045b      	lsls	r3, r3, #17
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	4b48      	ldr	r3, [pc, #288]	; (8002bd8 <HAL_ADC_Init+0x304>)
 8002ab8:	4013      	ands	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	69b9      	ldr	r1, [r7, #24]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fee4 	bl	80028ac <LL_ADC_INJ_IsConversionOngoing>
 8002ae4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d17f      	bne.n	8002bec <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d17c      	bne.n	8002bec <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002af6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002afe:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b0e:	f023 0302 	bic.w	r3, r3, #2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	69b9      	ldr	r1, [r7, #24]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6911      	ldr	r1, [r2, #16]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6812      	ldr	r2, [r2, #0]
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002b52:	e013      	b.n	8002b7c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d12a      	bne.n	8002bdc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	e019      	b.n	8002bec <HAL_ADC_Init+0x318>
 8002bb8:	20000028 	.word	0x20000028
 8002bbc:	053e2d63 	.word	0x053e2d63
 8002bc0:	50000100 	.word	0x50000100
 8002bc4:	50000400 	.word	0x50000400
 8002bc8:	50000500 	.word	0x50000500
 8002bcc:	50000600 	.word	0x50000600
 8002bd0:	50000300 	.word	0x50000300
 8002bd4:	50000700 	.word	0x50000700
 8002bd8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d10c      	bne.n	8002c0e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f023 010f 	bic.w	r1, r3, #15
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	1e5a      	subs	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c0c:	e007      	b.n	8002c1e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 020f 	bic.w	r2, r2, #15
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	f043 0201 	orr.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c2e:	e007      	b.n	8002c40 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	f043 0210 	orr.w	r2, r3, #16
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c40:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3724      	adds	r7, #36	; 0x24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	bf00      	nop

08002c4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b0b6      	sub	sp, #216	; 0xd8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d102      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x24>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	f000 bc13 	b.w	8003496 <HAL_ADC_ConfigChannel+0x84a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fe02 	bl	8002886 <LL_ADC_REG_IsConversionOngoing>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f040 83f3 	bne.w	8003470 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f7ff fd18 	bl	80026cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fdf0 	bl	8002886 <LL_ADC_REG_IsConversionOngoing>
 8002ca6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fdfc 	bl	80028ac <LL_ADC_INJ_IsConversionOngoing>
 8002cb4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 81d9 	bne.w	8003074 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 81d4 	bne.w	8003074 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd4:	d10f      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7ff fd1f 	bl	8002724 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fcd9 	bl	80026a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002cf4:	e00e      	b.n	8002d14 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6819      	ldr	r1, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f7ff fd0e 	bl	8002724 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fcc9 	bl	80026a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	695a      	ldr	r2, [r3, #20]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	08db      	lsrs	r3, r3, #3
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d022      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6919      	ldr	r1, [r3, #16]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d46:	f7ff fc23 	bl	8002590 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6919      	ldr	r1, [r3, #16]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7ff fc6f 	bl	800263a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x126>
 8002d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d70:	e000      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x128>
 8002d72:	2300      	movs	r3, #0
 8002d74:	461a      	mov	r2, r3
 8002d76:	f7ff fc7b 	bl	8002670 <LL_ADC_SetOffsetSaturation>
 8002d7a:	e17b      	b.n	8003074 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2100      	movs	r1, #0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fc28 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x15c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fc1d 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	f003 021f 	and.w	r2, r3, #31
 8002da6:	e01e      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x19a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fc12 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	e004      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002dda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x1b2>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	0e9b      	lsrs	r3, r3, #26
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	e018      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x1e4>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e22:	2320      	movs	r3, #32
 8002e24:	e004      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d106      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fbe1 	bl	8002604 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2101      	movs	r1, #1
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fbc5 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x222>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fbba 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002e64:	4603      	mov	r3, r0
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	e01e      	b.n	8002eac <HAL_ADC_ConfigChannel+0x260>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2101      	movs	r1, #1
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fbaf 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e84:	fa93 f3a3 	rbit	r3, r3
 8002e88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e004      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ea0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x278>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0e9b      	lsrs	r3, r3, #26
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	e018      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x2aa>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002ed8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e004      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d106      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2200      	movs	r2, #0
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fb7e 	bl	8002604 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2102      	movs	r1, #2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fb62 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x2e8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2102      	movs	r1, #2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fb57 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	0e9b      	lsrs	r3, r3, #26
 8002f2e:	f003 021f 	and.w	r2, r3, #31
 8002f32:	e01e      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x326>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2102      	movs	r1, #2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fb4c 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e004      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x33e>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	0e9b      	lsrs	r3, r3, #26
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	e016      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x36c>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002faa:	2320      	movs	r3, #32
 8002fac:	e004      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d106      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fb1d 	bl	8002604 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2103      	movs	r1, #3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fb01 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x3aa>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2103      	movs	r1, #3
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff faf6 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8002fec:	4603      	mov	r3, r0
 8002fee:	0e9b      	lsrs	r3, r3, #26
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	e017      	b.n	8003026 <HAL_ADC_ConfigChannel+0x3da>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2103      	movs	r1, #3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff faeb 	bl	80025d8 <LL_ADC_GetOffsetChannel>
 8003002:	4603      	mov	r3, r0
 8003004:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800300e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003010:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003018:	2320      	movs	r3, #32
 800301a:	e003      	b.n	8003024 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800301c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302e:	2b00      	cmp	r3, #0
 8003030:	d105      	bne.n	800303e <HAL_ADC_ConfigChannel+0x3f2>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0e9b      	lsrs	r3, r3, #26
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	e011      	b.n	8003062 <HAL_ADC_ConfigChannel+0x416>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800304c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800304e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e003      	b.n	8003062 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800305a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305c:	fab3 f383 	clz	r3, r3
 8003060:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003062:	429a      	cmp	r2, r3
 8003064:	d106      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	2103      	movs	r1, #3
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fac8 	bl	8002604 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fbf1 	bl	8002860 <LL_ADC_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 813d 	bne.w	8003300 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	6819      	ldr	r1, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	461a      	mov	r2, r3
 8003094:	f7ff fb72 	bl	800277c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4aa2      	ldr	r2, [pc, #648]	; (8003328 <HAL_ADC_ConfigChannel+0x6dc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	f040 812e 	bne.w	8003300 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x480>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	0e9b      	lsrs	r3, r3, #26
 80030ba:	3301      	adds	r3, #1
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2b09      	cmp	r3, #9
 80030c2:	bf94      	ite	ls
 80030c4:	2301      	movls	r3, #1
 80030c6:	2300      	movhi	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	e019      	b.n	8003100 <HAL_ADC_ConfigChannel+0x4b4>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80030da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80030de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	e003      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80030e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2b09      	cmp	r3, #9
 80030f8:	bf94      	ite	ls
 80030fa:	2301      	movls	r3, #1
 80030fc:	2300      	movhi	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003100:	2b00      	cmp	r3, #0
 8003102:	d079      	beq.n	80031f8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x4d4>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	0e9b      	lsrs	r3, r3, #26
 8003116:	3301      	adds	r3, #1
 8003118:	069b      	lsls	r3, r3, #26
 800311a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800311e:	e015      	b.n	800314c <HAL_ADC_ConfigChannel+0x500>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800312e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003130:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003138:	2320      	movs	r3, #32
 800313a:	e003      	b.n	8003144 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800313c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3301      	adds	r3, #1
 8003146:	069b      	lsls	r3, r3, #26
 8003148:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <HAL_ADC_ConfigChannel+0x520>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	0e9b      	lsrs	r3, r3, #26
 800315e:	3301      	adds	r3, #1
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2101      	movs	r1, #1
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	e017      	b.n	800319c <HAL_ADC_ConfigChannel+0x550>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800317a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800317e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003184:	2320      	movs	r3, #32
 8003186:	e003      	b.n	8003190 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	3301      	adds	r3, #1
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2101      	movs	r1, #1
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	ea42 0103 	orr.w	r1, r2, r3
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x576>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	0e9b      	lsrs	r3, r3, #26
 80031b2:	3301      	adds	r3, #1
 80031b4:	f003 021f 	and.w	r2, r3, #31
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	051b      	lsls	r3, r3, #20
 80031c0:	e018      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x5a8>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80031d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e003      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80031de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f003 021f 	and.w	r2, r3, #31
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031f4:	430b      	orrs	r3, r1
 80031f6:	e07e      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x5c8>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0e9b      	lsrs	r3, r3, #26
 800320a:	3301      	adds	r3, #1
 800320c:	069b      	lsls	r3, r3, #26
 800320e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003212:	e015      	b.n	8003240 <HAL_ADC_ConfigChannel+0x5f4>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800322c:	2320      	movs	r3, #32
 800322e:	e003      	b.n	8003238 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	069b      	lsls	r3, r3, #26
 800323c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003248:	2b00      	cmp	r3, #0
 800324a:	d109      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x614>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0e9b      	lsrs	r3, r3, #26
 8003252:	3301      	adds	r3, #1
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	e017      	b.n	8003290 <HAL_ADC_ConfigChannel+0x644>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	61fb      	str	r3, [r7, #28]
  return result;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e003      	b.n	8003284 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	ea42 0103 	orr.w	r1, r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10d      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x670>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	3301      	adds	r3, #1
 80032a8:	f003 021f 	and.w	r2, r3, #31
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	3b1e      	subs	r3, #30
 80032b4:	051b      	lsls	r3, r3, #20
 80032b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032ba:	e01b      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x6a8>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	613b      	str	r3, [r7, #16]
  return result;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80032d4:	2320      	movs	r3, #32
 80032d6:	e003      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fab3 f383 	clz	r3, r3
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f003 021f 	and.w	r2, r3, #31
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	3b1e      	subs	r3, #30
 80032ee:	051b      	lsls	r3, r3, #20
 80032f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032f4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7ff fa12 	bl	8002724 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_ADC_ConfigChannel+0x6e0>)
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 80be 	beq.w	800348a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003316:	d004      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x6d6>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a04      	ldr	r2, [pc, #16]	; (8003330 <HAL_ADC_ConfigChannel+0x6e4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10a      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x6ec>
 8003322:	4b04      	ldr	r3, [pc, #16]	; (8003334 <HAL_ADC_ConfigChannel+0x6e8>)
 8003324:	e009      	b.n	800333a <HAL_ADC_ConfigChannel+0x6ee>
 8003326:	bf00      	nop
 8003328:	407f0000 	.word	0x407f0000
 800332c:	80080000 	.word	0x80080000
 8003330:	50000100 	.word	0x50000100
 8003334:	50000300 	.word	0x50000300
 8003338:	4b59      	ldr	r3, [pc, #356]	; (80034a0 <HAL_ADC_ConfigChannel+0x854>)
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff f91a 	bl	8002574 <LL_ADC_GetCommonPathInternalCh>
 8003340:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a56      	ldr	r2, [pc, #344]	; (80034a4 <HAL_ADC_ConfigChannel+0x858>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_ADC_ConfigChannel+0x70c>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a55      	ldr	r2, [pc, #340]	; (80034a8 <HAL_ADC_ConfigChannel+0x85c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d13a      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003358:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800335c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d134      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800336c:	d005      	beq.n	800337a <HAL_ADC_ConfigChannel+0x72e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a4e      	ldr	r2, [pc, #312]	; (80034ac <HAL_ADC_ConfigChannel+0x860>)
 8003374:	4293      	cmp	r3, r2
 8003376:	f040 8085 	bne.w	8003484 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003382:	d004      	beq.n	800338e <HAL_ADC_ConfigChannel+0x742>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a49      	ldr	r2, [pc, #292]	; (80034b0 <HAL_ADC_ConfigChannel+0x864>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d101      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x746>
 800338e:	4a49      	ldr	r2, [pc, #292]	; (80034b4 <HAL_ADC_ConfigChannel+0x868>)
 8003390:	e000      	b.n	8003394 <HAL_ADC_ConfigChannel+0x748>
 8003392:	4a43      	ldr	r2, [pc, #268]	; (80034a0 <HAL_ADC_ConfigChannel+0x854>)
 8003394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003398:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f7ff f8d5 	bl	800254e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033a4:	4b44      	ldr	r3, [pc, #272]	; (80034b8 <HAL_ADC_ConfigChannel+0x86c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	4a44      	ldr	r2, [pc, #272]	; (80034bc <HAL_ADC_ConfigChannel+0x870>)
 80033ac:	fba2 2303 	umull	r2, r3, r2, r3
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	4613      	mov	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033be:	e002      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f9      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033cc:	e05a      	b.n	8003484 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a3b      	ldr	r2, [pc, #236]	; (80034c0 <HAL_ADC_ConfigChannel+0x874>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d125      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11f      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a31      	ldr	r2, [pc, #196]	; (80034b0 <HAL_ADC_ConfigChannel+0x864>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d104      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x7ac>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a34      	ldr	r2, [pc, #208]	; (80034c4 <HAL_ADC_ConfigChannel+0x878>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d047      	beq.n	8003488 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003400:	d004      	beq.n	800340c <HAL_ADC_ConfigChannel+0x7c0>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <HAL_ADC_ConfigChannel+0x864>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x7c4>
 800340c:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <HAL_ADC_ConfigChannel+0x868>)
 800340e:	e000      	b.n	8003412 <HAL_ADC_ConfigChannel+0x7c6>
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <HAL_ADC_ConfigChannel+0x854>)
 8003412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341a:	4619      	mov	r1, r3
 800341c:	4610      	mov	r0, r2
 800341e:	f7ff f896 	bl	800254e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003422:	e031      	b.n	8003488 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a27      	ldr	r2, [pc, #156]	; (80034c8 <HAL_ADC_ConfigChannel+0x87c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d12d      	bne.n	800348a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800342e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d127      	bne.n	800348a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_ADC_ConfigChannel+0x864>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344c:	d004      	beq.n	8003458 <HAL_ADC_ConfigChannel+0x80c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a17      	ldr	r2, [pc, #92]	; (80034b0 <HAL_ADC_ConfigChannel+0x864>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d101      	bne.n	800345c <HAL_ADC_ConfigChannel+0x810>
 8003458:	4a16      	ldr	r2, [pc, #88]	; (80034b4 <HAL_ADC_ConfigChannel+0x868>)
 800345a:	e000      	b.n	800345e <HAL_ADC_ConfigChannel+0x812>
 800345c:	4a10      	ldr	r2, [pc, #64]	; (80034a0 <HAL_ADC_ConfigChannel+0x854>)
 800345e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003462:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f7ff f870 	bl	800254e <LL_ADC_SetCommonPathInternalCh>
 800346e:	e00c      	b.n	800348a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003482:	e002      	b.n	800348a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003484:	bf00      	nop
 8003486:	e000      	b.n	800348a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003488:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003492:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003496:	4618      	mov	r0, r3
 8003498:	37d8      	adds	r7, #216	; 0xd8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	50000700 	.word	0x50000700
 80034a4:	c3210000 	.word	0xc3210000
 80034a8:	90c00010 	.word	0x90c00010
 80034ac:	50000600 	.word	0x50000600
 80034b0:	50000100 	.word	0x50000100
 80034b4:	50000300 	.word	0x50000300
 80034b8:	20000028 	.word	0x20000028
 80034bc:	053e2d63 	.word	0x053e2d63
 80034c0:	c7520000 	.word	0xc7520000
 80034c4:	50000500 	.word	0x50000500
 80034c8:	cb840000 	.word	0xcb840000

080034cc <LL_ADC_IsEnabled>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <LL_ADC_IsEnabled+0x18>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <LL_ADC_IsEnabled+0x1a>
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d101      	bne.n	800350a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b0a1      	sub	sp, #132	; 0x84
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003532:	2302      	movs	r3, #2
 8003534:	e0e7      	b.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800353e:	2300      	movs	r3, #0
 8003540:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003542:	2300      	movs	r3, #0
 8003544:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800354e:	d102      	bne.n	8003556 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003550:	4b6f      	ldr	r3, [pc, #444]	; (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	e009      	b.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d102      	bne.n	8003566 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003560:	4b6d      	ldr	r3, [pc, #436]	; (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	e001      	b.n	800356a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0be      	b.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ffb1 	bl	80034f2 <LL_ADC_REG_IsConversionOngoing>
 8003590:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ffab 	bl	80034f2 <LL_ADC_REG_IsConversionOngoing>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 80a0 	bne.w	80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80035a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 809c 	bne.w	80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b4:	d004      	beq.n	80035c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a55      	ldr	r2, [pc, #340]	; (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80035c0:	4b56      	ldr	r3, [pc, #344]	; (800371c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80035c2:	e000      	b.n	80035c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80035c4:	4b56      	ldr	r3, [pc, #344]	; (8003720 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80035c6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d04b      	beq.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80035d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035e2:	035b      	lsls	r3, r3, #13
 80035e4:	430b      	orrs	r3, r1
 80035e6:	431a      	orrs	r2, r3
 80035e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f4:	d004      	beq.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a45      	ldr	r2, [pc, #276]	; (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10f      	bne.n	8003620 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003600:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003604:	f7ff ff62 	bl	80034cc <LL_ADC_IsEnabled>
 8003608:	4604      	mov	r4, r0
 800360a:	4841      	ldr	r0, [pc, #260]	; (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800360c:	f7ff ff5e 	bl	80034cc <LL_ADC_IsEnabled>
 8003610:	4603      	mov	r3, r0
 8003612:	4323      	orrs	r3, r4
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e012      	b.n	8003646 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003620:	483c      	ldr	r0, [pc, #240]	; (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003622:	f7ff ff53 	bl	80034cc <LL_ADC_IsEnabled>
 8003626:	4604      	mov	r4, r0
 8003628:	483b      	ldr	r0, [pc, #236]	; (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800362a:	f7ff ff4f 	bl	80034cc <LL_ADC_IsEnabled>
 800362e:	4603      	mov	r3, r0
 8003630:	431c      	orrs	r4, r3
 8003632:	483c      	ldr	r0, [pc, #240]	; (8003724 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003634:	f7ff ff4a 	bl	80034cc <LL_ADC_IsEnabled>
 8003638:	4603      	mov	r3, r0
 800363a:	4323      	orrs	r3, r4
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d056      	beq.n	80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800364a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003652:	f023 030f 	bic.w	r3, r3, #15
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	6811      	ldr	r1, [r2, #0]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	430a      	orrs	r2, r1
 8003660:	431a      	orrs	r2, r3
 8003662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003664:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003666:	e047      	b.n	80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003672:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800367c:	d004      	beq.n	8003688 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a23      	ldr	r2, [pc, #140]	; (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d10f      	bne.n	80036a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003688:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800368c:	f7ff ff1e 	bl	80034cc <LL_ADC_IsEnabled>
 8003690:	4604      	mov	r4, r0
 8003692:	481f      	ldr	r0, [pc, #124]	; (8003710 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003694:	f7ff ff1a 	bl	80034cc <LL_ADC_IsEnabled>
 8003698:	4603      	mov	r3, r0
 800369a:	4323      	orrs	r3, r4
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e012      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80036a8:	481a      	ldr	r0, [pc, #104]	; (8003714 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036aa:	f7ff ff0f 	bl	80034cc <LL_ADC_IsEnabled>
 80036ae:	4604      	mov	r4, r0
 80036b0:	4819      	ldr	r0, [pc, #100]	; (8003718 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036b2:	f7ff ff0b 	bl	80034cc <LL_ADC_IsEnabled>
 80036b6:	4603      	mov	r3, r0
 80036b8:	431c      	orrs	r4, r3
 80036ba:	481a      	ldr	r0, [pc, #104]	; (8003724 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036bc:	f7ff ff06 	bl	80034cc <LL_ADC_IsEnabled>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4323      	orrs	r3, r4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d012      	beq.n	80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036da:	f023 030f 	bic.w	r3, r3, #15
 80036de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036e0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036e2:	e009      	b.n	80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	f043 0220 	orr.w	r2, r3, #32
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80036f6:	e000      	b.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003702:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003706:	4618      	mov	r0, r3
 8003708:	3784      	adds	r7, #132	; 0x84
 800370a:	46bd      	mov	sp, r7
 800370c:	bd90      	pop	{r4, r7, pc}
 800370e:	bf00      	nop
 8003710:	50000100 	.word	0x50000100
 8003714:	50000400 	.word	0x50000400
 8003718:	50000500 	.word	0x50000500
 800371c:	50000300 	.word	0x50000300
 8003720:	50000700 	.word	0x50000700
 8003724:	50000600 	.word	0x50000600

08003728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <__NVIC_SetPriorityGrouping+0x44>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003744:	4013      	ands	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375a:	4a04      	ldr	r2, [pc, #16]	; (800376c <__NVIC_SetPriorityGrouping+0x44>)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	60d3      	str	r3, [r2, #12]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <__NVIC_GetPriorityGrouping+0x18>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	f003 0307 	and.w	r3, r3, #7
}
 800377e:	4618      	mov	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	2b00      	cmp	r3, #0
 800379e:	db0a      	blt.n	80037b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	490c      	ldr	r1, [pc, #48]	; (80037d8 <__NVIC_SetPriority+0x4c>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	440b      	add	r3, r1
 80037b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b4:	e00a      	b.n	80037cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4908      	ldr	r1, [pc, #32]	; (80037dc <__NVIC_SetPriority+0x50>)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	3b04      	subs	r3, #4
 80037c4:	0112      	lsls	r2, r2, #4
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	440b      	add	r3, r1
 80037ca:	761a      	strb	r2, [r3, #24]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000e100 	.word	0xe000e100
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f1c3 0307 	rsb	r3, r3, #7
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	bf28      	it	cs
 80037fe:	2304      	movcs	r3, #4
 8003800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3304      	adds	r3, #4
 8003806:	2b06      	cmp	r3, #6
 8003808:	d902      	bls.n	8003810 <NVIC_EncodePriority+0x30>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3b03      	subs	r3, #3
 800380e:	e000      	b.n	8003812 <NVIC_EncodePriority+0x32>
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	401a      	ands	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003828:	f04f 31ff 	mov.w	r1, #4294967295
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	43d9      	mvns	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	4313      	orrs	r3, r2
         );
}
 800383a:	4618      	mov	r0, r3
 800383c:	3724      	adds	r7, #36	; 0x24
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3b01      	subs	r3, #1
 8003854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003858:	d301      	bcc.n	800385e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385a:	2301      	movs	r3, #1
 800385c:	e00f      	b.n	800387e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385e:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <SysTick_Config+0x40>)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003866:	210f      	movs	r1, #15
 8003868:	f04f 30ff 	mov.w	r0, #4294967295
 800386c:	f7ff ff8e 	bl	800378c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <SysTick_Config+0x40>)
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003876:	4b04      	ldr	r3, [pc, #16]	; (8003888 <SysTick_Config+0x40>)
 8003878:	2207      	movs	r2, #7
 800387a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	e000e010 	.word	0xe000e010

0800388c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ff47 	bl	8003728 <__NVIC_SetPriorityGrouping>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b086      	sub	sp, #24
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	4603      	mov	r3, r0
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b0:	f7ff ff5e 	bl	8003770 <__NVIC_GetPriorityGrouping>
 80038b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff90 	bl	80037e0 <NVIC_EncodePriority>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5f 	bl	800378c <__NVIC_SetPriority>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ffb2 	bl	8003848 <SysTick_Config>
 80038e4:	4603      	mov	r3, r0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e014      	b.n	800392a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	791b      	ldrb	r3, [r3, #4]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7fe f879 	bl	8001a08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_DAC_ConfigChannel+0x1c>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e19e      	b.n	8003c92 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	795b      	ldrb	r3, [r3, #5]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_DAC_ConfigChannel+0x2c>
 800395c:	2302      	movs	r3, #2
 800395e:	e198      	b.n	8003c92 <HAL_DAC_ConfigChannel+0x35e>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2202      	movs	r2, #2
 800396a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b04      	cmp	r3, #4
 8003972:	d17a      	bne.n	8003a6a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003974:	f7fe fdcc 	bl	8002510 <HAL_GetTick>
 8003978:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d13d      	bne.n	80039fc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003980:	e018      	b.n	80039b4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003982:	f7fe fdc5 	bl	8002510 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d911      	bls.n	80039b4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f043 0208 	orr.w	r2, r3, #8
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2203      	movs	r2, #3
 80039ae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e16e      	b.n	8003c92 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1df      	bne.n	8003982 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
 80039cc:	e020      	b.n	8003a10 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80039ce:	f7fe fd9f 	bl	8002510 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d90f      	bls.n	80039fc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da0a      	bge.n	80039fc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f043 0208 	orr.w	r2, r3, #8
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2203      	movs	r2, #3
 80039f6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e14a      	b.n	8003c92 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	dbe3      	blt.n	80039ce <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	43db      	mvns	r3, r3
 8003a26:	ea02 0103 	and.w	r1, r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	409a      	lsls	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	21ff      	movs	r1, #255	; 0xff
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	ea02 0103 	and.w	r1, r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	409a      	lsls	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d11d      	bne.n	8003aae <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	221f      	movs	r2, #31
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2207      	movs	r2, #7
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d102      	bne.n	8003ad8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	623b      	str	r3, [r7, #32]
 8003ad6:	e00f      	b.n	8003af8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d102      	bne.n	8003ae6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	e008      	b.n	8003af8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d102      	bne.n	8003af4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003aee:	2301      	movs	r3, #1
 8003af0:	623b      	str	r3, [r7, #32]
 8003af2:	e001      	b.n	8003af8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	6a3a      	ldr	r2, [r7, #32]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	791b      	ldrb	r3, [r3, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d102      	bne.n	8003b2c <HAL_DAC_ConfigChannel+0x1f8>
 8003b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b2a:	e000      	b.n	8003b2e <HAL_DAC_ConfigChannel+0x1fa>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	4013      	ands	r3, r2
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	795b      	ldrb	r3, [r3, #5]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d102      	bne.n	8003b58 <HAL_DAC_ConfigChannel+0x224>
 8003b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b56:	e000      	b.n	8003b5a <HAL_DAC_ConfigChannel+0x226>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d114      	bne.n	8003b9a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003b70:	f002 f826 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8003b74:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4a48      	ldr	r2, [pc, #288]	; (8003c9c <HAL_DAC_ConfigChannel+0x368>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d904      	bls.n	8003b88 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	e00f      	b.n	8003ba8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4a45      	ldr	r2, [pc, #276]	; (8003ca0 <HAL_DAC_ConfigChannel+0x36c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d90a      	bls.n	8003ba6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
 8003b98:	e006      	b.n	8003ba8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba4:	e000      	b.n	8003ba8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003ba6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6819      	ldr	r1, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	43da      	mvns	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	400a      	ands	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c12:	4313      	orrs	r3, r2
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	22c0      	movs	r2, #192	; 0xc0
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43da      	mvns	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	400a      	ands	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	089b      	lsrs	r3, r3, #2
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	ea02 0103 	and.w	r1, r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2201      	movs	r2, #1
 8003c88:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003c90:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3728      	adds	r7, #40	; 0x28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	09896800 	.word	0x09896800
 8003ca0:	04c4b400 	.word	0x04c4b400

08003ca4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e147      	b.n	8003f46 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd feda 	bl	8001a84 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0210 	bic.w	r2, r2, #16
 8003cde:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ce0:	f7fe fc16 	bl	8002510 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003ce6:	e012      	b.n	8003d0e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003ce8:	f7fe fc12 	bl	8002510 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b0a      	cmp	r3, #10
 8003cf4:	d90b      	bls.n	8003d0e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfa:	f043 0201 	orr.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2203      	movs	r2, #3
 8003d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e11b      	b.n	8003f46 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d0e5      	beq.n	8003ce8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d2c:	f7fe fbf0 	bl	8002510 <HAL_GetTick>
 8003d30:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d32:	e012      	b.n	8003d5a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003d34:	f7fe fbec 	bl	8002510 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b0a      	cmp	r3, #10
 8003d40:	d90b      	bls.n	8003d5a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2203      	movs	r2, #3
 8003d52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0f5      	b.n	8003f46 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0e5      	beq.n	8003d34 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0202 	orr.w	r2, r2, #2
 8003d76:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a74      	ldr	r2, [pc, #464]	; (8003f50 <HAL_FDCAN_Init+0x2ac>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d103      	bne.n	8003d8a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003d82:	4a74      	ldr	r2, [pc, #464]	; (8003f54 <HAL_FDCAN_Init+0x2b0>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7c1b      	ldrb	r3, [r3, #16]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d108      	bne.n	8003da4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da0:	619a      	str	r2, [r3, #24]
 8003da2:	e007      	b.n	8003db4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7c5b      	ldrb	r3, [r3, #17]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d108      	bne.n	8003dce <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dca:	619a      	str	r2, [r3, #24]
 8003dcc:	e007      	b.n	8003dde <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699a      	ldr	r2, [r3, #24]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ddc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	7c9b      	ldrb	r3, [r3, #18]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d108      	bne.n	8003df8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003df4:	619a      	str	r2, [r3, #24]
 8003df6:	e007      	b.n	8003e08 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e06:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699a      	ldr	r2, [r3, #24]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003e2c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0210 	bic.w	r2, r2, #16
 8003e3c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d108      	bne.n	8003e58 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0204 	orr.w	r2, r2, #4
 8003e54:	619a      	str	r2, [r3, #24]
 8003e56:	e02c      	b.n	8003eb2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d028      	beq.n	8003eb2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d01c      	beq.n	8003ea2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e76:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0210 	orr.w	r2, r2, #16
 8003e86:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d110      	bne.n	8003eb2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0220 	orr.w	r2, r2, #32
 8003e9e:	619a      	str	r2, [r3, #24]
 8003ea0:	e007      	b.n	8003eb2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699a      	ldr	r2, [r3, #24]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0220 	orr.w	r2, r2, #32
 8003eb0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ec2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003eca:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003eda:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003edc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee6:	d115      	bne.n	8003f14 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003ef6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	3b01      	subs	r3, #1
 8003efe:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003f00:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003f10:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003f12:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f814 	bl	8003f58 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40006400 	.word	0x40006400
 8003f54:	40006500 	.word	0x40006500

08003f58 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003f60:	4b30      	ldr	r3, [pc, #192]	; (8004024 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003f62:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2f      	ldr	r2, [pc, #188]	; (8004028 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d103      	bne.n	8003f76 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003f74:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2c      	ldr	r2, [pc, #176]	; (800402c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d103      	bne.n	8003f88 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8003f86:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f96:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	041a      	lsls	r2, r3, #16
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fbc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	061a      	lsls	r2, r3, #24
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e005      	b.n	800400a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3304      	adds	r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	429a      	cmp	r2, r3
 8004014:	d3f3      	bcc.n	8003ffe <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8004016:	bf00      	nop
 8004018:	bf00      	nop
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	4000a400 	.word	0x4000a400
 8004028:	40006800 	.word	0x40006800
 800402c:	40006c00 	.word	0x40006c00

08004030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800403e:	e15a      	b.n	80042f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	fa01 f303 	lsl.w	r3, r1, r3
 800404c:	4013      	ands	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 814c 	beq.w	80042f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d005      	beq.n	8004070 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800406c:	2b02      	cmp	r3, #2
 800406e:	d130      	bne.n	80040d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	2203      	movs	r2, #3
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040a6:	2201      	movs	r2, #1
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	091b      	lsrs	r3, r3, #4
 80040bc:	f003 0201 	and.w	r2, r3, #1
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d017      	beq.n	800410e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	2203      	movs	r2, #3
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d123      	bne.n	8004162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	08da      	lsrs	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3208      	adds	r2, #8
 8004122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	220f      	movs	r2, #15
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	08da      	lsrs	r2, r3, #3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3208      	adds	r2, #8
 800415c:	6939      	ldr	r1, [r7, #16]
 800415e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	2203      	movs	r2, #3
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0203 	and.w	r2, r3, #3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80a6 	beq.w	80042f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a4:	4b5b      	ldr	r3, [pc, #364]	; (8004314 <HAL_GPIO_Init+0x2e4>)
 80041a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a8:	4a5a      	ldr	r2, [pc, #360]	; (8004314 <HAL_GPIO_Init+0x2e4>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	6613      	str	r3, [r2, #96]	; 0x60
 80041b0:	4b58      	ldr	r3, [pc, #352]	; (8004314 <HAL_GPIO_Init+0x2e4>)
 80041b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041bc:	4a56      	ldr	r2, [pc, #344]	; (8004318 <HAL_GPIO_Init+0x2e8>)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	089b      	lsrs	r3, r3, #2
 80041c2:	3302      	adds	r3, #2
 80041c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	220f      	movs	r2, #15
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041e6:	d01f      	beq.n	8004228 <HAL_GPIO_Init+0x1f8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a4c      	ldr	r2, [pc, #304]	; (800431c <HAL_GPIO_Init+0x2ec>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d019      	beq.n	8004224 <HAL_GPIO_Init+0x1f4>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a4b      	ldr	r2, [pc, #300]	; (8004320 <HAL_GPIO_Init+0x2f0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d013      	beq.n	8004220 <HAL_GPIO_Init+0x1f0>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a4a      	ldr	r2, [pc, #296]	; (8004324 <HAL_GPIO_Init+0x2f4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00d      	beq.n	800421c <HAL_GPIO_Init+0x1ec>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a49      	ldr	r2, [pc, #292]	; (8004328 <HAL_GPIO_Init+0x2f8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d007      	beq.n	8004218 <HAL_GPIO_Init+0x1e8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a48      	ldr	r2, [pc, #288]	; (800432c <HAL_GPIO_Init+0x2fc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d101      	bne.n	8004214 <HAL_GPIO_Init+0x1e4>
 8004210:	2305      	movs	r3, #5
 8004212:	e00a      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 8004214:	2306      	movs	r3, #6
 8004216:	e008      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 8004218:	2304      	movs	r3, #4
 800421a:	e006      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 800421c:	2303      	movs	r3, #3
 800421e:	e004      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 8004220:	2302      	movs	r3, #2
 8004222:	e002      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_GPIO_Init+0x1fa>
 8004228:	2300      	movs	r3, #0
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	f002 0203 	and.w	r2, r2, #3
 8004230:	0092      	lsls	r2, r2, #2
 8004232:	4093      	lsls	r3, r2
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800423a:	4937      	ldr	r1, [pc, #220]	; (8004318 <HAL_GPIO_Init+0x2e8>)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	3302      	adds	r3, #2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004248:	4b39      	ldr	r3, [pc, #228]	; (8004330 <HAL_GPIO_Init+0x300>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	43db      	mvns	r3, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4013      	ands	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800426c:	4a30      	ldr	r2, [pc, #192]	; (8004330 <HAL_GPIO_Init+0x300>)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004272:	4b2f      	ldr	r3, [pc, #188]	; (8004330 <HAL_GPIO_Init+0x300>)
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004296:	4a26      	ldr	r2, [pc, #152]	; (8004330 <HAL_GPIO_Init+0x300>)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800429c:	4b24      	ldr	r3, [pc, #144]	; (8004330 <HAL_GPIO_Init+0x300>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4013      	ands	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042c0:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_GPIO_Init+0x300>)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042c6:	4b1a      	ldr	r3, [pc, #104]	; (8004330 <HAL_GPIO_Init+0x300>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4013      	ands	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042ea:	4a11      	ldr	r2, [pc, #68]	; (8004330 <HAL_GPIO_Init+0x300>)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	3301      	adds	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f ae9d 	bne.w	8004040 <HAL_GPIO_Init+0x10>
  }
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40021000 	.word	0x40021000
 8004318:	40010000 	.word	0x40010000
 800431c:	48000400 	.word	0x48000400
 8004320:	48000800 	.word	0x48000800
 8004324:	48000c00 	.word	0x48000c00
 8004328:	48001000 	.word	0x48001000
 800432c:	48001400 	.word	0x48001400
 8004330:	40010400 	.word	0x40010400

08004334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
 8004340:	4613      	mov	r3, r2
 8004342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800434a:	887a      	ldrh	r2, [r7, #2]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004350:	e002      	b.n	8004358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004352:	887a      	ldrh	r2, [r7, #2]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0be      	b.n	80044f4 <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d02e      	beq.n	8004420 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4d      	ldr	r2, [pc, #308]	; (80044fc <HAL_HRTIM_Init+0x198>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d10b      	bne.n	80043e4 <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80043cc:	4b4c      	ldr	r3, [pc, #304]	; (8004500 <HAL_HRTIM_Init+0x19c>)
 80043ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d0:	4a4b      	ldr	r2, [pc, #300]	; (8004500 <HAL_HRTIM_Init+0x19c>)
 80043d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043d6:	6613      	str	r3, [r2, #96]	; 0x60
 80043d8:	4b49      	ldr	r3, [pc, #292]	; (8004500 <HAL_HRTIM_Init+0x19c>)
 80043da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80043f2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004408:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fd fb8b 	bl	8001b3c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d012      	beq.n	8004458 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004440:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]
 800446c:	e03e      	b.n	80044ec <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800446e:	7dfa      	ldrb	r2, [r7, #23]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	3318      	adds	r3, #24
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004482:	7dfa      	ldrb	r2, [r7, #23]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	331c      	adds	r3, #28
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004496:	7dfa      	ldrb	r2, [r7, #23]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	3320      	adds	r3, #32
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80044aa:	7dfa      	ldrb	r2, [r7, #23]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	3324      	adds	r3, #36	; 0x24
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80044be:	7dfa      	ldrb	r2, [r7, #23]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	3328      	adds	r3, #40	; 0x28
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80044d2:	7dfa      	ldrb	r2, [r7, #23]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	3330      	adds	r3, #48	; 0x30
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	3301      	adds	r3, #1
 80044ea:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80044ec:	7dfb      	ldrb	r3, [r7, #23]
 80044ee:	2b06      	cmp	r3, #6
 80044f0:	d9bd      	bls.n	800446e <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40016800 	.word	0x40016800
 8004500:	40021000 	.word	0x40021000

08004504 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_HRTIM_DLLCalibrationStart+0x18>
 8004518:	2302      	movs	r3, #2
 800451a:	e045      	b.n	80045a8 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d114      	bne.n	800455e <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0202 	bic.w	r2, r2, #2
 8004544:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0201 	orr.w	r2, r2, #1
 8004558:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 800455c:	e01f      	b.n	800459e <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0202 	orr.w	r2, r2, #2
 800456e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800457a:	f023 010c 	bic.w	r1, r3, #12
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80045be:	f7fd ffa7 	bl	8002510 <HAL_GetTick>
 80045c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80045c4:	e014      	b.n	80045f0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d010      	beq.n	80045f0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fd ff9f 	bl	8002510 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2207      	movs	r2, #7
 80045e8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e011      	b.n	8004614 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80045f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004600:	d1e1      	bne.n	80045c6 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d101      	bne.n	8004638 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
 8004636:	e015      	b.n	8004664 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b06      	cmp	r3, #6
 8004644:	d104      	bne.n	8004650 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f89c 	bl	8004786 <HRTIM_MasterBase_Config>
 800464e:	e004      	b.n	800465a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f8c5 	bl	80047e4 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d101      	bne.n	8004688 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
 8004686:	e07a      	b.n	800477e <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8004692:	2302      	movs	r3, #2
 8004694:	e073      	b.n	800477e <HAL_HRTIM_WaveformTimerConfig+0x112>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d104      	bne.n	80046b6 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f8d8 	bl	8004864 <HRTIM_MasterWaveform_Config>
 80046b4:	e004      	b.n	80046c0 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 f970 	bl	80049a0 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4403      	add	r3, r0
 80046d2:	3320      	adds	r3, #32
 80046d4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4403      	add	r3, r0
 80046e8:	3324      	adds	r3, #36	; 0x24
 80046ea:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6899      	ldr	r1, [r3, #8]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	4613      	mov	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4403      	add	r3, r0
 80046fe:	3328      	adds	r3, #40	; 0x28
 8004700:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68d9      	ldr	r1, [r3, #12]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	4613      	mov	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4403      	add	r3, r0
 8004714:	332c      	adds	r3, #44	; 0x2c
 8004716:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6919      	ldr	r1, [r3, #16]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4403      	add	r3, r0
 800472a:	3330      	adds	r3, #48	; 0x30
 800472c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 fabb 	bl	8004cac <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b06      	cmp	r3, #6
 800473a:	d017      	beq.n	800476c <HAL_HRTIM_WaveformTimerConfig+0x100>
   && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d113      	bne.n	800476c <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	3301      	adds	r3, #1
 800474c:	01db      	lsls	r3, r3, #7
 800474e:	4413      	add	r3, r2
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	025b      	lsls	r3, r3, #9
 800475c:	68f9      	ldr	r1, [r7, #12]
 800475e:	6809      	ldr	r1, [r1, #0]
 8004760:	431a      	orrs	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	3301      	adds	r3, #1
 8004766:	01db      	lsls	r3, r3, #7
 8004768:	440b      	add	r3, r1
 800476a:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0307 	bic.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f023 0318 	bic.w	r3, r3, #24
 80047b0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	6852      	ldr	r2, [r2, #4]
 80047d6:	619a      	str	r2, [r3, #24]
}
 80047d8:	bf00      	nop
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	3301      	adds	r3, #1
 80047f8:	01db      	lsls	r3, r3, #7
 80047fa:	4413      	add	r3, r2
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	f023 0318 	bic.w	r3, r3, #24
 8004818:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	3301      	adds	r3, #1
 800482c:	01db      	lsls	r3, r3, #7
 800482e:	4413      	add	r3, r2
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6819      	ldr	r1, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	01db      	lsls	r3, r3, #7
 8004840:	440b      	add	r3, r1
 8004842:	3394      	adds	r3, #148	; 0x94
 8004844:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6819      	ldr	r1, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	01db      	lsls	r3, r3, #7
 8004852:	440b      	add	r3, r1
 8004854:	3398      	adds	r3, #152	; 0x98
 8004856:	601a      	str	r2, [r3, #0]
}
 8004858:	bf00      	nop
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 800487e:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0320 	bic.w	r3, r3, #32
 8004886:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004898:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	2b20      	cmp	r3, #32
 80048a0:	d003      	beq.n	80048aa <HRTIM_MasterWaveform_Config+0x46>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d108      	bne.n	80048bc <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048b0:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f043 0320 	orr.w	r3, r3, #32
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e021      	b.n	8004900 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d108      	bne.n	80048d6 <HRTIM_MasterWaveform_Config+0x72>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ca:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e014      	b.n	8004900 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d108      	bne.n	80048f0 <HRTIM_MasterWaveform_Config+0x8c>
  {
        hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e4:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e007      	b.n	8004900 <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
        hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0320 	bic.w	r3, r3, #32
 80048f6:	60fb      	str	r3, [r7, #12]
        hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048fe:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004906:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004918:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800492a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800493c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800494e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004962:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004974:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	4313      	orrs	r3, r2
 800497e:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b08b      	sub	sp, #44	; 0x2c
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	3301      	adds	r3, #1
 80049b4:	01db      	lsls	r3, r3, #7
 80049b6:	4413      	add	r3, r2
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	6811      	ldr	r1, [r2, #0]
 80049be:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3301      	adds	r3, #1
 80049c6:	01db      	lsls	r3, r3, #7
 80049c8:	440b      	add	r3, r1
 80049ca:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	3301      	adds	r3, #1
 80049d4:	01db      	lsls	r3, r3, #7
 80049d6:	4413      	add	r3, r2
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	01db      	lsls	r3, r3, #7
 80049e4:	4413      	add	r3, r2
 80049e6:	33e8      	adds	r3, #232	; 0xe8
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	01db      	lsls	r3, r3, #7
 80049f4:	4413      	add	r3, r2
 80049f6:	33e4      	adds	r3, #228	; 0xe4
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8004a04:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	f023 0320 	bic.w	r3, r3, #32
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a14:	4313      	orrs	r3, r2
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED) || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d003      	beq.n	8004a28 <HRTIM_TimingUnitWaveform_Config+0x88>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d108      	bne.n	8004a3a <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	f043 0320 	orr.w	r3, r3, #32
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
 8004a38:	e021      	b.n	8004a7e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d108      	bne.n	8004a54 <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
 8004a52:	e014      	b.n	8004a7e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if ( pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	d108      	bne.n	8004a6e <HRTIM_TimingUnitWaveform_Config+0xce>
  {
        hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6c:	e007      	b.n	8004a7e <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
        hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	f023 0320 	bic.w	r3, r3, #32
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
        hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae8:	d103      	bne.n	8004af2 <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b00:	4313      	orrs	r3, r2
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b12:	4313      	orrs	r3, r2
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8004b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b32:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b48:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]

    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	6a3a      	ldr	r2, [r7, #32]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b6a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004b6e:	d004      	beq.n	8004b7a <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b74:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8004b78:	d103      	bne.n	8004b82 <HRTIM_TimingUnitWaveform_Config+0x1e2>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d108      	bne.n	8004b94 <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8004b88:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8e:	6a3a      	ldr	r2, [r7, #32]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b9a:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba0:	6a3a      	ldr	r2, [r7, #32]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d850      	bhi.n	8004c54 <HRTIM_TimingUnitWaveform_Config+0x2b4>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <HRTIM_TimingUnitWaveform_Config+0x218>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bd1 	.word	0x08004bd1
 8004bbc:	08004be7 	.word	0x08004be7
 8004bc0:	08004bfd 	.word	0x08004bfd
 8004bc4:	08004c13 	.word	0x08004c13
 8004bc8:	08004c29 	.word	0x08004c29
 8004bcc:	08004c3f 	.word	0x08004c3f
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bd6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61fb      	str	r3, [r7, #28]
      break;
 8004be4:	e037      	b.n	8004c56 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bec:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61fb      	str	r3, [r7, #28]
      break;
 8004bfa:	e02c      	b.n	8004c56 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004c02:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61fb      	str	r3, [r7, #28]
      break;
 8004c10:	e021      	b.n	8004c56 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004c18:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	69fa      	ldr	r2, [r7, #28]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61fb      	str	r3, [r7, #28]
      break;
 8004c26:	e016      	b.n	8004c56 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c2e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	015b      	lsls	r3, r3, #5
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61fb      	str	r3, [r7, #28]
      break;
 8004c3c:	e00b      	b.n	8004c56 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004c44:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 6U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	019b      	lsls	r3, r3, #6
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61fb      	str	r3, [r7, #28]
      break;
 8004c52:	e000      	b.n	8004c56 <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

  default:
    break;
 8004c54:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	01db      	lsls	r3, r3, #7
 8004c60:	4413      	add	r3, r2
 8004c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c64:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	01db      	lsls	r3, r3, #7
 8004c6e:	4413      	add	r3, r2
 8004c70:	33e8      	adds	r3, #232	; 0xe8
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	01db      	lsls	r3, r3, #7
 8004c7e:	4413      	add	r3, r2
 8004c80:	33e4      	adds	r3, #228	; 0xe4
 8004c82:	6a3a      	ldr	r2, [r7, #32]
 8004c84:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	01db      	lsls	r3, r3, #7
 8004c8e:	4413      	add	r3, r2
 8004c90:	33d4      	adds	r3, #212	; 0xd4
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8004ca0:	bf00      	nop
 8004ca2:	372c      	adds	r7, #44	; 0x2c
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b06      	cmp	r3, #6
 8004cba:	d85e      	bhi.n	8004d7a <HRTIM_ForceRegistersUpdate+0xce>
 8004cbc:	a201      	add	r2, pc, #4	; (adr r2, 8004cc4 <HRTIM_ForceRegistersUpdate+0x18>)
 8004cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc2:	bf00      	nop
 8004cc4:	08004cf7 	.word	0x08004cf7
 8004cc8:	08004d0d 	.word	0x08004d0d
 8004ccc:	08004d23 	.word	0x08004d23
 8004cd0:	08004d39 	.word	0x08004d39
 8004cd4:	08004d4f 	.word	0x08004d4f
 8004cd8:	08004d65 	.word	0x08004d65
 8004cdc:	08004ce1 	.word	0x08004ce1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f042 0201 	orr.w	r2, r2, #1
 8004cf0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004cf4:	e042      	b.n	8004d7c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0202 	orr.w	r2, r2, #2
 8004d06:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004d0a:	e037      	b.n	8004d7c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0204 	orr.w	r2, r2, #4
 8004d1c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004d20:	e02c      	b.n	8004d7c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0208 	orr.w	r2, r2, #8
 8004d32:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004d36:	e021      	b.n	8004d7c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0210 	orr.w	r2, r2, #16
 8004d48:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004d4c:	e016      	b.n	8004d7c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0220 	orr.w	r2, r2, #32
 8004d5e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004d62:	e00b      	b.n	8004d7c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d74:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8004d78:	e000      	b.n	8004d7c <HRTIM_ForceRegistersUpdate+0xd0>
    }

  default:
    break;
 8004d7a:	bf00      	nop
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0bb      	b.n	8004f16 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b05      	cmp	r3, #5
 8004da8:	d101      	bne.n	8004dae <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e0b3      	b.n	8004f16 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d101      	bne.n	8004dbe <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e0ab      	b.n	8004f16 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dbe:	4b58      	ldr	r3, [pc, #352]	; (8004f20 <HAL_OPAMP_Init+0x198>)
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	4a57      	ldr	r2, [pc, #348]	; (8004f20 <HAL_OPAMP_Init+0x198>)
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	6613      	str	r3, [r2, #96]	; 0x60
 8004dca:	4b55      	ldr	r3, [pc, #340]	; (8004f20 <HAL_OPAMP_Init+0x198>)
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d103      	bne.n	8004dea <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fc ff20 	bl	8001c30 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b40      	cmp	r3, #64	; 0x40
 8004df6:	d003      	beq.n	8004e00 <HAL_OPAMP_Init+0x78>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d133      	bne.n	8004e68 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 0110 	bic.w	r1, r3, #16
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b41      	ldr	r3, [pc, #260]	; (8004f24 <HAL_OPAMP_Init+0x19c>)
 8004e1e:	4013      	ands	r3, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6851      	ldr	r1, [r2, #4]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6892      	ldr	r2, [r2, #8]
 8004e28:	4311      	orrs	r1, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6912      	ldr	r2, [r2, #16]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	7d09      	ldrb	r1, [r1, #20]
 8004e34:	2901      	cmp	r1, #1
 8004e36:	d102      	bne.n	8004e3e <HAL_OPAMP_Init+0xb6>
 8004e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e3c:	e000      	b.n	8004e40 <HAL_OPAMP_Init+0xb8>
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4311      	orrs	r1, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e46:	4311      	orrs	r1, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e4c:	4311      	orrs	r1, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e52:	04d2      	lsls	r2, r2, #19
 8004e54:	4311      	orrs	r1, r2
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e5a:	0612      	lsls	r2, r2, #24
 8004e5c:	4311      	orrs	r1, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	430b      	orrs	r3, r1
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e035      	b.n	8004ed4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f023 0110 	bic.w	r1, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <HAL_OPAMP_Init+0x19c>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6851      	ldr	r1, [r2, #4]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6892      	ldr	r2, [r2, #8]
 8004e90:	4311      	orrs	r1, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68d2      	ldr	r2, [r2, #12]
 8004e96:	4311      	orrs	r1, r2
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6912      	ldr	r2, [r2, #16]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	7d09      	ldrb	r1, [r1, #20]
 8004ea2:	2901      	cmp	r1, #1
 8004ea4:	d102      	bne.n	8004eac <HAL_OPAMP_Init+0x124>
 8004ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eaa:	e000      	b.n	8004eae <HAL_OPAMP_Init+0x126>
 8004eac:	2100      	movs	r1, #0
 8004eae:	4311      	orrs	r1, r2
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eb4:	4311      	orrs	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004eba:	4311      	orrs	r1, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ec0:	04d2      	lsls	r2, r2, #19
 8004ec2:	4311      	orrs	r1, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ec8:	0612      	lsls	r2, r2, #24
 8004eca:	4311      	orrs	r1, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6812      	ldr	r2, [r2, #0]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	db10      	blt.n	8004f00 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40021000 	.word	0x40021000
 8004f24:	e0003e11 	.word	0xe0003e11

08004f28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0c0      	b.n	80050bc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fd f9e0 	bl	8002314 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2203      	movs	r2, #3
 8004f58:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f003 fb43 	bl	80085ec <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
 8004f6a:	e03e      	b.n	8004fea <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f6c:	7bfa      	ldrb	r2, [r7, #15]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	440b      	add	r3, r1
 8004f7a:	3311      	adds	r3, #17
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f80:	7bfa      	ldrb	r2, [r7, #15]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3310      	adds	r3, #16
 8004f90:	7bfa      	ldrb	r2, [r7, #15]
 8004f92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f94:	7bfa      	ldrb	r2, [r7, #15]
 8004f96:	6879      	ldr	r1, [r7, #4]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	440b      	add	r3, r1
 8004fa2:	3313      	adds	r3, #19
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fa8:	7bfa      	ldrb	r2, [r7, #15]
 8004faa:	6879      	ldr	r1, [r7, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	440b      	add	r3, r1
 8004fb6:	3320      	adds	r3, #32
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fbc:	7bfa      	ldrb	r2, [r7, #15]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	440b      	add	r3, r1
 8004fca:	3324      	adds	r3, #36	; 0x24
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	440b      	add	r3, r1
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	791b      	ldrb	r3, [r3, #4]
 8004fee:	7bfa      	ldrb	r2, [r7, #15]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d3bb      	bcc.n	8004f6c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]
 8004ff8:	e044      	b.n	8005084 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ffa:	7bfa      	ldrb	r2, [r7, #15]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	440b      	add	r3, r1
 8005008:	f203 1351 	addw	r3, r3, #337	; 0x151
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	440b      	add	r3, r1
 800501e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005022:	7bfa      	ldrb	r2, [r7, #15]
 8005024:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005026:	7bfa      	ldrb	r2, [r7, #15]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	440b      	add	r3, r1
 8005034:	f203 1353 	addw	r3, r3, #339	; 0x153
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800503c:	7bfa      	ldrb	r2, [r7, #15]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	440b      	add	r3, r1
 800504a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005052:	7bfa      	ldrb	r2, [r7, #15]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	440b      	add	r3, r1
 8005060:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	440b      	add	r3, r1
 8005076:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	3301      	adds	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	791b      	ldrb	r3, [r3, #4]
 8005088:	7bfa      	ldrb	r2, [r7, #15]
 800508a:	429a      	cmp	r2, r3
 800508c:	d3b5      	bcc.n	8004ffa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3304      	adds	r3, #4
 8005096:	e893 0006 	ldmia.w	r3, {r1, r2}
 800509a:	f003 fac2 	bl	8008622 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7a9b      	ldrb	r3, [r3, #10]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f805 	bl	80050c4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f043 0302 	orr.w	r3, r3, #2
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d141      	bne.n	80051aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005126:	4b4b      	ldr	r3, [pc, #300]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005132:	d131      	bne.n	8005198 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005134:	4b47      	ldr	r3, [pc, #284]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800513a:	4a46      	ldr	r2, [pc, #280]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005144:	4b43      	ldr	r3, [pc, #268]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800514c:	4a41      	ldr	r2, [pc, #260]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005152:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005154:	4b40      	ldr	r3, [pc, #256]	; (8005258 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2232      	movs	r2, #50	; 0x32
 800515a:	fb02 f303 	mul.w	r3, r2, r3
 800515e:	4a3f      	ldr	r2, [pc, #252]	; (800525c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005160:	fba2 2303 	umull	r2, r3, r2, r3
 8005164:	0c9b      	lsrs	r3, r3, #18
 8005166:	3301      	adds	r3, #1
 8005168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800516a:	e002      	b.n	8005172 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3b01      	subs	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005172:	4b38      	ldr	r3, [pc, #224]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517e:	d102      	bne.n	8005186 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f2      	bne.n	800516c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005186:	4b33      	ldr	r3, [pc, #204]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005192:	d158      	bne.n	8005246 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e057      	b.n	8005248 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005198:	4b2e      	ldr	r3, [pc, #184]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800519a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800519e:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80051a8:	e04d      	b.n	8005246 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b0:	d141      	bne.n	8005236 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051b2:	4b28      	ldr	r3, [pc, #160]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051be:	d131      	bne.n	8005224 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051c0:	4b24      	ldr	r3, [pc, #144]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051c6:	4a23      	ldr	r2, [pc, #140]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051d0:	4b20      	ldr	r3, [pc, #128]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051e0:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2232      	movs	r2, #50	; 0x32
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	4a1c      	ldr	r2, [pc, #112]	; (800525c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	0c9b      	lsrs	r3, r3, #18
 80051f2:	3301      	adds	r3, #1
 80051f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051f6:	e002      	b.n	80051fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520a:	d102      	bne.n	8005212 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f2      	bne.n	80051f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005212:	4b10      	ldr	r3, [pc, #64]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521e:	d112      	bne.n	8005246 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e011      	b.n	8005248 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005224:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522a:	4a0a      	ldr	r2, [pc, #40]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800522c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005234:	e007      	b.n	8005246 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800523e:	4a05      	ldr	r2, [pc, #20]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005240:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005244:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40007000 	.word	0x40007000
 8005258:	20000028 	.word	0x20000028
 800525c:	431bde83 	.word	0x431bde83

08005260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e2fe      	b.n	8005870 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d075      	beq.n	800536a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800527e:	4b97      	ldr	r3, [pc, #604]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005288:	4b94      	ldr	r3, [pc, #592]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b0c      	cmp	r3, #12
 8005296:	d102      	bne.n	800529e <HAL_RCC_OscConfig+0x3e>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d002      	beq.n	80052a4 <HAL_RCC_OscConfig+0x44>
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d10b      	bne.n	80052bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a4:	4b8d      	ldr	r3, [pc, #564]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d05b      	beq.n	8005368 <HAL_RCC_OscConfig+0x108>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d157      	bne.n	8005368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e2d9      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052c4:	d106      	bne.n	80052d4 <HAL_RCC_OscConfig+0x74>
 80052c6:	4b85      	ldr	r3, [pc, #532]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a84      	ldr	r2, [pc, #528]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80052cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	e01d      	b.n	8005310 <HAL_RCC_OscConfig+0xb0>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052dc:	d10c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x98>
 80052de:	4b7f      	ldr	r3, [pc, #508]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a7e      	ldr	r2, [pc, #504]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80052e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052e8:	6013      	str	r3, [r2, #0]
 80052ea:	4b7c      	ldr	r3, [pc, #496]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a7b      	ldr	r2, [pc, #492]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80052f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	e00b      	b.n	8005310 <HAL_RCC_OscConfig+0xb0>
 80052f8:	4b78      	ldr	r3, [pc, #480]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a77      	ldr	r2, [pc, #476]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80052fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	4b75      	ldr	r3, [pc, #468]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a74      	ldr	r2, [pc, #464]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 800530a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d013      	beq.n	8005340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fd f8fa 	bl	8002510 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005320:	f7fd f8f6 	bl	8002510 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b64      	cmp	r3, #100	; 0x64
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e29e      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005332:	4b6a      	ldr	r3, [pc, #424]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCC_OscConfig+0xc0>
 800533e:	e014      	b.n	800536a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fd f8e6 	bl	8002510 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005348:	f7fd f8e2 	bl	8002510 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b64      	cmp	r3, #100	; 0x64
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e28a      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800535a:	4b60      	ldr	r3, [pc, #384]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0xe8>
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d075      	beq.n	8005462 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005376:	4b59      	ldr	r3, [pc, #356]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 030c 	and.w	r3, r3, #12
 800537e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005380:	4b56      	ldr	r3, [pc, #344]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d102      	bne.n	8005396 <HAL_RCC_OscConfig+0x136>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d002      	beq.n	800539c <HAL_RCC_OscConfig+0x13c>
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b04      	cmp	r3, #4
 800539a:	d11f      	bne.n	80053dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800539c:	4b4f      	ldr	r3, [pc, #316]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_OscConfig+0x154>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e25d      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b4:	4b49      	ldr	r3, [pc, #292]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	061b      	lsls	r3, r3, #24
 80053c2:	4946      	ldr	r1, [pc, #280]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053c8:	4b45      	ldr	r3, [pc, #276]	; (80054e0 <HAL_RCC_OscConfig+0x280>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fd f853 	bl	8002478 <HAL_InitTick>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d043      	beq.n	8005460 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e249      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d023      	beq.n	800542c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e4:	4b3d      	ldr	r3, [pc, #244]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a3c      	ldr	r2, [pc, #240]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80053ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fd f88e 	bl	8002510 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053f8:	f7fd f88a 	bl	8002510 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e232      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800540a:	4b34      	ldr	r3, [pc, #208]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005416:	4b31      	ldr	r3, [pc, #196]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	061b      	lsls	r3, r3, #24
 8005424:	492d      	ldr	r1, [pc, #180]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 8005426:	4313      	orrs	r3, r2
 8005428:	604b      	str	r3, [r1, #4]
 800542a:	e01a      	b.n	8005462 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542c:	4b2b      	ldr	r3, [pc, #172]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 8005432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fd f86a 	bl	8002510 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005440:	f7fd f866 	bl	8002510 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e20e      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005452:	4b22      	ldr	r3, [pc, #136]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x1e0>
 800545e:	e000      	b.n	8005462 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005460:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d041      	beq.n	80054f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01c      	beq.n	80054b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005476:	4b19      	ldr	r3, [pc, #100]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 8005478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547c:	4a17      	ldr	r2, [pc, #92]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005486:	f7fd f843 	bl	8002510 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800548e:	f7fd f83f 	bl	8002510 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e1e7      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054a0:	4b0e      	ldr	r3, [pc, #56]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80054a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0ef      	beq.n	800548e <HAL_RCC_OscConfig+0x22e>
 80054ae:	e020      	b.n	80054f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80054b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b6:	4a09      	ldr	r2, [pc, #36]	; (80054dc <HAL_RCC_OscConfig+0x27c>)
 80054b8:	f023 0301 	bic.w	r3, r3, #1
 80054bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c0:	f7fd f826 	bl	8002510 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054c6:	e00d      	b.n	80054e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054c8:	f7fd f822 	bl	8002510 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d906      	bls.n	80054e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e1ca      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000
 80054e0:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054e4:	4b8c      	ldr	r3, [pc, #560]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80054e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1ea      	bne.n	80054c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80a6 	beq.w	800564c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005500:	2300      	movs	r3, #0
 8005502:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005504:	4b84      	ldr	r3, [pc, #528]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_RCC_OscConfig+0x2b4>
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <HAL_RCC_OscConfig+0x2b6>
 8005514:	2300      	movs	r3, #0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00d      	beq.n	8005536 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551a:	4b7f      	ldr	r3, [pc, #508]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	4a7e      	ldr	r2, [pc, #504]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 8005520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005524:	6593      	str	r3, [r2, #88]	; 0x58
 8005526:	4b7c      	ldr	r3, [pc, #496]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005532:	2301      	movs	r3, #1
 8005534:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005536:	4b79      	ldr	r3, [pc, #484]	; (800571c <HAL_RCC_OscConfig+0x4bc>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	2b00      	cmp	r3, #0
 8005540:	d118      	bne.n	8005574 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005542:	4b76      	ldr	r3, [pc, #472]	; (800571c <HAL_RCC_OscConfig+0x4bc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a75      	ldr	r2, [pc, #468]	; (800571c <HAL_RCC_OscConfig+0x4bc>)
 8005548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800554c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800554e:	f7fc ffdf 	bl	8002510 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005556:	f7fc ffdb 	bl	8002510 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e183      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005568:	4b6c      	ldr	r3, [pc, #432]	; (800571c <HAL_RCC_OscConfig+0x4bc>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f0      	beq.n	8005556 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d108      	bne.n	800558e <HAL_RCC_OscConfig+0x32e>
 800557c:	4b66      	ldr	r3, [pc, #408]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005582:	4a65      	ldr	r2, [pc, #404]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 8005584:	f043 0301 	orr.w	r3, r3, #1
 8005588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800558c:	e024      	b.n	80055d8 <HAL_RCC_OscConfig+0x378>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b05      	cmp	r3, #5
 8005594:	d110      	bne.n	80055b8 <HAL_RCC_OscConfig+0x358>
 8005596:	4b60      	ldr	r3, [pc, #384]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559c:	4a5e      	ldr	r2, [pc, #376]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 800559e:	f043 0304 	orr.w	r3, r3, #4
 80055a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055a6:	4b5c      	ldr	r3, [pc, #368]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ac:	4a5a      	ldr	r2, [pc, #360]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055b6:	e00f      	b.n	80055d8 <HAL_RCC_OscConfig+0x378>
 80055b8:	4b57      	ldr	r3, [pc, #348]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055be:	4a56      	ldr	r2, [pc, #344]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f023 0301 	bic.w	r3, r3, #1
 80055c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055c8:	4b53      	ldr	r3, [pc, #332]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	4a52      	ldr	r2, [pc, #328]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80055d0:	f023 0304 	bic.w	r3, r3, #4
 80055d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d016      	beq.n	800560e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fc ff96 	bl	8002510 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055e8:	f7fc ff92 	bl	8002510 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e138      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fe:	4b46      	ldr	r3, [pc, #280]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0ed      	beq.n	80055e8 <HAL_RCC_OscConfig+0x388>
 800560c:	e015      	b.n	800563a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560e:	f7fc ff7f 	bl	8002510 <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005614:	e00a      	b.n	800562c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005616:	f7fc ff7b 	bl	8002510 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	f241 3288 	movw	r2, #5000	; 0x1388
 8005624:	4293      	cmp	r3, r2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e121      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800562c:	4b3a      	ldr	r3, [pc, #232]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ed      	bne.n	8005616 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800563a:	7ffb      	ldrb	r3, [r7, #31]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d105      	bne.n	800564c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005640:	4b35      	ldr	r3, [pc, #212]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 8005642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005644:	4a34      	ldr	r2, [pc, #208]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 8005646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d03c      	beq.n	80056d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01c      	beq.n	800569a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005660:	4b2d      	ldr	r3, [pc, #180]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 8005662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005666:	4a2c      	ldr	r2, [pc, #176]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fc ff4e 	bl	8002510 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005678:	f7fc ff4a 	bl	8002510 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e0f2      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800568a:	4b23      	ldr	r3, [pc, #140]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 800568c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d0ef      	beq.n	8005678 <HAL_RCC_OscConfig+0x418>
 8005698:	e01b      	b.n	80056d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800569a:	4b1f      	ldr	r3, [pc, #124]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 800569c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056aa:	f7fc ff31 	bl	8002510 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056b2:	f7fc ff2d 	bl	8002510 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e0d5      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056c4:	4b14      	ldr	r3, [pc, #80]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80056c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1ef      	bne.n	80056b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 80c9 	beq.w	800586e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056dc:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 030c 	and.w	r3, r3, #12
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	f000 8083 	beq.w	80057f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d15e      	bne.n	80057b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f2:	4b09      	ldr	r3, [pc, #36]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a08      	ldr	r2, [pc, #32]	; (8005718 <HAL_RCC_OscConfig+0x4b8>)
 80056f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fe:	f7fc ff07 	bl	8002510 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005704:	e00c      	b.n	8005720 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005706:	f7fc ff03 	bl	8002510 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d905      	bls.n	8005720 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e0ab      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
 8005718:	40021000 	.word	0x40021000
 800571c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005720:	4b55      	ldr	r3, [pc, #340]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1ec      	bne.n	8005706 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800572c:	4b52      	ldr	r3, [pc, #328]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	4b52      	ldr	r3, [pc, #328]	; (800587c <HAL_RCC_OscConfig+0x61c>)
 8005732:	4013      	ands	r3, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	6a11      	ldr	r1, [r2, #32]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800573c:	3a01      	subs	r2, #1
 800573e:	0112      	lsls	r2, r2, #4
 8005740:	4311      	orrs	r1, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005746:	0212      	lsls	r2, r2, #8
 8005748:	4311      	orrs	r1, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800574e:	0852      	lsrs	r2, r2, #1
 8005750:	3a01      	subs	r2, #1
 8005752:	0552      	lsls	r2, r2, #21
 8005754:	4311      	orrs	r1, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800575a:	0852      	lsrs	r2, r2, #1
 800575c:	3a01      	subs	r2, #1
 800575e:	0652      	lsls	r2, r2, #25
 8005760:	4311      	orrs	r1, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005766:	06d2      	lsls	r2, r2, #27
 8005768:	430a      	orrs	r2, r1
 800576a:	4943      	ldr	r1, [pc, #268]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 800576c:	4313      	orrs	r3, r2
 800576e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005770:	4b41      	ldr	r3, [pc, #260]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a40      	ldr	r2, [pc, #256]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 8005776:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800577a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800577c:	4b3e      	ldr	r3, [pc, #248]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4a3d      	ldr	r2, [pc, #244]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 8005782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005786:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fc fec2 	bl	8002510 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005790:	f7fc febe 	bl	8002510 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e066      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a2:	4b35      	ldr	r3, [pc, #212]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0x530>
 80057ae:	e05e      	b.n	800586e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b0:	4b31      	ldr	r3, [pc, #196]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a30      	ldr	r2, [pc, #192]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 80057b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057bc:	f7fc fea8 	bl	8002510 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fc fea4 	bl	8002510 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e04c      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057d6:	4b28      	ldr	r3, [pc, #160]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80057e2:	4b25      	ldr	r3, [pc, #148]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	4924      	ldr	r1, [pc, #144]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 80057e8:	4b25      	ldr	r3, [pc, #148]	; (8005880 <HAL_RCC_OscConfig+0x620>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	60cb      	str	r3, [r1, #12]
 80057ee:	e03e      	b.n	800586e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e039      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80057fc:	4b1e      	ldr	r3, [pc, #120]	; (8005878 <HAL_RCC_OscConfig+0x618>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f003 0203 	and.w	r2, r3, #3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	429a      	cmp	r2, r3
 800580e:	d12c      	bne.n	800586a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	3b01      	subs	r3, #1
 800581c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581e:	429a      	cmp	r2, r3
 8005820:	d123      	bne.n	800586a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d11b      	bne.n	800586a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d113      	bne.n	800586a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	3b01      	subs	r3, #1
 8005850:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005852:	429a      	cmp	r2, r3
 8005854:	d109      	bne.n	800586a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	3b01      	subs	r3, #1
 8005864:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005866:	429a      	cmp	r2, r3
 8005868:	d001      	beq.n	800586e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40021000 	.word	0x40021000
 800587c:	019f800c 	.word	0x019f800c
 8005880:	feeefffc 	.word	0xfeeefffc

08005884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e11e      	b.n	8005ada <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800589c:	4b91      	ldr	r3, [pc, #580]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d910      	bls.n	80058cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b8e      	ldr	r3, [pc, #568]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 020f 	bic.w	r2, r3, #15
 80058b2:	498c      	ldr	r1, [pc, #560]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	4b8a      	ldr	r3, [pc, #552]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d001      	beq.n	80058cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e106      	b.n	8005ada <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d073      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d129      	bne.n	8005934 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e0:	4b81      	ldr	r3, [pc, #516]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0f4      	b.n	8005ada <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80058f0:	f000 f99e 	bl	8005c30 <RCC_GetSysClockFreqFromPLLSource>
 80058f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4a7c      	ldr	r2, [pc, #496]	; (8005aec <HAL_RCC_ClockConfig+0x268>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d93f      	bls.n	800597e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80058fe:	4b7a      	ldr	r3, [pc, #488]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d009      	beq.n	800591e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005912:	2b00      	cmp	r3, #0
 8005914:	d033      	beq.n	800597e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800591a:	2b00      	cmp	r3, #0
 800591c:	d12f      	bne.n	800597e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800591e:	4b72      	ldr	r3, [pc, #456]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005926:	4a70      	ldr	r2, [pc, #448]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800592e:	2380      	movs	r3, #128	; 0x80
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e024      	b.n	800597e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d107      	bne.n	800594c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800593c:	4b6a      	ldr	r3, [pc, #424]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0c6      	b.n	8005ada <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800594c:	4b66      	ldr	r3, [pc, #408]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0be      	b.n	8005ada <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800595c:	f000 f8ce 	bl	8005afc <HAL_RCC_GetSysClockFreq>
 8005960:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	4a61      	ldr	r2, [pc, #388]	; (8005aec <HAL_RCC_ClockConfig+0x268>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d909      	bls.n	800597e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800596a:	4b5f      	ldr	r3, [pc, #380]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005972:	4a5d      	ldr	r2, [pc, #372]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005978:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800597a:	2380      	movs	r3, #128	; 0x80
 800597c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800597e:	4b5a      	ldr	r3, [pc, #360]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f023 0203 	bic.w	r2, r3, #3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4957      	ldr	r1, [pc, #348]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 800598c:	4313      	orrs	r3, r2
 800598e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005990:	f7fc fdbe 	bl	8002510 <HAL_GetTick>
 8005994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005996:	e00a      	b.n	80059ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005998:	f7fc fdba 	bl	8002510 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e095      	b.n	8005ada <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ae:	4b4e      	ldr	r3, [pc, #312]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 020c 	and.w	r2, r3, #12
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	429a      	cmp	r2, r3
 80059be:	d1eb      	bne.n	8005998 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d023      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059d8:	4b43      	ldr	r3, [pc, #268]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	4a42      	ldr	r2, [pc, #264]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 80059de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80059f0:	4b3d      	ldr	r3, [pc, #244]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80059f8:	4a3b      	ldr	r2, [pc, #236]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 80059fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a00:	4b39      	ldr	r3, [pc, #228]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4936      	ldr	r1, [pc, #216]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	608b      	str	r3, [r1, #8]
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d105      	bne.n	8005a26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a1a:	4b33      	ldr	r3, [pc, #204]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	4a32      	ldr	r2, [pc, #200]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a26:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d21d      	bcs.n	8005a70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a34:	4b2b      	ldr	r3, [pc, #172]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f023 020f 	bic.w	r2, r3, #15
 8005a3c:	4929      	ldr	r1, [pc, #164]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a44:	f7fc fd64 	bl	8002510 <HAL_GetTick>
 8005a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a4a:	e00a      	b.n	8005a62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a4c:	f7fc fd60 	bl	8002510 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e03b      	b.n	8005ada <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a62:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <HAL_RCC_ClockConfig+0x260>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d1ed      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	4917      	ldr	r1, [pc, #92]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a9a:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	490f      	ldr	r1, [pc, #60]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005aae:	f000 f825 	bl	8005afc <HAL_RCC_GetSysClockFreq>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <HAL_RCC_ClockConfig+0x264>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	490c      	ldr	r1, [pc, #48]	; (8005af0 <HAL_RCC_ClockConfig+0x26c>)
 8005ac0:	5ccb      	ldrb	r3, [r1, r3]
 8005ac2:	f003 031f 	and.w	r3, r3, #31
 8005ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aca:	4a0a      	ldr	r2, [pc, #40]	; (8005af4 <HAL_RCC_ClockConfig+0x270>)
 8005acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ace:	4b0a      	ldr	r3, [pc, #40]	; (8005af8 <HAL_RCC_ClockConfig+0x274>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fc fcd0 	bl	8002478 <HAL_InitTick>
 8005ad8:	4603      	mov	r3, r0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40022000 	.word	0x40022000
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	04c4b400 	.word	0x04c4b400
 8005af0:	08008c04 	.word	0x08008c04
 8005af4:	20000028 	.word	0x20000028
 8005af8:	2000002c 	.word	0x2000002c

08005afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b02:	4b2c      	ldr	r3, [pc, #176]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d102      	bne.n	8005b14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b0e:	4b2a      	ldr	r3, [pc, #168]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e047      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b14:	4b27      	ldr	r3, [pc, #156]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f003 030c 	and.w	r3, r3, #12
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d102      	bne.n	8005b26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b20:	4b26      	ldr	r3, [pc, #152]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	e03e      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b26:	4b23      	ldr	r3, [pc, #140]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d136      	bne.n	8005ba0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b32:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	091b      	lsrs	r3, r3, #4
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	3301      	adds	r3, #1
 8005b48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d10c      	bne.n	8005b6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b50:	4a1a      	ldr	r2, [pc, #104]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b58:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b5a:	68d2      	ldr	r2, [r2, #12]
 8005b5c:	0a12      	lsrs	r2, r2, #8
 8005b5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	617b      	str	r3, [r7, #20]
      break;
 8005b68:	e00c      	b.n	8005b84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b6a:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b72:	4a10      	ldr	r2, [pc, #64]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b74:	68d2      	ldr	r2, [r2, #12]
 8005b76:	0a12      	lsrs	r2, r2, #8
 8005b78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b7c:	fb02 f303 	mul.w	r3, r2, r3
 8005b80:	617b      	str	r3, [r7, #20]
      break;
 8005b82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b84:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	0e5b      	lsrs	r3, r3, #25
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	3301      	adds	r3, #1
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	613b      	str	r3, [r7, #16]
 8005b9e:	e001      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ba4:	693b      	ldr	r3, [r7, #16]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	00f42400 	.word	0x00f42400
 8005bbc:	016e3600 	.word	0x016e3600

08005bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc4:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000028 	.word	0x20000028

08005bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bdc:	f7ff fff0 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005be0:	4602      	mov	r2, r0
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	4904      	ldr	r1, [pc, #16]	; (8005c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bee:	5ccb      	ldrb	r3, [r1, r3]
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	08008c14 	.word	0x08008c14

08005c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c08:	f7ff ffda 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	0adb      	lsrs	r3, r3, #11
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4904      	ldr	r1, [pc, #16]	; (8005c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	08008c14 	.word	0x08008c14

08005c30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c36:	4b1e      	ldr	r3, [pc, #120]	; (8005cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c40:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	091b      	lsrs	r3, r3, #4
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d10c      	bne.n	8005c6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c54:	4a17      	ldr	r2, [pc, #92]	; (8005cb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5c:	4a14      	ldr	r2, [pc, #80]	; (8005cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c5e:	68d2      	ldr	r2, [r2, #12]
 8005c60:	0a12      	lsrs	r2, r2, #8
 8005c62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c66:	fb02 f303 	mul.w	r3, r2, r3
 8005c6a:	617b      	str	r3, [r7, #20]
    break;
 8005c6c:	e00c      	b.n	8005c88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c6e:	4a12      	ldr	r2, [pc, #72]	; (8005cb8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	4a0e      	ldr	r2, [pc, #56]	; (8005cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c78:	68d2      	ldr	r2, [r2, #12]
 8005c7a:	0a12      	lsrs	r2, r2, #8
 8005c7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]
    break;
 8005c86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c88:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	0e5b      	lsrs	r3, r3, #25
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	3301      	adds	r3, #1
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005ca2:	687b      	ldr	r3, [r7, #4]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	016e3600 	.word	0x016e3600
 8005cb8:	00f42400 	.word	0x00f42400

08005cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cc8:	2300      	movs	r3, #0
 8005cca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 8098 	beq.w	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cde:	4b43      	ldr	r3, [pc, #268]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10d      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cea:	4b40      	ldr	r3, [pc, #256]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	4a3f      	ldr	r2, [pc, #252]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf6:	4b3d      	ldr	r3, [pc, #244]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	60bb      	str	r3, [r7, #8]
 8005d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d02:	2301      	movs	r3, #1
 8005d04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d06:	4b3a      	ldr	r3, [pc, #232]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a39      	ldr	r2, [pc, #228]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d12:	f7fc fbfd 	bl	8002510 <HAL_GetTick>
 8005d16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d18:	e009      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1a:	f7fc fbf9 	bl	8002510 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d902      	bls.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	74fb      	strb	r3, [r7, #19]
        break;
 8005d2c:	e005      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d2e:	4b30      	ldr	r3, [pc, #192]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0ef      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d3a:	7cfb      	ldrb	r3, [r7, #19]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d159      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d40:	4b2a      	ldr	r3, [pc, #168]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01e      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d019      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d5c:	4b23      	ldr	r3, [pc, #140]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d68:	4b20      	ldr	r3, [pc, #128]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d78:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7e:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d88:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d016      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9a:	f7fc fbb9 	bl	8002510 <HAL_GetTick>
 8005d9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005da0:	e00b      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005da2:	f7fc fbb5 	bl	8002510 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d902      	bls.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	74fb      	strb	r3, [r7, #19]
            break;
 8005db8:	e006      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0ec      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005dc8:	7cfb      	ldrb	r3, [r7, #19]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10b      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ddc:	4903      	ldr	r1, [pc, #12]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005de4:	e008      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005de6:	7cfb      	ldrb	r3, [r7, #19]
 8005de8:	74bb      	strb	r3, [r7, #18]
 8005dea:	e005      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005dec:	40021000 	.word	0x40021000
 8005df0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	7cfb      	ldrb	r3, [r7, #19]
 8005df6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005df8:	7c7b      	ldrb	r3, [r7, #17]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d105      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dfe:	4ba7      	ldr	r3, [pc, #668]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	4aa6      	ldr	r2, [pc, #664]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e16:	4ba1      	ldr	r3, [pc, #644]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1c:	f023 0203 	bic.w	r2, r3, #3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	499d      	ldr	r1, [pc, #628]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e38:	4b98      	ldr	r3, [pc, #608]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3e:	f023 020c 	bic.w	r2, r3, #12
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	4995      	ldr	r1, [pc, #596]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e5a:	4b90      	ldr	r3, [pc, #576]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	498c      	ldr	r1, [pc, #560]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e7c:	4b87      	ldr	r3, [pc, #540]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	4984      	ldr	r1, [pc, #528]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e9e:	4b7f      	ldr	r3, [pc, #508]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	497b      	ldr	r1, [pc, #492]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ec0:	4b76      	ldr	r3, [pc, #472]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	4973      	ldr	r1, [pc, #460]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ee2:	4b6e      	ldr	r3, [pc, #440]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	496a      	ldr	r1, [pc, #424]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f04:	4b65      	ldr	r3, [pc, #404]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	4962      	ldr	r1, [pc, #392]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f26:	4b5d      	ldr	r3, [pc, #372]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	4959      	ldr	r1, [pc, #356]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f48:	4b54      	ldr	r3, [pc, #336]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f4e:	f023 0203 	bic.w	r2, r3, #3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	4951      	ldr	r1, [pc, #324]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f6a:	4b4c      	ldr	r3, [pc, #304]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	4948      	ldr	r1, [pc, #288]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d015      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f8c:	4b43      	ldr	r3, [pc, #268]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	4940      	ldr	r1, [pc, #256]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005faa:	d105      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fac:	4b3b      	ldr	r3, [pc, #236]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	4a3a      	ldr	r2, [pc, #232]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d015      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fc4:	4b35      	ldr	r3, [pc, #212]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	4932      	ldr	r1, [pc, #200]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe2:	d105      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe4:	4b2d      	ldr	r3, [pc, #180]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4a2c      	ldr	r2, [pc, #176]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d015      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ffc:	4b27      	ldr	r3, [pc, #156]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006002:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	4924      	ldr	r1, [pc, #144]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800601a:	d105      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800601c:	4b1f      	ldr	r3, [pc, #124]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	4a1e      	ldr	r2, [pc, #120]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006022:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006026:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006034:	4b19      	ldr	r3, [pc, #100]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006042:	4916      	ldr	r1, [pc, #88]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006052:	d105      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006054:	4b11      	ldr	r3, [pc, #68]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	4a10      	ldr	r2, [pc, #64]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800605e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d019      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800606c:	4b0b      	ldr	r3, [pc, #44]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006072:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	4908      	ldr	r1, [pc, #32]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607c:	4313      	orrs	r3, r2
 800607e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800608a:	d109      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800608c:	4b03      	ldr	r3, [pc, #12]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	4a02      	ldr	r2, [pc, #8]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006096:	60d3      	str	r3, [r2, #12]
 8006098:	e002      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800609a:	bf00      	nop
 800609c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d015      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060ac:	4b29      	ldr	r3, [pc, #164]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ba:	4926      	ldr	r1, [pc, #152]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060ca:	d105      	bne.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060cc:	4b21      	ldr	r3, [pc, #132]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	4a20      	ldr	r2, [pc, #128]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d015      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80060e4:	4b1b      	ldr	r3, [pc, #108]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f2:	4918      	ldr	r1, [pc, #96]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006102:	d105      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006104:	4b13      	ldr	r3, [pc, #76]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	4a12      	ldr	r2, [pc, #72]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800610a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d015      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800611c:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800611e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612a:	490a      	ldr	r1, [pc, #40]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800613a:	d105      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	4a04      	ldr	r2, [pc, #16]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006146:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006148:	7cbb      	ldrb	r3, [r7, #18]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3718      	adds	r7, #24
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	40021000 	.word	0x40021000

08006158 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e0aa      	b.n	80062c0 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fb fcfe 	bl	8001b7c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80061a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061b2:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80061c2:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061cc:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061dc:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d012      	beq.n	800620c <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d107      	bne.n	80061fe <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061fa:	609a      	str	r2, [r3, #8]
 80061fc:	e006      	b.n	800620c <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800620a:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d104      	bne.n	800621e <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800621c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695a      	ldr	r2, [r3, #20]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1a      	ldr	r2, [r3, #32]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800625a:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800626c:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800626e:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006278:	d110      	bne.n	800629c <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8006286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800628a:	d107      	bne.n	800629c <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800629a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80062de:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80062e8:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 80062ea:	2180      	movs	r1, #128	; 0x80
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f805 	bl	80062fc <SMBUS_Enable_IRQ>

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800631a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006322:	2b38      	cmp	r3, #56	; 0x38
 8006324:	d103      	bne.n	800632e <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800632c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8006334:	2bf2      	cmp	r3, #242	; 0xf2
 8006336:	d103      	bne.n	8006340 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800633e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8006346:	2bd4      	cmp	r3, #212	; 0xd4
 8006348:	d103      	bne.n	8006352 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006350:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6819      	ldr	r1, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]
}
 8006362:	bf00      	nop
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e09d      	b.n	80064bc <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d108      	bne.n	800639a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006390:	d009      	beq.n	80063a6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	61da      	str	r2, [r3, #28]
 8006398:	e005      	b.n	80063a6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d106      	bne.n	80063c6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7fb fd01 	bl	8001dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2202      	movs	r2, #2
 80063ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063dc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063e6:	d902      	bls.n	80063ee <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	e002      	b.n	80063f4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80063fc:	d007      	beq.n	800640e <HAL_SPI_Init+0xa0>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006406:	d002      	beq.n	800640e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006450:	ea42 0103 	orr.w	r1, r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	0c1b      	lsrs	r3, r3, #16
 800646a:	f003 0204 	and.w	r2, r3, #4
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800648a:	ea42 0103 	orr.w	r1, r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	430a      	orrs	r2, r1
 800649a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	69da      	ldr	r2, [r3, #28]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e049      	b.n	800656a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fb fd8a 	bl	8002004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f000 fa5e 	bl	80069c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e049      	b.n	8006618 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d106      	bne.n	800659e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7fb fc79 	bl	8001e90 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f000 fa07 	bl	80069c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_TIM_OC_ConfigChannel+0x1e>
 800663a:	2302      	movs	r3, #2
 800663c:	e066      	b.n	800670c <HAL_TIM_OC_ConfigChannel+0xec>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b14      	cmp	r3, #20
 800664a:	d857      	bhi.n	80066fc <HAL_TIM_OC_ConfigChannel+0xdc>
 800664c:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <HAL_TIM_OC_ConfigChannel+0x34>)
 800664e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006652:	bf00      	nop
 8006654:	080066a9 	.word	0x080066a9
 8006658:	080066fd 	.word	0x080066fd
 800665c:	080066fd 	.word	0x080066fd
 8006660:	080066fd 	.word	0x080066fd
 8006664:	080066b7 	.word	0x080066b7
 8006668:	080066fd 	.word	0x080066fd
 800666c:	080066fd 	.word	0x080066fd
 8006670:	080066fd 	.word	0x080066fd
 8006674:	080066c5 	.word	0x080066c5
 8006678:	080066fd 	.word	0x080066fd
 800667c:	080066fd 	.word	0x080066fd
 8006680:	080066fd 	.word	0x080066fd
 8006684:	080066d3 	.word	0x080066d3
 8006688:	080066fd 	.word	0x080066fd
 800668c:	080066fd 	.word	0x080066fd
 8006690:	080066fd 	.word	0x080066fd
 8006694:	080066e1 	.word	0x080066e1
 8006698:	080066fd 	.word	0x080066fd
 800669c:	080066fd 	.word	0x080066fd
 80066a0:	080066fd 	.word	0x080066fd
 80066a4:	080066ef 	.word	0x080066ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fa3c 	bl	8006b2c <TIM_OC1_SetConfig>
      break;
 80066b4:	e025      	b.n	8006702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 facf 	bl	8006c60 <TIM_OC2_SetConfig>
      break;
 80066c2:	e01e      	b.n	8006702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68b9      	ldr	r1, [r7, #8]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fb5c 	bl	8006d88 <TIM_OC3_SetConfig>
      break;
 80066d0:	e017      	b.n	8006702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fbe7 	bl	8006eac <TIM_OC4_SetConfig>
      break;
 80066de:	e010      	b.n	8006702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fc74 	bl	8006fd4 <TIM_OC5_SetConfig>
      break;
 80066ec:	e009      	b.n	8006702 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fcd7 	bl	80070a8 <TIM_OC6_SetConfig>
      break;
 80066fa:	e002      	b.n	8006702 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006700:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_TIM_ConfigClockSource+0x1c>
 800672c:	2302      	movs	r3, #2
 800672e:	e0f6      	b.n	800691e <HAL_TIM_ConfigClockSource+0x20a>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2202      	movs	r2, #2
 800673c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800674e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800675a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a6f      	ldr	r2, [pc, #444]	; (8006928 <HAL_TIM_ConfigClockSource+0x214>)
 800676a:	4293      	cmp	r3, r2
 800676c:	f000 80c1 	beq.w	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006770:	4a6d      	ldr	r2, [pc, #436]	; (8006928 <HAL_TIM_ConfigClockSource+0x214>)
 8006772:	4293      	cmp	r3, r2
 8006774:	f200 80c6 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 8006778:	4a6c      	ldr	r2, [pc, #432]	; (800692c <HAL_TIM_ConfigClockSource+0x218>)
 800677a:	4293      	cmp	r3, r2
 800677c:	f000 80b9 	beq.w	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006780:	4a6a      	ldr	r2, [pc, #424]	; (800692c <HAL_TIM_ConfigClockSource+0x218>)
 8006782:	4293      	cmp	r3, r2
 8006784:	f200 80be 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 8006788:	4a69      	ldr	r2, [pc, #420]	; (8006930 <HAL_TIM_ConfigClockSource+0x21c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	f000 80b1 	beq.w	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006790:	4a67      	ldr	r2, [pc, #412]	; (8006930 <HAL_TIM_ConfigClockSource+0x21c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	f200 80b6 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 8006798:	4a66      	ldr	r2, [pc, #408]	; (8006934 <HAL_TIM_ConfigClockSource+0x220>)
 800679a:	4293      	cmp	r3, r2
 800679c:	f000 80a9 	beq.w	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 80067a0:	4a64      	ldr	r2, [pc, #400]	; (8006934 <HAL_TIM_ConfigClockSource+0x220>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	f200 80ae 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 80067a8:	4a63      	ldr	r2, [pc, #396]	; (8006938 <HAL_TIM_ConfigClockSource+0x224>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	f000 80a1 	beq.w	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 80067b0:	4a61      	ldr	r2, [pc, #388]	; (8006938 <HAL_TIM_ConfigClockSource+0x224>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	f200 80a6 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 80067b8:	4a60      	ldr	r2, [pc, #384]	; (800693c <HAL_TIM_ConfigClockSource+0x228>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	f000 8099 	beq.w	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 80067c0:	4a5e      	ldr	r2, [pc, #376]	; (800693c <HAL_TIM_ConfigClockSource+0x228>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	f200 809e 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 80067c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067cc:	f000 8091 	beq.w	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 80067d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067d4:	f200 8096 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 80067d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067dc:	f000 8089 	beq.w	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 80067e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e4:	f200 808e 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 80067e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ec:	d03e      	beq.n	800686c <HAL_TIM_ConfigClockSource+0x158>
 80067ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f2:	f200 8087 	bhi.w	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fa:	f000 8086 	beq.w	800690a <HAL_TIM_ConfigClockSource+0x1f6>
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006802:	d87f      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 8006804:	2b70      	cmp	r3, #112	; 0x70
 8006806:	d01a      	beq.n	800683e <HAL_TIM_ConfigClockSource+0x12a>
 8006808:	2b70      	cmp	r3, #112	; 0x70
 800680a:	d87b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 800680c:	2b60      	cmp	r3, #96	; 0x60
 800680e:	d050      	beq.n	80068b2 <HAL_TIM_ConfigClockSource+0x19e>
 8006810:	2b60      	cmp	r3, #96	; 0x60
 8006812:	d877      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 8006814:	2b50      	cmp	r3, #80	; 0x50
 8006816:	d03c      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x17e>
 8006818:	2b50      	cmp	r3, #80	; 0x50
 800681a:	d873      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d058      	beq.n	80068d2 <HAL_TIM_ConfigClockSource+0x1be>
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d86f      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 8006824:	2b30      	cmp	r3, #48	; 0x30
 8006826:	d064      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006828:	2b30      	cmp	r3, #48	; 0x30
 800682a:	d86b      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 800682c:	2b20      	cmp	r3, #32
 800682e:	d060      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006830:	2b20      	cmp	r3, #32
 8006832:	d867      	bhi.n	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d05c      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006838:	2b10      	cmp	r3, #16
 800683a:	d05a      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x1de>
 800683c:	e062      	b.n	8006904 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800684e:	f000 fdf3 	bl	8007438 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006860:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	609a      	str	r2, [r3, #8]
      break;
 800686a:	e04f      	b.n	800690c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800687c:	f000 fddc 	bl	8007438 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800688e:	609a      	str	r2, [r3, #8]
      break;
 8006890:	e03c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800689e:	461a      	mov	r2, r3
 80068a0:	f000 fd4e 	bl	8007340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2150      	movs	r1, #80	; 0x50
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fda7 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 80068b0:	e02c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068be:	461a      	mov	r2, r3
 80068c0:	f000 fd6d 	bl	800739e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2160      	movs	r1, #96	; 0x60
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fd97 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 80068d0:	e01c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068de:	461a      	mov	r2, r3
 80068e0:	f000 fd2e 	bl	8007340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2140      	movs	r1, #64	; 0x40
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fd87 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 80068f0:	e00c      	b.n	800690c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4619      	mov	r1, r3
 80068fc:	4610      	mov	r0, r2
 80068fe:	f000 fd7e 	bl	80073fe <TIM_ITRx_SetConfig>
      break;
 8006902:	e003      	b.n	800690c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e000      	b.n	800690c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800690a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	00100070 	.word	0x00100070
 800692c:	00100060 	.word	0x00100060
 8006930:	00100050 	.word	0x00100050
 8006934:	00100040 	.word	0x00100040
 8006938:	00100030 	.word	0x00100030
 800693c:	00100020 	.word	0x00100020

08006940 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006954:	2302      	movs	r3, #2
 8006956:	e031      	b.n	80069bc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fc08 	bl	8007180 <TIM_SlaveTimer_SetConfig>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e018      	b.n	80069bc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006998:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069a8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a4c      	ldr	r2, [pc, #304]	; (8006b08 <TIM_Base_SetConfig+0x144>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d017      	beq.n	8006a0c <TIM_Base_SetConfig+0x48>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e2:	d013      	beq.n	8006a0c <TIM_Base_SetConfig+0x48>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a49      	ldr	r2, [pc, #292]	; (8006b0c <TIM_Base_SetConfig+0x148>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00f      	beq.n	8006a0c <TIM_Base_SetConfig+0x48>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a48      	ldr	r2, [pc, #288]	; (8006b10 <TIM_Base_SetConfig+0x14c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00b      	beq.n	8006a0c <TIM_Base_SetConfig+0x48>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a47      	ldr	r2, [pc, #284]	; (8006b14 <TIM_Base_SetConfig+0x150>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d007      	beq.n	8006a0c <TIM_Base_SetConfig+0x48>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a46      	ldr	r2, [pc, #280]	; (8006b18 <TIM_Base_SetConfig+0x154>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d003      	beq.n	8006a0c <TIM_Base_SetConfig+0x48>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a45      	ldr	r2, [pc, #276]	; (8006b1c <TIM_Base_SetConfig+0x158>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d108      	bne.n	8006a1e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a39      	ldr	r2, [pc, #228]	; (8006b08 <TIM_Base_SetConfig+0x144>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d023      	beq.n	8006a6e <TIM_Base_SetConfig+0xaa>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2c:	d01f      	beq.n	8006a6e <TIM_Base_SetConfig+0xaa>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a36      	ldr	r2, [pc, #216]	; (8006b0c <TIM_Base_SetConfig+0x148>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01b      	beq.n	8006a6e <TIM_Base_SetConfig+0xaa>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a35      	ldr	r2, [pc, #212]	; (8006b10 <TIM_Base_SetConfig+0x14c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d017      	beq.n	8006a6e <TIM_Base_SetConfig+0xaa>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a34      	ldr	r2, [pc, #208]	; (8006b14 <TIM_Base_SetConfig+0x150>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <TIM_Base_SetConfig+0xaa>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a33      	ldr	r2, [pc, #204]	; (8006b18 <TIM_Base_SetConfig+0x154>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00f      	beq.n	8006a6e <TIM_Base_SetConfig+0xaa>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a33      	ldr	r2, [pc, #204]	; (8006b20 <TIM_Base_SetConfig+0x15c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00b      	beq.n	8006a6e <TIM_Base_SetConfig+0xaa>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a32      	ldr	r2, [pc, #200]	; (8006b24 <TIM_Base_SetConfig+0x160>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d007      	beq.n	8006a6e <TIM_Base_SetConfig+0xaa>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a31      	ldr	r2, [pc, #196]	; (8006b28 <TIM_Base_SetConfig+0x164>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d003      	beq.n	8006a6e <TIM_Base_SetConfig+0xaa>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a2c      	ldr	r2, [pc, #176]	; (8006b1c <TIM_Base_SetConfig+0x158>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d108      	bne.n	8006a80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <TIM_Base_SetConfig+0x144>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d013      	beq.n	8006ad4 <TIM_Base_SetConfig+0x110>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a1a      	ldr	r2, [pc, #104]	; (8006b18 <TIM_Base_SetConfig+0x154>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00f      	beq.n	8006ad4 <TIM_Base_SetConfig+0x110>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a1a      	ldr	r2, [pc, #104]	; (8006b20 <TIM_Base_SetConfig+0x15c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00b      	beq.n	8006ad4 <TIM_Base_SetConfig+0x110>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a19      	ldr	r2, [pc, #100]	; (8006b24 <TIM_Base_SetConfig+0x160>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d007      	beq.n	8006ad4 <TIM_Base_SetConfig+0x110>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a18      	ldr	r2, [pc, #96]	; (8006b28 <TIM_Base_SetConfig+0x164>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <TIM_Base_SetConfig+0x110>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a13      	ldr	r2, [pc, #76]	; (8006b1c <TIM_Base_SetConfig+0x158>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d103      	bne.n	8006adc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d105      	bne.n	8006afa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	611a      	str	r2, [r3, #16]
  }
}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40012c00 	.word	0x40012c00
 8006b0c:	40000400 	.word	0x40000400
 8006b10:	40000800 	.word	0x40000800
 8006b14:	40000c00 	.word	0x40000c00
 8006b18:	40013400 	.word	0x40013400
 8006b1c:	40015000 	.word	0x40015000
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40014400 	.word	0x40014400
 8006b28:	40014800 	.word	0x40014800

08006b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	f023 0201 	bic.w	r2, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0303 	bic.w	r3, r3, #3
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f023 0302 	bic.w	r3, r3, #2
 8006b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a30      	ldr	r2, [pc, #192]	; (8006c48 <TIM_OC1_SetConfig+0x11c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d013      	beq.n	8006bb4 <TIM_OC1_SetConfig+0x88>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a2f      	ldr	r2, [pc, #188]	; (8006c4c <TIM_OC1_SetConfig+0x120>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00f      	beq.n	8006bb4 <TIM_OC1_SetConfig+0x88>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a2e      	ldr	r2, [pc, #184]	; (8006c50 <TIM_OC1_SetConfig+0x124>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00b      	beq.n	8006bb4 <TIM_OC1_SetConfig+0x88>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a2d      	ldr	r2, [pc, #180]	; (8006c54 <TIM_OC1_SetConfig+0x128>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d007      	beq.n	8006bb4 <TIM_OC1_SetConfig+0x88>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <TIM_OC1_SetConfig+0x12c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_OC1_SetConfig+0x88>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a2b      	ldr	r2, [pc, #172]	; (8006c5c <TIM_OC1_SetConfig+0x130>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d10c      	bne.n	8006bce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f023 0308 	bic.w	r3, r3, #8
 8006bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f023 0304 	bic.w	r3, r3, #4
 8006bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <TIM_OC1_SetConfig+0x11c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d013      	beq.n	8006bfe <TIM_OC1_SetConfig+0xd2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <TIM_OC1_SetConfig+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00f      	beq.n	8006bfe <TIM_OC1_SetConfig+0xd2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a1b      	ldr	r2, [pc, #108]	; (8006c50 <TIM_OC1_SetConfig+0x124>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00b      	beq.n	8006bfe <TIM_OC1_SetConfig+0xd2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a1a      	ldr	r2, [pc, #104]	; (8006c54 <TIM_OC1_SetConfig+0x128>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d007      	beq.n	8006bfe <TIM_OC1_SetConfig+0xd2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a19      	ldr	r2, [pc, #100]	; (8006c58 <TIM_OC1_SetConfig+0x12c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_OC1_SetConfig+0xd2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a18      	ldr	r2, [pc, #96]	; (8006c5c <TIM_OC1_SetConfig+0x130>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d111      	bne.n	8006c22 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	621a      	str	r2, [r3, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40012c00 	.word	0x40012c00
 8006c4c:	40013400 	.word	0x40013400
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40014400 	.word	0x40014400
 8006c58:	40014800 	.word	0x40014800
 8006c5c:	40015000 	.word	0x40015000

08006c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f023 0210 	bic.w	r2, r3, #16
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0320 	bic.w	r3, r3, #32
 8006cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a2c      	ldr	r2, [pc, #176]	; (8006d70 <TIM_OC2_SetConfig+0x110>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d007      	beq.n	8006cd4 <TIM_OC2_SetConfig+0x74>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a2b      	ldr	r2, [pc, #172]	; (8006d74 <TIM_OC2_SetConfig+0x114>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_OC2_SetConfig+0x74>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a2a      	ldr	r2, [pc, #168]	; (8006d78 <TIM_OC2_SetConfig+0x118>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d10d      	bne.n	8006cf0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a1f      	ldr	r2, [pc, #124]	; (8006d70 <TIM_OC2_SetConfig+0x110>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d013      	beq.n	8006d20 <TIM_OC2_SetConfig+0xc0>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a1e      	ldr	r2, [pc, #120]	; (8006d74 <TIM_OC2_SetConfig+0x114>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00f      	beq.n	8006d20 <TIM_OC2_SetConfig+0xc0>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a1e      	ldr	r2, [pc, #120]	; (8006d7c <TIM_OC2_SetConfig+0x11c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00b      	beq.n	8006d20 <TIM_OC2_SetConfig+0xc0>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a1d      	ldr	r2, [pc, #116]	; (8006d80 <TIM_OC2_SetConfig+0x120>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d007      	beq.n	8006d20 <TIM_OC2_SetConfig+0xc0>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a1c      	ldr	r2, [pc, #112]	; (8006d84 <TIM_OC2_SetConfig+0x124>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_OC2_SetConfig+0xc0>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <TIM_OC2_SetConfig+0x118>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d113      	bne.n	8006d48 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685a      	ldr	r2, [r3, #4]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	621a      	str	r2, [r3, #32]
}
 8006d62:	bf00      	nop
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	40012c00 	.word	0x40012c00
 8006d74:	40013400 	.word	0x40013400
 8006d78:	40015000 	.word	0x40015000
 8006d7c:	40014000 	.word	0x40014000
 8006d80:	40014400 	.word	0x40014400
 8006d84:	40014800 	.word	0x40014800

08006d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0303 	bic.w	r3, r3, #3
 8006dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a2b      	ldr	r2, [pc, #172]	; (8006e94 <TIM_OC3_SetConfig+0x10c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d007      	beq.n	8006dfa <TIM_OC3_SetConfig+0x72>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a2a      	ldr	r2, [pc, #168]	; (8006e98 <TIM_OC3_SetConfig+0x110>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_OC3_SetConfig+0x72>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a29      	ldr	r2, [pc, #164]	; (8006e9c <TIM_OC3_SetConfig+0x114>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10d      	bne.n	8006e16 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a1e      	ldr	r2, [pc, #120]	; (8006e94 <TIM_OC3_SetConfig+0x10c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d013      	beq.n	8006e46 <TIM_OC3_SetConfig+0xbe>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a1d      	ldr	r2, [pc, #116]	; (8006e98 <TIM_OC3_SetConfig+0x110>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00f      	beq.n	8006e46 <TIM_OC3_SetConfig+0xbe>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a1d      	ldr	r2, [pc, #116]	; (8006ea0 <TIM_OC3_SetConfig+0x118>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00b      	beq.n	8006e46 <TIM_OC3_SetConfig+0xbe>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a1c      	ldr	r2, [pc, #112]	; (8006ea4 <TIM_OC3_SetConfig+0x11c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d007      	beq.n	8006e46 <TIM_OC3_SetConfig+0xbe>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a1b      	ldr	r2, [pc, #108]	; (8006ea8 <TIM_OC3_SetConfig+0x120>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d003      	beq.n	8006e46 <TIM_OC3_SetConfig+0xbe>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a16      	ldr	r2, [pc, #88]	; (8006e9c <TIM_OC3_SetConfig+0x114>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d113      	bne.n	8006e6e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	621a      	str	r2, [r3, #32]
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40012c00 	.word	0x40012c00
 8006e98:	40013400 	.word	0x40013400
 8006e9c:	40015000 	.word	0x40015000
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40014400 	.word	0x40014400
 8006ea8:	40014800 	.word	0x40014800

08006eac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1b      	ldr	r3, [r3, #32]
 8006ec0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	021b      	lsls	r3, r3, #8
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	031b      	lsls	r3, r3, #12
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <TIM_OC4_SetConfig+0x110>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d007      	beq.n	8006f20 <TIM_OC4_SetConfig+0x74>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a2b      	ldr	r2, [pc, #172]	; (8006fc0 <TIM_OC4_SetConfig+0x114>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_OC4_SetConfig+0x74>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a2a      	ldr	r2, [pc, #168]	; (8006fc4 <TIM_OC4_SetConfig+0x118>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d10d      	bne.n	8006f3c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	031b      	lsls	r3, r3, #12
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a1f      	ldr	r2, [pc, #124]	; (8006fbc <TIM_OC4_SetConfig+0x110>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d013      	beq.n	8006f6c <TIM_OC4_SetConfig+0xc0>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a1e      	ldr	r2, [pc, #120]	; (8006fc0 <TIM_OC4_SetConfig+0x114>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00f      	beq.n	8006f6c <TIM_OC4_SetConfig+0xc0>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <TIM_OC4_SetConfig+0x11c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00b      	beq.n	8006f6c <TIM_OC4_SetConfig+0xc0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a1d      	ldr	r2, [pc, #116]	; (8006fcc <TIM_OC4_SetConfig+0x120>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d007      	beq.n	8006f6c <TIM_OC4_SetConfig+0xc0>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a1c      	ldr	r2, [pc, #112]	; (8006fd0 <TIM_OC4_SetConfig+0x124>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_OC4_SetConfig+0xc0>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a17      	ldr	r2, [pc, #92]	; (8006fc4 <TIM_OC4_SetConfig+0x118>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d113      	bne.n	8006f94 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f72:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f7a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	019b      	lsls	r3, r3, #6
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	019b      	lsls	r3, r3, #6
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	621a      	str	r2, [r3, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	40012c00 	.word	0x40012c00
 8006fc0:	40013400 	.word	0x40013400
 8006fc4:	40015000 	.word	0x40015000
 8006fc8:	40014000 	.word	0x40014000
 8006fcc:	40014400 	.word	0x40014400
 8006fd0:	40014800 	.word	0x40014800

08006fd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a19      	ldr	r2, [pc, #100]	; (8007090 <TIM_OC5_SetConfig+0xbc>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d013      	beq.n	8007056 <TIM_OC5_SetConfig+0x82>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a18      	ldr	r2, [pc, #96]	; (8007094 <TIM_OC5_SetConfig+0xc0>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00f      	beq.n	8007056 <TIM_OC5_SetConfig+0x82>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a17      	ldr	r2, [pc, #92]	; (8007098 <TIM_OC5_SetConfig+0xc4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d00b      	beq.n	8007056 <TIM_OC5_SetConfig+0x82>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a16      	ldr	r2, [pc, #88]	; (800709c <TIM_OC5_SetConfig+0xc8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d007      	beq.n	8007056 <TIM_OC5_SetConfig+0x82>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a15      	ldr	r2, [pc, #84]	; (80070a0 <TIM_OC5_SetConfig+0xcc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d003      	beq.n	8007056 <TIM_OC5_SetConfig+0x82>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a14      	ldr	r2, [pc, #80]	; (80070a4 <TIM_OC5_SetConfig+0xd0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d109      	bne.n	800706a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800705c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	621a      	str	r2, [r3, #32]
}
 8007084:	bf00      	nop
 8007086:	371c      	adds	r7, #28
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	40012c00 	.word	0x40012c00
 8007094:	40013400 	.word	0x40013400
 8007098:	40014000 	.word	0x40014000
 800709c:	40014400 	.word	0x40014400
 80070a0:	40014800 	.word	0x40014800
 80070a4:	40015000 	.word	0x40015000

080070a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80070ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	051b      	lsls	r3, r3, #20
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a1a      	ldr	r2, [pc, #104]	; (8007168 <TIM_OC6_SetConfig+0xc0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d013      	beq.n	800712c <TIM_OC6_SetConfig+0x84>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a19      	ldr	r2, [pc, #100]	; (800716c <TIM_OC6_SetConfig+0xc4>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00f      	beq.n	800712c <TIM_OC6_SetConfig+0x84>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a18      	ldr	r2, [pc, #96]	; (8007170 <TIM_OC6_SetConfig+0xc8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00b      	beq.n	800712c <TIM_OC6_SetConfig+0x84>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a17      	ldr	r2, [pc, #92]	; (8007174 <TIM_OC6_SetConfig+0xcc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d007      	beq.n	800712c <TIM_OC6_SetConfig+0x84>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a16      	ldr	r2, [pc, #88]	; (8007178 <TIM_OC6_SetConfig+0xd0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d003      	beq.n	800712c <TIM_OC6_SetConfig+0x84>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a15      	ldr	r2, [pc, #84]	; (800717c <TIM_OC6_SetConfig+0xd4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d109      	bne.n	8007140 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007132:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	029b      	lsls	r3, r3, #10
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	4313      	orrs	r3, r2
 800713e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40013400 	.word	0x40013400
 8007170:	40014000 	.word	0x40014000
 8007174:	40014400 	.word	0x40014400
 8007178:	40014800 	.word	0x40014800
 800717c:	40015000 	.word	0x40015000

08007180 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800719c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b2:	f023 0307 	bic.w	r3, r3, #7
 80071b6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	4a56      	ldr	r2, [pc, #344]	; (8007328 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	f000 80a2 	beq.w	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 80071d6:	4a54      	ldr	r2, [pc, #336]	; (8007328 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	f200 809b 	bhi.w	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 80071de:	4a53      	ldr	r2, [pc, #332]	; (800732c <TIM_SlaveTimer_SetConfig+0x1ac>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	f000 809a 	beq.w	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 80071e6:	4a51      	ldr	r2, [pc, #324]	; (800732c <TIM_SlaveTimer_SetConfig+0x1ac>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	f200 8093 	bhi.w	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 80071ee:	4a50      	ldr	r2, [pc, #320]	; (8007330 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	f000 8092 	beq.w	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 80071f6:	4a4e      	ldr	r2, [pc, #312]	; (8007330 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	f200 808b 	bhi.w	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 80071fe:	4a4d      	ldr	r2, [pc, #308]	; (8007334 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	f000 808a 	beq.w	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 8007206:	4a4b      	ldr	r2, [pc, #300]	; (8007334 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	f200 8083 	bhi.w	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 800720e:	4a4a      	ldr	r2, [pc, #296]	; (8007338 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007210:	4293      	cmp	r3, r2
 8007212:	f000 8082 	beq.w	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 8007216:	4a48      	ldr	r2, [pc, #288]	; (8007338 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d87b      	bhi.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 800721c:	4a47      	ldr	r2, [pc, #284]	; (800733c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d07b      	beq.n	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 8007222:	4a46      	ldr	r2, [pc, #280]	; (800733c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d875      	bhi.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 8007228:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800722c:	d075      	beq.n	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 800722e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007232:	d86f      	bhi.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 8007234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007238:	d06f      	beq.n	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 800723a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800723e:	d869      	bhi.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 8007240:	2b70      	cmp	r3, #112	; 0x70
 8007242:	d01a      	beq.n	800727a <TIM_SlaveTimer_SetConfig+0xfa>
 8007244:	2b70      	cmp	r3, #112	; 0x70
 8007246:	d865      	bhi.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 8007248:	2b60      	cmp	r3, #96	; 0x60
 800724a:	d059      	beq.n	8007300 <TIM_SlaveTimer_SetConfig+0x180>
 800724c:	2b60      	cmp	r3, #96	; 0x60
 800724e:	d861      	bhi.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 8007250:	2b50      	cmp	r3, #80	; 0x50
 8007252:	d04b      	beq.n	80072ec <TIM_SlaveTimer_SetConfig+0x16c>
 8007254:	2b50      	cmp	r3, #80	; 0x50
 8007256:	d85d      	bhi.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d019      	beq.n	8007290 <TIM_SlaveTimer_SetConfig+0x110>
 800725c:	2b40      	cmp	r3, #64	; 0x40
 800725e:	d859      	bhi.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 8007260:	2b30      	cmp	r3, #48	; 0x30
 8007262:	d05a      	beq.n	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 8007264:	2b30      	cmp	r3, #48	; 0x30
 8007266:	d855      	bhi.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 8007268:	2b20      	cmp	r3, #32
 800726a:	d056      	beq.n	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 800726c:	2b20      	cmp	r3, #32
 800726e:	d851      	bhi.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
 8007270:	2b00      	cmp	r3, #0
 8007272:	d052      	beq.n	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 8007274:	2b10      	cmp	r3, #16
 8007276:	d050      	beq.n	800731a <TIM_SlaveTimer_SetConfig+0x19a>
 8007278:	e04c      	b.n	8007314 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800728a:	f000 f8d5 	bl	8007438 <TIM_ETR_SetConfig>
      break;
 800728e:	e045      	b.n	800731c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b05      	cmp	r3, #5
 8007296:	d004      	beq.n	80072a2 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800729c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80072a0:	d101      	bne.n	80072a6 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e03b      	b.n	800731e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6a1a      	ldr	r2, [r3, #32]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0201 	bic.w	r2, r2, #1
 80072bc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072cc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	011b      	lsls	r3, r3, #4
 80072d4:	68ba      	ldr	r2, [r7, #8]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	621a      	str	r2, [r3, #32]
      break;
 80072ea:	e017      	b.n	800731c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f8:	461a      	mov	r2, r3
 80072fa:	f000 f821 	bl	8007340 <TIM_TI1_ConfigInputStage>
      break;
 80072fe:	e00d      	b.n	800731c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800730c:	461a      	mov	r2, r3
 800730e:	f000 f846 	bl	800739e <TIM_TI2_ConfigInputStage>
      break;
 8007312:	e003      	b.n	800731c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	75fb      	strb	r3, [r7, #23]
      break;
 8007318:	e000      	b.n	800731c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800731a:	bf00      	nop
  }

  return status;
 800731c:	7dfb      	ldrb	r3, [r7, #23]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	00100070 	.word	0x00100070
 800732c:	00100060 	.word	0x00100060
 8007330:	00100050 	.word	0x00100050
 8007334:	00100040 	.word	0x00100040
 8007338:	00100030 	.word	0x00100030
 800733c:	00100020 	.word	0x00100020

08007340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	f023 0201 	bic.w	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800736a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f023 030a 	bic.w	r3, r3, #10
 800737c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	621a      	str	r2, [r3, #32]
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800739e:	b480      	push	{r7}
 80073a0:	b087      	sub	sp, #28
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	f023 0210 	bic.w	r2, r3, #16
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	031b      	lsls	r3, r3, #12
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073fe:	b480      	push	{r7}
 8007400:	b085      	sub	sp, #20
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	f043 0307 	orr.w	r3, r3, #7
 8007424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	609a      	str	r2, [r3, #8]
}
 800742c:	bf00      	nop
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	021a      	lsls	r2, r3, #8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	431a      	orrs	r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4313      	orrs	r3, r2
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	609a      	str	r2, [r3, #8]
}
 800746c:	bf00      	nop
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800748c:	2302      	movs	r3, #2
 800748e:	e074      	b.n	800757a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a34      	ldr	r2, [pc, #208]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d009      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a33      	ldr	r2, [pc, #204]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d004      	beq.n	80074ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a31      	ldr	r2, [pc, #196]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d108      	bne.n	80074e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a21      	ldr	r2, [pc, #132]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d022      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007510:	d01d      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a1f      	ldr	r2, [pc, #124]	; (8007594 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d018      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1d      	ldr	r2, [pc, #116]	; (8007598 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d013      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1c      	ldr	r2, [pc, #112]	; (800759c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00e      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a15      	ldr	r2, [pc, #84]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d009      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a18      	ldr	r2, [pc, #96]	; (80075a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d004      	beq.n	800754e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a11      	ldr	r2, [pc, #68]	; (8007590 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d10c      	bne.n	8007568 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	4313      	orrs	r3, r2
 800755e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	40012c00 	.word	0x40012c00
 800758c:	40013400 	.word	0x40013400
 8007590:	40015000 	.word	0x40015000
 8007594:	40000400 	.word	0x40000400
 8007598:	40000800 	.word	0x40000800
 800759c:	40000c00 	.word	0x40000c00
 80075a0:	40014000 	.word	0x40014000

080075a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075bc:	2302      	movs	r3, #2
 80075be:	e078      	b.n	80076b2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	4313      	orrs	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	041b      	lsls	r3, r3, #16
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	4313      	orrs	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1c      	ldr	r2, [pc, #112]	; (80076c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d009      	beq.n	8007666 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1b      	ldr	r2, [pc, #108]	; (80076c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d004      	beq.n	8007666 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a19      	ldr	r2, [pc, #100]	; (80076c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d11c      	bne.n	80076a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	051b      	lsls	r3, r3, #20
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	4313      	orrs	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40012c00 	.word	0x40012c00
 80076c4:	40013400 	.word	0x40013400
 80076c8:	40015000 	.word	0x40015000

080076cc <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b08b      	sub	sp, #44	; 0x2c
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_TIMEx_ConfigBreakInput+0x20>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e10b      	b.n	8007904 <HAL_TIMEx_ConfigBreakInput+0x238>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b80      	cmp	r3, #128	; 0x80
 80076fa:	f000 8096 	beq.w	800782a <HAL_TIMEx_ConfigBreakInput+0x15e>
 80076fe:	2b80      	cmp	r3, #128	; 0x80
 8007700:	f200 809c 	bhi.w	800783c <HAL_TIMEx_ConfigBreakInput+0x170>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d849      	bhi.n	800779c <HAL_TIMEx_ConfigBreakInput+0xd0>
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8097 	beq.w	800783c <HAL_TIMEx_ConfigBreakInput+0x170>
 800770e:	3b01      	subs	r3, #1
 8007710:	2b1f      	cmp	r3, #31
 8007712:	f200 8093 	bhi.w	800783c <HAL_TIMEx_ConfigBreakInput+0x170>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <HAL_TIMEx_ConfigBreakInput+0x50>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	080077a3 	.word	0x080077a3
 8007720:	080077b7 	.word	0x080077b7
 8007724:	0800783d 	.word	0x0800783d
 8007728:	080077cb 	.word	0x080077cb
 800772c:	0800783d 	.word	0x0800783d
 8007730:	0800783d 	.word	0x0800783d
 8007734:	0800783d 	.word	0x0800783d
 8007738:	080077df 	.word	0x080077df
 800773c:	0800783d 	.word	0x0800783d
 8007740:	0800783d 	.word	0x0800783d
 8007744:	0800783d 	.word	0x0800783d
 8007748:	0800783d 	.word	0x0800783d
 800774c:	0800783d 	.word	0x0800783d
 8007750:	0800783d 	.word	0x0800783d
 8007754:	0800783d 	.word	0x0800783d
 8007758:	080077f3 	.word	0x080077f3
 800775c:	0800783d 	.word	0x0800783d
 8007760:	0800783d 	.word	0x0800783d
 8007764:	0800783d 	.word	0x0800783d
 8007768:	0800783d 	.word	0x0800783d
 800776c:	0800783d 	.word	0x0800783d
 8007770:	0800783d 	.word	0x0800783d
 8007774:	0800783d 	.word	0x0800783d
 8007778:	0800783d 	.word	0x0800783d
 800777c:	0800783d 	.word	0x0800783d
 8007780:	0800783d 	.word	0x0800783d
 8007784:	0800783d 	.word	0x0800783d
 8007788:	0800783d 	.word	0x0800783d
 800778c:	0800783d 	.word	0x0800783d
 8007790:	0800783d 	.word	0x0800783d
 8007794:	0800783d 	.word	0x0800783d
 8007798:	08007807 	.word	0x08007807
 800779c:	2b40      	cmp	r3, #64	; 0x40
 800779e:	d03b      	beq.n	8007818 <HAL_TIMEx_ConfigBreakInput+0x14c>
 80077a0:	e04c      	b.n	800783c <HAL_TIMEx_ConfigBreakInput+0x170>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80077a2:	2301      	movs	r3, #1
 80077a4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 80077a6:	2300      	movs	r3, #0
 80077a8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80077aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ae:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80077b0:	2309      	movs	r3, #9
 80077b2:	617b      	str	r3, [r7, #20]
      break;
 80077b4:	e04b      	b.n	800784e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 80077b6:	2302      	movs	r3, #2
 80077b8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 80077ba:	2301      	movs	r3, #1
 80077bc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 80077be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80077c4:	230a      	movs	r3, #10
 80077c6:	617b      	str	r3, [r7, #20]
      break;
 80077c8:	e041      	b.n	800784e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80077ca:	2304      	movs	r3, #4
 80077cc:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80077ce:	2302      	movs	r3, #2
 80077d0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80077d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077d6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80077d8:	230b      	movs	r3, #11
 80077da:	617b      	str	r3, [r7, #20]
      break;
 80077dc:	e037      	b.n	800784e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 80077de:	2308      	movs	r3, #8
 80077e0:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 80077e2:	2303      	movs	r3, #3
 80077e4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 80077e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077ea:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 80077ec:	230c      	movs	r3, #12
 80077ee:	617b      	str	r3, [r7, #20]
      break;
 80077f0:	e02d      	b.n	800784e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 80077f2:	2310      	movs	r3, #16
 80077f4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80077f6:	2304      	movs	r3, #4
 80077f8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80077fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80077fe:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8007800:	230d      	movs	r3, #13
 8007802:	617b      	str	r3, [r7, #20]
      break;
 8007804:	e023      	b.n	800784e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#if defined (COMP5)
    case TIM_BREAKINPUTSOURCE_COMP5:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP5E;
 8007806:	2320      	movs	r3, #32
 8007808:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 800780a:	2305      	movs	r3, #5
 800780c:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	617b      	str	r3, [r7, #20]
      break;
 8007816:	e01a      	b.n	800784e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP5 */
#if defined (COMP6)
    case TIM_BREAKINPUTSOURCE_COMP6:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP6E;
 8007818:	2340      	movs	r3, #64	; 0x40
 800781a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 800781c:	2306      	movs	r3, #6
 800781e:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	617b      	str	r3, [r7, #20]
      break;
 8007828:	e011      	b.n	800784e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */
#if defined (COMP7)
    case TIM_BREAKINPUTSOURCE_COMP7:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
 800782a:	2380      	movs	r3, #128	; 0x80
 800782c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 800782e:	2307      	movs	r3, #7
 8007830:	61bb      	str	r3, [r7, #24]
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]
      break;
 800783a:	e008      	b.n	800784e <HAL_TIMEx_ConfigBreakInput+0x182>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
      break;
 800784c:	bf00      	nop
    }
  }

  switch (BreakInput)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d003      	beq.n	800785c <HAL_TIMEx_ConfigBreakInput+0x190>
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d025      	beq.n	80078a6 <HAL_TIMEx_ConfigBreakInput+0x1da>
 800785a:	e049      	b.n	80078f0 <HAL_TIMEx_ConfigBreakInput+0x224>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007862:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	43db      	mvns	r3, r3
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4013      	ands	r3, r2
 800786c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	409a      	lsls	r2, r3
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	4013      	ands	r3, r2
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	43db      	mvns	r3, r3
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	4013      	ands	r3, r2
 8007888:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	409a      	lsls	r2, r3
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4013      	ands	r3, r2
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	4313      	orrs	r3, r2
 800789a:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80078a4:	e028      	b.n	80078f8 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ac:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	43db      	mvns	r3, r3
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	4013      	ands	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	409a      	lsls	r2, r3
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	4013      	ands	r3, r2
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	43db      	mvns	r3, r3
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4013      	ands	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	409a      	lsls	r2, r3
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4013      	ands	r3, r2
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80078ee:	e003      	b.n	80078f8 <HAL_TIMEx_ConfigBreakInput+0x22c>
    }
    default:
      status = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80078f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007904:	4618      	mov	r0, r3
 8007906:	372c      	adds	r7, #44	; 0x2c
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e042      	b.n	80079a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7fa fc95 	bl	8002264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2224      	movs	r2, #36	; 0x24
 800793e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0201 	bic.w	r2, r2, #1
 8007950:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fb24 	bl	8007fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f825 	bl	80079b0 <UART_SetConfig>
 8007966:	4603      	mov	r3, r0
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e01b      	b.n	80079a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800797e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800798e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0201 	orr.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fba3 	bl	80080ec <UART_CheckIdleState>
 80079a6:	4603      	mov	r3, r0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b4:	b08c      	sub	sp, #48	; 0x30
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	431a      	orrs	r2, r3
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4baa      	ldr	r3, [pc, #680]	; (8007c88 <UART_SetConfig+0x2d8>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079e8:	430b      	orrs	r3, r1
 80079ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	68da      	ldr	r2, [r3, #12]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a9f      	ldr	r2, [pc, #636]	; (8007c8c <UART_SetConfig+0x2dc>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d004      	beq.n	8007a1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007a26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a30:	430b      	orrs	r3, r1
 8007a32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3a:	f023 010f 	bic.w	r1, r3, #15
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a90      	ldr	r2, [pc, #576]	; (8007c90 <UART_SetConfig+0x2e0>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d125      	bne.n	8007aa0 <UART_SetConfig+0xf0>
 8007a54:	4b8f      	ldr	r3, [pc, #572]	; (8007c94 <UART_SetConfig+0x2e4>)
 8007a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d81a      	bhi.n	8007a98 <UART_SetConfig+0xe8>
 8007a62:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <UART_SetConfig+0xb8>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a79 	.word	0x08007a79
 8007a6c:	08007a89 	.word	0x08007a89
 8007a70:	08007a81 	.word	0x08007a81
 8007a74:	08007a91 	.word	0x08007a91
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a7e:	e116      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007a80:	2302      	movs	r3, #2
 8007a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a86:	e112      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a8e:	e10e      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007a90:	2308      	movs	r3, #8
 8007a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a96:	e10a      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a9e:	e106      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a7c      	ldr	r2, [pc, #496]	; (8007c98 <UART_SetConfig+0x2e8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d138      	bne.n	8007b1c <UART_SetConfig+0x16c>
 8007aaa:	4b7a      	ldr	r3, [pc, #488]	; (8007c94 <UART_SetConfig+0x2e4>)
 8007aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab0:	f003 030c 	and.w	r3, r3, #12
 8007ab4:	2b0c      	cmp	r3, #12
 8007ab6:	d82d      	bhi.n	8007b14 <UART_SetConfig+0x164>
 8007ab8:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <UART_SetConfig+0x110>)
 8007aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abe:	bf00      	nop
 8007ac0:	08007af5 	.word	0x08007af5
 8007ac4:	08007b15 	.word	0x08007b15
 8007ac8:	08007b15 	.word	0x08007b15
 8007acc:	08007b15 	.word	0x08007b15
 8007ad0:	08007b05 	.word	0x08007b05
 8007ad4:	08007b15 	.word	0x08007b15
 8007ad8:	08007b15 	.word	0x08007b15
 8007adc:	08007b15 	.word	0x08007b15
 8007ae0:	08007afd 	.word	0x08007afd
 8007ae4:	08007b15 	.word	0x08007b15
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	08007b15 	.word	0x08007b15
 8007af0:	08007b0d 	.word	0x08007b0d
 8007af4:	2300      	movs	r3, #0
 8007af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afa:	e0d8      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007afc:	2302      	movs	r3, #2
 8007afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b02:	e0d4      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007b04:	2304      	movs	r3, #4
 8007b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b0a:	e0d0      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b12:	e0cc      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007b14:	2310      	movs	r3, #16
 8007b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b1a:	e0c8      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a5e      	ldr	r2, [pc, #376]	; (8007c9c <UART_SetConfig+0x2ec>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d125      	bne.n	8007b72 <UART_SetConfig+0x1c2>
 8007b26:	4b5b      	ldr	r3, [pc, #364]	; (8007c94 <UART_SetConfig+0x2e4>)
 8007b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b30:	2b30      	cmp	r3, #48	; 0x30
 8007b32:	d016      	beq.n	8007b62 <UART_SetConfig+0x1b2>
 8007b34:	2b30      	cmp	r3, #48	; 0x30
 8007b36:	d818      	bhi.n	8007b6a <UART_SetConfig+0x1ba>
 8007b38:	2b20      	cmp	r3, #32
 8007b3a:	d00a      	beq.n	8007b52 <UART_SetConfig+0x1a2>
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d814      	bhi.n	8007b6a <UART_SetConfig+0x1ba>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <UART_SetConfig+0x19a>
 8007b44:	2b10      	cmp	r3, #16
 8007b46:	d008      	beq.n	8007b5a <UART_SetConfig+0x1aa>
 8007b48:	e00f      	b.n	8007b6a <UART_SetConfig+0x1ba>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b50:	e0ad      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007b52:	2302      	movs	r3, #2
 8007b54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b58:	e0a9      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007b5a:	2304      	movs	r3, #4
 8007b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b60:	e0a5      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007b62:	2308      	movs	r3, #8
 8007b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b68:	e0a1      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007b6a:	2310      	movs	r3, #16
 8007b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b70:	e09d      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a4a      	ldr	r2, [pc, #296]	; (8007ca0 <UART_SetConfig+0x2f0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d125      	bne.n	8007bc8 <UART_SetConfig+0x218>
 8007b7c:	4b45      	ldr	r3, [pc, #276]	; (8007c94 <UART_SetConfig+0x2e4>)
 8007b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b86:	2bc0      	cmp	r3, #192	; 0xc0
 8007b88:	d016      	beq.n	8007bb8 <UART_SetConfig+0x208>
 8007b8a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b8c:	d818      	bhi.n	8007bc0 <UART_SetConfig+0x210>
 8007b8e:	2b80      	cmp	r3, #128	; 0x80
 8007b90:	d00a      	beq.n	8007ba8 <UART_SetConfig+0x1f8>
 8007b92:	2b80      	cmp	r3, #128	; 0x80
 8007b94:	d814      	bhi.n	8007bc0 <UART_SetConfig+0x210>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d002      	beq.n	8007ba0 <UART_SetConfig+0x1f0>
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d008      	beq.n	8007bb0 <UART_SetConfig+0x200>
 8007b9e:	e00f      	b.n	8007bc0 <UART_SetConfig+0x210>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ba6:	e082      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007ba8:	2302      	movs	r3, #2
 8007baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bae:	e07e      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb6:	e07a      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007bb8:	2308      	movs	r3, #8
 8007bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bbe:	e076      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc6:	e072      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a35      	ldr	r2, [pc, #212]	; (8007ca4 <UART_SetConfig+0x2f4>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d12a      	bne.n	8007c28 <UART_SetConfig+0x278>
 8007bd2:	4b30      	ldr	r3, [pc, #192]	; (8007c94 <UART_SetConfig+0x2e4>)
 8007bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be0:	d01a      	beq.n	8007c18 <UART_SetConfig+0x268>
 8007be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be6:	d81b      	bhi.n	8007c20 <UART_SetConfig+0x270>
 8007be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bec:	d00c      	beq.n	8007c08 <UART_SetConfig+0x258>
 8007bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf2:	d815      	bhi.n	8007c20 <UART_SetConfig+0x270>
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <UART_SetConfig+0x250>
 8007bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfc:	d008      	beq.n	8007c10 <UART_SetConfig+0x260>
 8007bfe:	e00f      	b.n	8007c20 <UART_SetConfig+0x270>
 8007c00:	2300      	movs	r3, #0
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c06:	e052      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0e:	e04e      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007c10:	2304      	movs	r3, #4
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c16:	e04a      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007c18:	2308      	movs	r3, #8
 8007c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1e:	e046      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007c20:	2310      	movs	r3, #16
 8007c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c26:	e042      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <UART_SetConfig+0x2dc>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d13a      	bne.n	8007ca8 <UART_SetConfig+0x2f8>
 8007c32:	4b18      	ldr	r3, [pc, #96]	; (8007c94 <UART_SetConfig+0x2e4>)
 8007c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c40:	d01a      	beq.n	8007c78 <UART_SetConfig+0x2c8>
 8007c42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c46:	d81b      	bhi.n	8007c80 <UART_SetConfig+0x2d0>
 8007c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c4c:	d00c      	beq.n	8007c68 <UART_SetConfig+0x2b8>
 8007c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c52:	d815      	bhi.n	8007c80 <UART_SetConfig+0x2d0>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <UART_SetConfig+0x2b0>
 8007c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c5c:	d008      	beq.n	8007c70 <UART_SetConfig+0x2c0>
 8007c5e:	e00f      	b.n	8007c80 <UART_SetConfig+0x2d0>
 8007c60:	2300      	movs	r3, #0
 8007c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c66:	e022      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c6e:	e01e      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c76:	e01a      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7e:	e016      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c86:	e012      	b.n	8007cae <UART_SetConfig+0x2fe>
 8007c88:	cfff69f3 	.word	0xcfff69f3
 8007c8c:	40008000 	.word	0x40008000
 8007c90:	40013800 	.word	0x40013800
 8007c94:	40021000 	.word	0x40021000
 8007c98:	40004400 	.word	0x40004400
 8007c9c:	40004800 	.word	0x40004800
 8007ca0:	40004c00 	.word	0x40004c00
 8007ca4:	40005000 	.word	0x40005000
 8007ca8:	2310      	movs	r3, #16
 8007caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4aae      	ldr	r2, [pc, #696]	; (8007f6c <UART_SetConfig+0x5bc>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	f040 8097 	bne.w	8007de8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d823      	bhi.n	8007d0a <UART_SetConfig+0x35a>
 8007cc2:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <UART_SetConfig+0x318>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007d0b 	.word	0x08007d0b
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007d0b 	.word	0x08007d0b
 8007cd8:	08007cfb 	.word	0x08007cfb
 8007cdc:	08007d0b 	.word	0x08007d0b
 8007ce0:	08007d0b 	.word	0x08007d0b
 8007ce4:	08007d0b 	.word	0x08007d0b
 8007ce8:	08007d03 	.word	0x08007d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cec:	f7fd ff74 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8007cf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cf2:	e010      	b.n	8007d16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cf4:	4b9e      	ldr	r3, [pc, #632]	; (8007f70 <UART_SetConfig+0x5c0>)
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cf8:	e00d      	b.n	8007d16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cfa:	f7fd feff 	bl	8005afc <HAL_RCC_GetSysClockFreq>
 8007cfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d00:	e009      	b.n	8007d16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d08:	e005      	b.n	8007d16 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 8130 	beq.w	8007f7e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	4a94      	ldr	r2, [pc, #592]	; (8007f74 <UART_SetConfig+0x5c4>)
 8007d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	4413      	add	r3, r2
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d305      	bcc.n	8007d4e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d903      	bls.n	8007d56 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d54:	e113      	b.n	8007f7e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	2200      	movs	r2, #0
 8007d5a:	60bb      	str	r3, [r7, #8]
 8007d5c:	60fa      	str	r2, [r7, #12]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	4a84      	ldr	r2, [pc, #528]	; (8007f74 <UART_SetConfig+0x5c4>)
 8007d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	603b      	str	r3, [r7, #0]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d78:	f7f8 fa4e 	bl	8000218 <__aeabi_uldivmod>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4610      	mov	r0, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	020b      	lsls	r3, r1, #8
 8007d8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d92:	0202      	lsls	r2, r0, #8
 8007d94:	6979      	ldr	r1, [r7, #20]
 8007d96:	6849      	ldr	r1, [r1, #4]
 8007d98:	0849      	lsrs	r1, r1, #1
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	4605      	mov	r5, r0
 8007da0:	eb12 0804 	adds.w	r8, r2, r4
 8007da4:	eb43 0905 	adc.w	r9, r3, r5
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	469a      	mov	sl, r3
 8007db0:	4693      	mov	fp, r2
 8007db2:	4652      	mov	r2, sl
 8007db4:	465b      	mov	r3, fp
 8007db6:	4640      	mov	r0, r8
 8007db8:	4649      	mov	r1, r9
 8007dba:	f7f8 fa2d 	bl	8000218 <__aeabi_uldivmod>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dcc:	d308      	bcc.n	8007de0 <UART_SetConfig+0x430>
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd4:	d204      	bcs.n	8007de0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6a3a      	ldr	r2, [r7, #32]
 8007ddc:	60da      	str	r2, [r3, #12]
 8007dde:	e0ce      	b.n	8007f7e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007de6:	e0ca      	b.n	8007f7e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df0:	d166      	bne.n	8007ec0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007df2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d827      	bhi.n	8007e4a <UART_SetConfig+0x49a>
 8007dfa:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <UART_SetConfig+0x450>)
 8007dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e00:	08007e25 	.word	0x08007e25
 8007e04:	08007e2d 	.word	0x08007e2d
 8007e08:	08007e35 	.word	0x08007e35
 8007e0c:	08007e4b 	.word	0x08007e4b
 8007e10:	08007e3b 	.word	0x08007e3b
 8007e14:	08007e4b 	.word	0x08007e4b
 8007e18:	08007e4b 	.word	0x08007e4b
 8007e1c:	08007e4b 	.word	0x08007e4b
 8007e20:	08007e43 	.word	0x08007e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e24:	f7fd fed8 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8007e28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e2a:	e014      	b.n	8007e56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e2c:	f7fd feea 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 8007e30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e32:	e010      	b.n	8007e56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e34:	4b4e      	ldr	r3, [pc, #312]	; (8007f70 <UART_SetConfig+0x5c0>)
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e38:	e00d      	b.n	8007e56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e3a:	f7fd fe5f 	bl	8005afc <HAL_RCC_GetSysClockFreq>
 8007e3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e40:	e009      	b.n	8007e56 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e48:	e005      	b.n	8007e56 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 8090 	beq.w	8007f7e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	4a44      	ldr	r2, [pc, #272]	; (8007f74 <UART_SetConfig+0x5c4>)
 8007e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e70:	005a      	lsls	r2, r3, #1
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	441a      	add	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	2b0f      	cmp	r3, #15
 8007e88:	d916      	bls.n	8007eb8 <UART_SetConfig+0x508>
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e90:	d212      	bcs.n	8007eb8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f023 030f 	bic.w	r3, r3, #15
 8007e9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	085b      	lsrs	r3, r3, #1
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	8bfb      	ldrh	r3, [r7, #30]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	8bfa      	ldrh	r2, [r7, #30]
 8007eb4:	60da      	str	r2, [r3, #12]
 8007eb6:	e062      	b.n	8007f7e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ebe:	e05e      	b.n	8007f7e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ec0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ec4:	2b08      	cmp	r3, #8
 8007ec6:	d828      	bhi.n	8007f1a <UART_SetConfig+0x56a>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <UART_SetConfig+0x520>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007ef5 	.word	0x08007ef5
 8007ed4:	08007efd 	.word	0x08007efd
 8007ed8:	08007f05 	.word	0x08007f05
 8007edc:	08007f1b 	.word	0x08007f1b
 8007ee0:	08007f0b 	.word	0x08007f0b
 8007ee4:	08007f1b 	.word	0x08007f1b
 8007ee8:	08007f1b 	.word	0x08007f1b
 8007eec:	08007f1b 	.word	0x08007f1b
 8007ef0:	08007f13 	.word	0x08007f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ef4:	f7fd fe70 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8007ef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007efa:	e014      	b.n	8007f26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007efc:	f7fd fe82 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 8007f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f02:	e010      	b.n	8007f26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f04:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <UART_SetConfig+0x5c0>)
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f08:	e00d      	b.n	8007f26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f0a:	f7fd fdf7 	bl	8005afc <HAL_RCC_GetSysClockFreq>
 8007f0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f10:	e009      	b.n	8007f26 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f18:	e005      	b.n	8007f26 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f24:	bf00      	nop
    }

    if (pclk != 0U)
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d028      	beq.n	8007f7e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	4a10      	ldr	r2, [pc, #64]	; (8007f74 <UART_SetConfig+0x5c4>)
 8007f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f36:	461a      	mov	r2, r3
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	085b      	lsrs	r3, r3, #1
 8007f44:	441a      	add	r2, r3
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	2b0f      	cmp	r3, #15
 8007f54:	d910      	bls.n	8007f78 <UART_SetConfig+0x5c8>
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f5c:	d20c      	bcs.n	8007f78 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60da      	str	r2, [r3, #12]
 8007f68:	e009      	b.n	8007f7e <UART_SetConfig+0x5ce>
 8007f6a:	bf00      	nop
 8007f6c:	40008000 	.word	0x40008000
 8007f70:	00f42400 	.word	0x00f42400
 8007f74:	08008c1c 	.word	0x08008c1c
      }
      else
      {
        ret = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2200      	movs	r2, #0
 8007f92:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2200      	movs	r2, #0
 8007f98:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3730      	adds	r7, #48	; 0x30
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01a      	beq.n	80080be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a6:	d10a      	bne.n	80080be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
  }
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b098      	sub	sp, #96	; 0x60
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080fc:	f7fa fa08 	bl	8002510 <HAL_GetTick>
 8008100:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b08      	cmp	r3, #8
 800810e:	d12f      	bne.n	8008170 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008118:	2200      	movs	r2, #0
 800811a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f88e 	bl	8008240 <UART_WaitOnFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d022      	beq.n	8008170 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800813e:	653b      	str	r3, [r7, #80]	; 0x50
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008148:	647b      	str	r3, [r7, #68]	; 0x44
 800814a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800814e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e6      	bne.n	800812a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e063      	b.n	8008238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0304 	and.w	r3, r3, #4
 800817a:	2b04      	cmp	r3, #4
 800817c:	d149      	bne.n	8008212 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800817e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008186:	2200      	movs	r2, #0
 8008188:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f857 	bl	8008240 <UART_WaitOnFlagUntilTimeout>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d03c      	beq.n	8008212 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	623b      	str	r3, [r7, #32]
   return(result);
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b6:	633b      	str	r3, [r7, #48]	; 0x30
 80081b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e6      	bne.n	8008198 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3308      	adds	r3, #8
 80081d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f023 0301 	bic.w	r3, r3, #1
 80081e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ea:	61fa      	str	r2, [r7, #28]
 80081ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	69b9      	ldr	r1, [r7, #24]
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	617b      	str	r3, [r7, #20]
   return(result);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e5      	bne.n	80081ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e012      	b.n	8008238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3758      	adds	r7, #88	; 0x58
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	4613      	mov	r3, r2
 800824e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008250:	e04f      	b.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008258:	d04b      	beq.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800825a:	f7fa f959 	bl	8002510 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	429a      	cmp	r2, r3
 8008268:	d302      	bcc.n	8008270 <UART_WaitOnFlagUntilTimeout+0x30>
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e04e      	b.n	8008312 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0304 	and.w	r3, r3, #4
 800827e:	2b00      	cmp	r3, #0
 8008280:	d037      	beq.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b80      	cmp	r3, #128	; 0x80
 8008286:	d034      	beq.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b40      	cmp	r3, #64	; 0x40
 800828c:	d031      	beq.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	f003 0308 	and.w	r3, r3, #8
 8008298:	2b08      	cmp	r3, #8
 800829a:	d110      	bne.n	80082be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2208      	movs	r2, #8
 80082a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 f838 	bl	800831a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2208      	movs	r2, #8
 80082ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e029      	b.n	8008312 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082cc:	d111      	bne.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f81e 	bl	800831a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e00f      	b.n	8008312 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69da      	ldr	r2, [r3, #28]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4013      	ands	r3, r2
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	429a      	cmp	r2, r3
 8008300:	bf0c      	ite	eq
 8008302:	2301      	moveq	r3, #1
 8008304:	2300      	movne	r3, #0
 8008306:	b2db      	uxtb	r3, r3
 8008308:	461a      	mov	r2, r3
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	429a      	cmp	r2, r3
 800830e:	d0a0      	beq.n	8008252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800831a:	b480      	push	{r7}
 800831c:	b095      	sub	sp, #84	; 0x54
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
 800833e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008340:	643b      	str	r3, [r7, #64]	; 0x40
 8008342:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008348:	e841 2300 	strex	r3, r2, [r1]
 800834c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e6      	bne.n	8008322 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3308      	adds	r3, #8
 800835a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	e853 3f00 	ldrex	r3, [r3]
 8008362:	61fb      	str	r3, [r7, #28]
   return(result);
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800836a:	f023 0301 	bic.w	r3, r3, #1
 800836e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008378:	62fa      	str	r2, [r7, #44]	; 0x2c
 800837a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800837e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008380:	e841 2300 	strex	r3, r2, [r1]
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e3      	bne.n	8008354 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008390:	2b01      	cmp	r3, #1
 8008392:	d118      	bne.n	80083c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f023 0310 	bic.w	r3, r3, #16
 80083a8:	647b      	str	r3, [r7, #68]	; 0x44
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083b2:	61bb      	str	r3, [r7, #24]
 80083b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6979      	ldr	r1, [r7, #20]
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	613b      	str	r3, [r7, #16]
   return(result);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e6      	bne.n	8008394 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80083da:	bf00      	nop
 80083dc:	3754      	adds	r7, #84	; 0x54
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b085      	sub	sp, #20
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d101      	bne.n	80083fc <HAL_UARTEx_DisableFifoMode+0x16>
 80083f8:	2302      	movs	r3, #2
 80083fa:	e027      	b.n	800844c <HAL_UARTEx_DisableFifoMode+0x66>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2224      	movs	r2, #36	; 0x24
 8008408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 0201 	bic.w	r2, r2, #1
 8008422:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800842a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800846c:	2302      	movs	r3, #2
 800846e:	e02d      	b.n	80084cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2224      	movs	r2, #36	; 0x24
 800847c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0201 	bic.w	r2, r2, #1
 8008496:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f84f 	bl	8008550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e02d      	b.n	8008548 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2224      	movs	r2, #36	; 0x24
 80084f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f022 0201 	bic.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f811 	bl	8008550 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800855c:	2b00      	cmp	r3, #0
 800855e:	d108      	bne.n	8008572 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008570:	e031      	b.n	80085d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008572:	2308      	movs	r3, #8
 8008574:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008576:	2308      	movs	r3, #8
 8008578:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	0e5b      	lsrs	r3, r3, #25
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 0307 	and.w	r3, r3, #7
 8008588:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	0f5b      	lsrs	r3, r3, #29
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	7b3a      	ldrb	r2, [r7, #12]
 800859e:	4911      	ldr	r1, [pc, #68]	; (80085e4 <UARTEx_SetNbDataToProcess+0x94>)
 80085a0:	5c8a      	ldrb	r2, [r1, r2]
 80085a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085a6:	7b3a      	ldrb	r2, [r7, #12]
 80085a8:	490f      	ldr	r1, [pc, #60]	; (80085e8 <UARTEx_SetNbDataToProcess+0x98>)
 80085aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
 80085ba:	7b7a      	ldrb	r2, [r7, #13]
 80085bc:	4909      	ldr	r1, [pc, #36]	; (80085e4 <UARTEx_SetNbDataToProcess+0x94>)
 80085be:	5c8a      	ldrb	r2, [r1, r2]
 80085c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80085c4:	7b7a      	ldrb	r2, [r7, #13]
 80085c6:	4908      	ldr	r1, [pc, #32]	; (80085e8 <UARTEx_SetNbDataToProcess+0x98>)
 80085c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	08008c34 	.word	0x08008c34
 80085e8:	08008c3c 	.word	0x08008c3c

080085ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80085f4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80085f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008600:	b29a      	uxth	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	b29b      	uxth	r3, r3
 8008606:	43db      	mvns	r3, r3
 8008608:	b29b      	uxth	r3, r3
 800860a:	4013      	ands	r3, r2
 800860c:	b29a      	uxth	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008622:	b480      	push	{r7}
 8008624:	b085      	sub	sp, #20
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	1d3b      	adds	r3, r7, #4
 800862c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3714      	adds	r7, #20
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
	...

08008660 <arm_conv_f32>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	b08b      	sub	sp, #44	; 0x2c
 8008666:	4299      	cmp	r1, r3
 8008668:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800866a:	d205      	bcs.n	8008678 <arm_conv_f32+0x18>
 800866c:	4606      	mov	r6, r0
 800866e:	460c      	mov	r4, r1
 8008670:	4610      	mov	r0, r2
 8008672:	4619      	mov	r1, r3
 8008674:	4632      	mov	r2, r6
 8008676:	4623      	mov	r3, r4
 8008678:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 800867c:	3101      	adds	r1, #1
 800867e:	1ac9      	subs	r1, r1, r3
 8008680:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008684:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8008688:	9101      	str	r1, [sp, #4]
 800868a:	1e59      	subs	r1, r3, #1
 800868c:	eb02 070b 	add.w	r7, r2, fp
 8008690:	f000 8277 	beq.w	8008b82 <arm_conv_f32+0x522>
 8008694:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8008954 <arm_conv_f32+0x2f4>
 8008698:	f102 0904 	add.w	r9, r2, #4
 800869c:	46aa      	mov	sl, r5
 800869e:	4680      	mov	r8, r0
 80086a0:	2401      	movs	r4, #1
 80086a2:	f014 0603 	ands.w	r6, r4, #3
 80086a6:	d01b      	beq.n	80086e0 <arm_conv_f32+0x80>
 80086a8:	ed92 7a00 	vldr	s14, [r2]
 80086ac:	edd8 6a00 	vldr	s13, [r8]
 80086b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80086b4:	3e01      	subs	r6, #1
 80086b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086ba:	d011      	beq.n	80086e0 <arm_conv_f32+0x80>
 80086bc:	ed12 7a01 	vldr	s14, [r2, #-4]
 80086c0:	edd8 6a01 	vldr	s13, [r8, #4]
 80086c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80086c8:	2e01      	cmp	r6, #1
 80086ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086ce:	d007      	beq.n	80086e0 <arm_conv_f32+0x80>
 80086d0:	ed98 7a02 	vldr	s14, [r8, #8]
 80086d4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80086d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80086dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086e0:	3401      	adds	r4, #1
 80086e2:	42a3      	cmp	r3, r4
 80086e4:	ecea 7a01 	vstmia	sl!, {s15}
 80086e8:	464a      	mov	r2, r9
 80086ea:	d03a      	beq.n	8008762 <arm_conv_f32+0x102>
 80086ec:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 80086f0:	f000 824c 	beq.w	8008b8c <arm_conv_f32+0x52c>
 80086f4:	f100 0210 	add.w	r2, r0, #16
 80086f8:	ea4f 180e 	mov.w	r8, lr, lsl #4
 80086fc:	eddf 7a95 	vldr	s15, [pc, #596]	; 8008954 <arm_conv_f32+0x2f4>
 8008700:	eb02 0c08 	add.w	ip, r2, r8
 8008704:	f1a9 0610 	sub.w	r6, r9, #16
 8008708:	ed12 7a04 	vldr	s14, [r2, #-16]
 800870c:	edd6 3a04 	vldr	s7, [r6, #16]
 8008710:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008714:	ed96 4a03 	vldr	s8, [r6, #12]
 8008718:	ed52 6a02 	vldr	s13, [r2, #-8]
 800871c:	edd6 4a02 	vldr	s9, [r6, #8]
 8008720:	ed52 5a01 	vldr	s11, [r2, #-4]
 8008724:	ed96 5a01 	vldr	s10, [r6, #4]
 8008728:	ee27 7a23 	vmul.f32	s14, s14, s7
 800872c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008734:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8008738:	ee76 7a27 	vadd.f32	s15, s12, s15
 800873c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8008740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008744:	3210      	adds	r2, #16
 8008746:	4594      	cmp	ip, r2
 8008748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874c:	f1a6 0610 	sub.w	r6, r6, #16
 8008750:	d1da      	bne.n	8008708 <arm_conv_f32+0xa8>
 8008752:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8008756:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800875a:	4480      	add	r8, r0
 800875c:	f109 0904 	add.w	r9, r9, #4
 8008760:	e79f      	b.n	80086a2 <arm_conv_f32+0x42>
 8008762:	2b03      	cmp	r3, #3
 8008764:	445d      	add	r5, fp
 8008766:	f240 80e9 	bls.w	800893c <arm_conv_f32+0x2dc>
 800876a:	9b01      	ldr	r3, [sp, #4]
 800876c:	089a      	lsrs	r2, r3, #2
 800876e:	9202      	str	r2, [sp, #8]
 8008770:	f000 8203 	beq.w	8008b7a <arm_conv_f32+0x51a>
 8008774:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8008778:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800877c:	0112      	lsls	r2, r2, #4
 800877e:	f004 0603 	and.w	r6, r4, #3
 8008782:	9203      	str	r2, [sp, #12]
 8008784:	f1a3 0a10 	sub.w	sl, r3, #16
 8008788:	f1a3 020c 	sub.w	r2, r3, #12
 800878c:	3b08      	subs	r3, #8
 800878e:	9204      	str	r2, [sp, #16]
 8008790:	9305      	str	r3, [sp, #20]
 8008792:	f106 39ff 	add.w	r9, r6, #4294967295
 8008796:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800879a:	9a03      	ldr	r2, [sp, #12]
 800879c:	f100 0c1c 	add.w	ip, r0, #28
 80087a0:	e9cd 4106 	strd	r4, r1, [sp, #24]
 80087a4:	464c      	mov	r4, r9
 80087a6:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 80087aa:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 80087ae:	f1a7 0310 	sub.w	r3, r7, #16
 80087b2:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80087b6:	eb05 0b02 	add.w	fp, r5, r2
 80087ba:	461f      	mov	r7, r3
 80087bc:	3510      	adds	r5, #16
 80087be:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8008954 <arm_conv_f32+0x2f4>
 80087c2:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 80087c6:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 80087ca:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80087ce:	eeb0 5a46 	vmov.f32	s10, s12
 80087d2:	eef0 4a46 	vmov.f32	s9, s12
 80087d6:	eef0 5a46 	vmov.f32	s11, s12
 80087da:	463a      	mov	r2, r7
 80087dc:	4663      	mov	r3, ip
 80087de:	4641      	mov	r1, r8
 80087e0:	edd2 6a04 	vldr	s13, [r2, #16]
 80087e4:	ed13 0a04 	vldr	s0, [r3, #-16]
 80087e8:	ed92 7a03 	vldr	s14, [r2, #12]
 80087ec:	edd2 7a02 	vldr	s15, [r2, #8]
 80087f0:	edd2 0a01 	vldr	s1, [r2, #4]
 80087f4:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80087f8:	ee62 3a26 	vmul.f32	s7, s4, s13
 80087fc:	ee61 2a26 	vmul.f32	s5, s2, s13
 8008800:	ed13 1a03 	vldr	s2, [r3, #-12]
 8008804:	ee66 6a80 	vmul.f32	s13, s13, s0
 8008808:	ee21 4a87 	vmul.f32	s8, s3, s14
 800880c:	ee73 4a24 	vadd.f32	s9, s6, s9
 8008810:	ee33 5a85 	vadd.f32	s10, s7, s10
 8008814:	ee22 3a07 	vmul.f32	s6, s4, s14
 8008818:	ed53 1a02 	vldr	s3, [r3, #-8]
 800881c:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8008820:	ee36 6a86 	vadd.f32	s12, s13, s12
 8008824:	ee60 3a07 	vmul.f32	s7, s0, s14
 8008828:	ee27 7a01 	vmul.f32	s14, s14, s2
 800882c:	ee33 3a24 	vadd.f32	s6, s6, s9
 8008830:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008834:	ee74 2a22 	vadd.f32	s5, s8, s5
 8008838:	ee60 4a27 	vmul.f32	s9, s0, s15
 800883c:	ee22 4a27 	vmul.f32	s8, s4, s15
 8008840:	ee73 3a85 	vadd.f32	s7, s7, s10
 8008844:	ed13 2a01 	vldr	s4, [r3, #-4]
 8008848:	ee21 5a27 	vmul.f32	s10, s2, s15
 800884c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8008850:	ee74 4a83 	vadd.f32	s9, s9, s6
 8008854:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008858:	ee34 4a22 	vadd.f32	s8, s8, s5
 800885c:	ee60 5a20 	vmul.f32	s11, s0, s1
 8008860:	ee21 3a20 	vmul.f32	s6, s2, s1
 8008864:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008868:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800886c:	ee20 6a82 	vmul.f32	s12, s1, s4
 8008870:	3901      	subs	r1, #1
 8008872:	f1a2 0210 	sub.w	r2, r2, #16
 8008876:	ee75 5a84 	vadd.f32	s11, s11, s8
 800887a:	ee73 4a24 	vadd.f32	s9, s6, s9
 800887e:	ee37 5a05 	vadd.f32	s10, s14, s10
 8008882:	ee36 6a27 	vadd.f32	s12, s12, s15
 8008886:	f103 0310 	add.w	r3, r3, #16
 800888a:	d1a9      	bne.n	80087e0 <arm_conv_f32+0x180>
 800888c:	eb0a 030c 	add.w	r3, sl, ip
 8008890:	2e00      	cmp	r6, #0
 8008892:	d042      	beq.n	800891a <arm_conv_f32+0x2ba>
 8008894:	edde 7a00 	vldr	s15, [lr]
 8008898:	ed93 4a00 	vldr	s8, [r3]
 800889c:	ee61 6a27 	vmul.f32	s13, s2, s15
 80088a0:	ee61 3aa7 	vmul.f32	s7, s3, s15
 80088a4:	ee22 7a27 	vmul.f32	s14, s4, s15
 80088a8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80088ac:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80088b0:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80088b4:	ee35 5a07 	vadd.f32	s10, s10, s14
 80088b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80088bc:	eb09 030c 	add.w	r3, r9, ip
 80088c0:	b35c      	cbz	r4, 800891a <arm_conv_f32+0x2ba>
 80088c2:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80088c6:	edd3 6a00 	vldr	s13, [r3]
 80088ca:	ee21 7aa7 	vmul.f32	s14, s3, s15
 80088ce:	ee22 3a27 	vmul.f32	s6, s4, s15
 80088d2:	ee67 3a84 	vmul.f32	s7, s15, s8
 80088d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088da:	2c01      	cmp	r4, #1
 80088dc:	ee75 5a87 	vadd.f32	s11, s11, s14
 80088e0:	ee74 4a83 	vadd.f32	s9, s9, s6
 80088e4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80088e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80088ec:	eb00 030c 	add.w	r3, r0, ip
 80088f0:	d013      	beq.n	800891a <arm_conv_f32+0x2ba>
 80088f2:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80088f6:	edd3 3a00 	vldr	s7, [r3]
 80088fa:	ee62 7a07 	vmul.f32	s15, s4, s14
 80088fe:	ee27 4a04 	vmul.f32	s8, s14, s8
 8008902:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008906:	ee27 7a23 	vmul.f32	s14, s14, s7
 800890a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800890e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008912:	ee35 5a26 	vadd.f32	s10, s10, s13
 8008916:	ee36 6a07 	vadd.f32	s12, s12, s14
 800891a:	45ab      	cmp	fp, r5
 800891c:	ed45 5a04 	vstr	s11, [r5, #-16]
 8008920:	ed45 4a03 	vstr	s9, [r5, #-12]
 8008924:	ed05 5a02 	vstr	s10, [r5, #-8]
 8008928:	ed05 6a01 	vstr	s12, [r5, #-4]
 800892c:	f10c 0c10 	add.w	ip, ip, #16
 8008930:	f105 0310 	add.w	r3, r5, #16
 8008934:	f000 809e 	beq.w	8008a74 <arm_conv_f32+0x414>
 8008938:	461d      	mov	r5, r3
 800893a:	e740      	b.n	80087be <arm_conv_f32+0x15e>
 800893c:	9a01      	ldr	r2, [sp, #4]
 800893e:	46ac      	mov	ip, r5
 8008940:	2a00      	cmp	r2, #0
 8008942:	d037      	beq.n	80089b4 <arm_conv_f32+0x354>
 8008944:	9a01      	ldr	r2, [sp, #4]
 8008946:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8008954 <arm_conv_f32+0x2f4>
 800894a:	0096      	lsls	r6, r2, #2
 800894c:	eb05 0c06 	add.w	ip, r5, r6
 8008950:	4604      	mov	r4, r0
 8008952:	e021      	b.n	8008998 <arm_conv_f32+0x338>
 8008954:	00000000 	.word	0x00000000
 8008958:	edd7 7a00 	vldr	s15, [r7]
 800895c:	ecb2 7a01 	vldmia	r2!, {s14}
 8008960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008964:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008968:	b189      	cbz	r1, 800898e <arm_conv_f32+0x32e>
 800896a:	ed17 7a01 	vldr	s14, [r7, #-4]
 800896e:	edd4 6a01 	vldr	s13, [r4, #4]
 8008972:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008976:	2b02      	cmp	r3, #2
 8008978:	ee77 7a87 	vadd.f32	s15, s15, s14
 800897c:	d007      	beq.n	800898e <arm_conv_f32+0x32e>
 800897e:	ed94 7a02 	vldr	s14, [r4, #8]
 8008982:	ed57 6a02 	vldr	s13, [r7, #-8]
 8008986:	ee27 7a26 	vmul.f32	s14, s14, s13
 800898a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800898e:	ece5 7a01 	vstmia	r5!, {s15}
 8008992:	4565      	cmp	r5, ip
 8008994:	4614      	mov	r4, r2
 8008996:	d00a      	beq.n	80089ae <arm_conv_f32+0x34e>
 8008998:	4622      	mov	r2, r4
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1dc      	bne.n	8008958 <arm_conv_f32+0x2f8>
 800899e:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8008954 <arm_conv_f32+0x2f4>
 80089a2:	ece5 7a01 	vstmia	r5!, {s15}
 80089a6:	1d22      	adds	r2, r4, #4
 80089a8:	4565      	cmp	r5, ip
 80089aa:	4614      	mov	r4, r2
 80089ac:	d1f4      	bne.n	8008998 <arm_conv_f32+0x338>
 80089ae:	4430      	add	r0, r6
 80089b0:	2900      	cmp	r1, #0
 80089b2:	d059      	beq.n	8008a68 <arm_conv_f32+0x408>
 80089b4:	088d      	lsrs	r5, r1, #2
 80089b6:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8008954 <arm_conv_f32+0x2f4>
 80089ba:	d058      	beq.n	8008a6e <arm_conv_f32+0x40e>
 80089bc:	f100 0210 	add.w	r2, r0, #16
 80089c0:	f1a7 0310 	sub.w	r3, r7, #16
 80089c4:	462c      	mov	r4, r5
 80089c6:	ed52 6a04 	vldr	s13, [r2, #-16]
 80089ca:	edd3 3a04 	vldr	s7, [r3, #16]
 80089ce:	ed12 7a03 	vldr	s14, [r2, #-12]
 80089d2:	ed93 4a03 	vldr	s8, [r3, #12]
 80089d6:	ed52 7a02 	vldr	s15, [r2, #-8]
 80089da:	edd3 4a02 	vldr	s9, [r3, #8]
 80089de:	ed12 6a01 	vldr	s12, [r2, #-4]
 80089e2:	ed93 5a01 	vldr	s10, [r3, #4]
 80089e6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80089ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 80089ee:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80089f2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80089f6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80089fa:	ee66 6a05 	vmul.f32	s13, s12, s10
 80089fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a02:	3c01      	subs	r4, #1
 8008a04:	f102 0210 	add.w	r2, r2, #16
 8008a08:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8008a0c:	f1a3 0310 	sub.w	r3, r3, #16
 8008a10:	d1d9      	bne.n	80089c6 <arm_conv_f32+0x366>
 8008a12:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8008a16:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8008a1a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8008a1e:	f011 0203 	ands.w	r2, r1, #3
 8008a22:	d01b      	beq.n	8008a5c <arm_conv_f32+0x3fc>
 8008a24:	edd3 7a00 	vldr	s15, [r3]
 8008a28:	ed95 7a00 	vldr	s14, [r5]
 8008a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a30:	3a01      	subs	r2, #1
 8008a32:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8008a36:	d011      	beq.n	8008a5c <arm_conv_f32+0x3fc>
 8008a38:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008a3c:	ed95 7a01 	vldr	s14, [r5, #4]
 8008a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a44:	2a01      	cmp	r2, #1
 8008a46:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8008a4a:	d007      	beq.n	8008a5c <arm_conv_f32+0x3fc>
 8008a4c:	edd5 7a02 	vldr	s15, [r5, #8]
 8008a50:	ed13 7a02 	vldr	s14, [r3, #-8]
 8008a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a58:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8008a5c:	3901      	subs	r1, #1
 8008a5e:	ecec 5a01 	vstmia	ip!, {s11}
 8008a62:	f100 0004 	add.w	r0, r0, #4
 8008a66:	d1a5      	bne.n	80089b4 <arm_conv_f32+0x354>
 8008a68:	b00b      	add	sp, #44	; 0x2c
 8008a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6e:	463b      	mov	r3, r7
 8008a70:	4605      	mov	r5, r0
 8008a72:	e7d4      	b.n	8008a1e <arm_conv_f32+0x3be>
 8008a74:	9b02      	ldr	r3, [sp, #8]
 8008a76:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	9302      	str	r3, [sp, #8]
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8008a84:	4403      	add	r3, r0
 8008a86:	465d      	mov	r5, fp
 8008a88:	469e      	mov	lr, r3
 8008a8a:	9b01      	ldr	r3, [sp, #4]
 8008a8c:	f013 0c03 	ands.w	ip, r3, #3
 8008a90:	d075      	beq.n	8008b7e <arm_conv_f32+0x51e>
 8008a92:	9b02      	ldr	r3, [sp, #8]
 8008a94:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8008a98:	f004 0403 	and.w	r4, r4, #3
 8008a9c:	f104 3bff 	add.w	fp, r4, #4294967295
 8008aa0:	f103 0801 	add.w	r8, r3, #1
 8008aa4:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8008aa8:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8008aac:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8008ab0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8008ab4:	f1a7 0210 	sub.w	r2, r7, #16
 8008ab8:	4618      	mov	r0, r3
 8008aba:	465b      	mov	r3, fp
 8008abc:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8008ac0:	468b      	mov	fp, r1
 8008ac2:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4617      	mov	r7, r2
 8008aca:	461c      	mov	r4, r3
 8008acc:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8008954 <arm_conv_f32+0x2f4>
 8008ad0:	f10e 0210 	add.w	r2, lr, #16
 8008ad4:	463b      	mov	r3, r7
 8008ad6:	4656      	mov	r6, sl
 8008ad8:	ed12 7a04 	vldr	s14, [r2, #-16]
 8008adc:	edd3 3a04 	vldr	s7, [r3, #16]
 8008ae0:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008ae4:	ed93 4a03 	vldr	s8, [r3, #12]
 8008ae8:	ed52 6a02 	vldr	s13, [r2, #-8]
 8008aec:	edd3 4a02 	vldr	s9, [r3, #8]
 8008af0:	ed52 5a01 	vldr	s11, [r2, #-4]
 8008af4:	ed93 5a01 	vldr	s10, [r3, #4]
 8008af8:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008afc:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b04:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8008b08:	ee76 7a27 	vadd.f32	s15, s12, s15
 8008b0c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8008b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b14:	3e01      	subs	r6, #1
 8008b16:	f102 0210 	add.w	r2, r2, #16
 8008b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b1e:	f1a3 0310 	sub.w	r3, r3, #16
 8008b22:	d1d9      	bne.n	8008ad8 <arm_conv_f32+0x478>
 8008b24:	4486      	add	lr, r0
 8008b26:	b1d1      	cbz	r1, 8008b5e <arm_conv_f32+0x4fe>
 8008b28:	ed99 7a00 	vldr	s14, [r9]
 8008b2c:	edde 6a00 	vldr	s13, [lr]
 8008b30:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008b34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b38:	b18c      	cbz	r4, 8008b5e <arm_conv_f32+0x4fe>
 8008b3a:	ed19 7a01 	vldr	s14, [r9, #-4]
 8008b3e:	edde 6a01 	vldr	s13, [lr, #4]
 8008b42:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008b46:	2c01      	cmp	r4, #1
 8008b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b4c:	d007      	beq.n	8008b5e <arm_conv_f32+0x4fe>
 8008b4e:	ed9e 7a02 	vldr	s14, [lr, #8]
 8008b52:	ed59 6a02 	vldr	s13, [r9, #-8]
 8008b56:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008b5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b5e:	ece5 7a01 	vstmia	r5!, {s15}
 8008b62:	4565      	cmp	r5, ip
 8008b64:	46c6      	mov	lr, r8
 8008b66:	f108 0804 	add.w	r8, r8, #4
 8008b6a:	d1af      	bne.n	8008acc <arm_conv_f32+0x46c>
 8008b6c:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8008b70:	4659      	mov	r1, fp
 8008b72:	9b01      	ldr	r3, [sp, #4]
 8008b74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008b78:	e71c      	b.n	80089b4 <arm_conv_f32+0x354>
 8008b7a:	4686      	mov	lr, r0
 8008b7c:	e785      	b.n	8008a8a <arm_conv_f32+0x42a>
 8008b7e:	46ac      	mov	ip, r5
 8008b80:	e7f7      	b.n	8008b72 <arm_conv_f32+0x512>
 8008b82:	9a01      	ldr	r2, [sp, #4]
 8008b84:	2a00      	cmp	r2, #0
 8008b86:	f47f aedd 	bne.w	8008944 <arm_conv_f32+0x2e4>
 8008b8a:	e76d      	b.n	8008a68 <arm_conv_f32+0x408>
 8008b8c:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8008954 <arm_conv_f32+0x2f4>
 8008b90:	4680      	mov	r8, r0
 8008b92:	e5e3      	b.n	800875c <arm_conv_f32+0xfc>

08008b94 <memset>:
 8008b94:	4402      	add	r2, r0
 8008b96:	4603      	mov	r3, r0
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d100      	bne.n	8008b9e <memset+0xa>
 8008b9c:	4770      	bx	lr
 8008b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008ba2:	e7f9      	b.n	8008b98 <memset+0x4>

08008ba4 <__libc_init_array>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	4d0d      	ldr	r5, [pc, #52]	; (8008bdc <__libc_init_array+0x38>)
 8008ba8:	4c0d      	ldr	r4, [pc, #52]	; (8008be0 <__libc_init_array+0x3c>)
 8008baa:	1b64      	subs	r4, r4, r5
 8008bac:	10a4      	asrs	r4, r4, #2
 8008bae:	2600      	movs	r6, #0
 8008bb0:	42a6      	cmp	r6, r4
 8008bb2:	d109      	bne.n	8008bc8 <__libc_init_array+0x24>
 8008bb4:	4d0b      	ldr	r5, [pc, #44]	; (8008be4 <__libc_init_array+0x40>)
 8008bb6:	4c0c      	ldr	r4, [pc, #48]	; (8008be8 <__libc_init_array+0x44>)
 8008bb8:	f000 f818 	bl	8008bec <_init>
 8008bbc:	1b64      	subs	r4, r4, r5
 8008bbe:	10a4      	asrs	r4, r4, #2
 8008bc0:	2600      	movs	r6, #0
 8008bc2:	42a6      	cmp	r6, r4
 8008bc4:	d105      	bne.n	8008bd2 <__libc_init_array+0x2e>
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bcc:	4798      	blx	r3
 8008bce:	3601      	adds	r6, #1
 8008bd0:	e7ee      	b.n	8008bb0 <__libc_init_array+0xc>
 8008bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd6:	4798      	blx	r3
 8008bd8:	3601      	adds	r6, #1
 8008bda:	e7f2      	b.n	8008bc2 <__libc_init_array+0x1e>
 8008bdc:	08008c4c 	.word	0x08008c4c
 8008be0:	08008c4c 	.word	0x08008c4c
 8008be4:	08008c4c 	.word	0x08008c4c
 8008be8:	08008c50 	.word	0x08008c50

08008bec <_init>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	bf00      	nop
 8008bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bf2:	bc08      	pop	{r3}
 8008bf4:	469e      	mov	lr, r3
 8008bf6:	4770      	bx	lr

08008bf8 <_fini>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	bf00      	nop
 8008bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfe:	bc08      	pop	{r3}
 8008c00:	469e      	mov	lr, r3
 8008c02:	4770      	bx	lr
