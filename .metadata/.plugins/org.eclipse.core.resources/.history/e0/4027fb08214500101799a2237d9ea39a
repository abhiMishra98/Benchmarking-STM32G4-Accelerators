/*
 * fmac_cmsis_interface.c
 *
 *  Created on: Jun 8, 2025
 *      Author: abhim
 */
#include "main.h"
#include "filter_coeffs.h"
#include "fmac_cmsis_interface.h"

/** Generated using Dr LUT - Free Lookup Table Generator
 * https://github.com/ppelikan/drlut
 **/
// Formula: sin(2*pi*t/T)
int16_t lut[256] = { 0, 804, 1608, 2410, 3212, 4011, 4808, 5602, 6393, 7179,
		7962, 8739, 9512, 10278, 11039, 11793, 12539, 13279, 14010, 14732,
		15446, 16151, 16846, 17530, 18204, 18868, 19519, 20159, 20787, 21403,
		22005, 22594, 23170, 23731, 24279, 24811, 25329, 25832, 26319, 26790,
		27245, 27683, 28105, 28510, 28898, 29268, 29621, 29956, 30273, 30571,
		30852, 31113, 31356, 31580, 31785, 31971, 32137, 32285, 32412, 32521,
		32609, 32678, 32728, 32757, 32767, 32757, 32728, 32678, 32609, 32521,
		32412, 32285, 32137, 31971, 31785, 31580, 31356, 31113, 30852, 30571,
		30273, 29956, 29621, 29268, 28898, 28510, 28105, 27683, 27245, 26790,
		26319, 25832, 25329, 24811, 24279, 23731, 23170, 22594, 22005, 21403,
		20787, 20159, 19519, 18868, 18204, 17530, 16846, 16151, 15446, 14732,
		14010, 13279, 12539, 11793, 11039, 10278, 9512, 8739, 7962, 7179, 6393,
		5602, 4808, 4011, 3212, 2410, 1608, 804, 0, -804, -1608, -2410, -3212,
		-4011, -4808, -5602, -6393, -7179, -7962, -8739, -9512, -10278, -11039,
		-11793, -12539, -13279, -14010, -14732, -15446, -16151, -16846, -17530,
		-18204, -18868, -19519, -20159, -20787, -21403, -22005, -22594, -23170,
		-23731, -24279, -24811, -25329, -25832, -26319, -26790, -27245, -27683,
		-28105, -28510, -28898, -29268, -29621, -29956, -30273, -30571, -30852,
		-31113, -31356, -31580, -31785, -31971, -32137, -32285, -32412, -32521,
		-32609, -32678, -32728, -32757, -32767, -32757, -32728, -32678, -32609,
		-32521, -32412, -32285, -32137, -31971, -31785, -31580, -31356, -31113,
		-30852, -30571, -30273, -29956, -29621, -29268, -28898, -28510, -28105,
		-27683, -27245, -26790, -26319, -25832, -25329, -24811, -24279, -23731,
		-23170, -22594, -22005, -21403, -20787, -20159, -19519, -18868, -18204,
		-17530, -16846, -16151, -15446, -14732, -14010, -13279, -12539, -11793,
		-11039, -10278, -9512, -8739, -7962, -7179, -6393, -5602, -4808, -4011,
		-3212, -2410, -1608, -804 };

void cmsis_fir_q15_init(arm_fir_instance_q15 *S, uint16_t numTaps,
		const q15_t *pCoeffs, q15_t *pState, uint32_t blockSize) {
	arm_fir_init_q15(S, numTaps, pCoeffs, pState, blockSize);
}

void fmac_config_fir(FMAC_FilterConfigTypeDef *sFmacConfig, uint8_t ipBaseAddr,
		uint8_t ipBufferSize, uint32_t ipThreshold, uint8_t coeffBaseAddress,
		uint8_t CoeffBufferSize, uint8_t opBaseAddress, uint8_t opBufferSize,
		uint32_t opThreshold, int16_t *pCoeffA, uint8_t coeffASize,
		int16_t *pCoeffB, uint8_t coeffBSize, uint8_t ipAccess,
		uint8_t opAccess, uint32_t clip, uint32_t filter, uint8_t P, uint8_t Q,
		uint8_t R) {

	/* Set the coefficient buffer base address */
	sFmacConfig->CoeffBaseAddress = coeffBaseAddress;
	/* Set the coefficient buffer size to the number of coeffs */
	sFmacConfig->CoeffBufferSize = CoeffBufferSize;
	/* Set the Input buffer base address to the next free address */
	sFmacConfig->InputBaseAddress = ipBaseAddr;
	/* Set the input buffer size greater than the number of coeffs */
	sFmacConfig->InputBufferSize = ipBufferSize;
	/* Set the input watermark to zero since we are using DMA */
	sFmacConfig->InputThreshold = ipThreshold;
	/* Set the Output buffer base address to the next free address */
	sFmacConfig->OutputBaseAddress = opBaseAddress;
	/* Set the output buffer size */
	sFmacConfig->OutputBufferSize = opBufferSize;
	/* Set the output watermark to zero since we are using DMA */
	sFmacConfig->OutputThreshold = opThreshold;
	/* No A coefficients since FIR. To be used in IIR filter */
	sFmacConfig->pCoeffA = pCoeffA;
	sFmacConfig->CoeffASize = coeffASize;
	/* Pointer to the coefficients in memory */
	sFmacConfig->pCoeffB = pCoeffB;
	/* Number of coefficients */
	sFmacConfig->CoeffBSize = coeffBSize;
	/* Select FIR filter function */
	sFmacConfig->Filter = filter;
	/* Enable DMA input transfer */
	sFmacConfig->InputAccess = ipAccess;
	/* Enable DMA output transfer */
	sFmacConfig->OutputAccess = opAccess;
	/* Enable clipping of the output at 0x7FFF and 0x8000 */
	sFmacConfig->Clip = clip;
	/* P parameter contains number of coefficients */
	sFmacConfig->P = P; //Number of taps[FIR]
	/* Q parameter is not used */
	sFmacConfig->Q = Q; //Don't care [FIR]
	/* R parameter contains the post-shift value (none. To be used in IIR filters */
	sFmacConfig->R = R; //Gain[FIR]
}

void fmac_config_iir(FMAC_FilterConfigTypeDef *sFmacConfig, uint8_t ipBaseAddr,
		uint8_t ipBufferSize, uint32_t ipThreshold, uint8_t coeffBaseAddress,
		uint8_t CoeffBufferSize, uint8_t opBaseAddress, uint8_t opBufferSize,
		uint32_t opThreshold, int16_t *pCoeffA, uint8_t coeffASize,
		int16_t *pCoeffB, uint8_t coeffBSize, uint8_t ipAccess,
		uint8_t opAccess, uint32_t clip, uint32_t filter, uint8_t P, uint8_t Q,
		uint8_t R) {

	/* Set the coefficient buffer base address */
	sFmacConfig->CoeffBaseAddress = coeffBaseAddress;
	/* Set the coefficient buffer size to the number of coeffs */
	sFmacConfig->CoeffBufferSize = CoeffBufferSize;
	/* Set the Input buffer base address to the next free address */
	sFmacConfig->InputBaseAddress = ipBaseAddr;
	/* Set the input buffer size greater than the number of coeffs */
	sFmacConfig->InputBufferSize = ipBufferSize;
	/* Set the input watermark to zero since we are using DMA */
	sFmacConfig->InputThreshold = ipThreshold;
	/* Set the Output buffer base address to the next free address */
	sFmacConfig->OutputBaseAddress = opBaseAddress;
	/* Set the output buffer size */
	sFmacConfig->OutputBufferSize = opBufferSize;
	/* Set the output watermark to zero since we are using DMA */
	sFmacConfig->OutputThreshold = opThreshold;
	/* No A coefficients since FIR. To be used in IIR filter */
	sFmacConfig->pCoeffA = pCoeffA;
	sFmacConfig->CoeffASize = coeffASize;
	/* Pointer to the coefficients in memory */
	sFmacConfig->pCoeffB = pCoeffB;
	/* Number of coefficients */
	sFmacConfig->CoeffBSize = coeffBSize;
	/* Select FIR filter function */
	sFmacConfig->Filter = filter;
	/* Enable DMA input transfer */
	sFmacConfig->InputAccess = ipAccess;
	/* Enable DMA output transfer */
	sFmacConfig->OutputAccess = opAccess;
	/* Enable clipping of the output at 0x7FFF and 0x8000 */
	sFmacConfig->Clip = clip;
	/* P parameter contains number of coefficients */
	sFmacConfig->P = P; //Number of taps[FIR]
	/* Q parameter is not used */
	sFmacConfig->Q = Q; //Don't care [FIR]
	/* R parameter contains the post-shift value (none. To be used in IIR filters */
	sFmacConfig->R = R; //Gain[FIR]
}

void fmac_StartWithTimerIRQ(FMAC_HandleTypeDef *hfmac,
		FMAC_FilterConfigTypeDef *sFmacConfig, TIM_HandleTypeDef *htim6,
		DAC_HandleTypeDef *hdac1) {
	//	/* Configure the FMAC */
	if (HAL_FMAC_FilterConfig(hfmac, sFmacConfig) != HAL_OK)
		/* Configuration Error */
		Error_Handler();
	HAL_FMAC_FilterPreload(hfmac, &lut[0], 1, NULL, 0);
	HAL_StatusTypeDef startStatus;
	startStatus = HAL_FMAC_FilterStart(hfmac, NULL, 100);
	if (startStatus == HAL_OK) {
		HAL_DAC_Start(hdac1, DAC_CHANNEL_1);
		HAL_TIM_Base_Start_IT(htim6);
	} else {

	}
}
void fmac_FilterSetDAC_TimerISR(FMAC_HandleTypeDef *hfmac,
		DAC_HandleTypeDef *hdac1, uint8_t *lutIndex) {
	//	For FMAC implementation [polling]
	if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_YEMPTY) != FMAC_FLAG_YEMPTY) {
		int16_t result = hfmac->Instance->RDATA;
		uint32_t dacVal = (uint32_t) (((int32_t) result + 32768) >> 4); // scale to 12-bit
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dacVal);
	}
	if (__HAL_FMAC_GET_FLAG(hfmac, FMAC_FLAG_X1FULL) != FMAC_FLAG_X1FULL) {
		hfmac->Instance->WDATA = lut[(*lutIndex)++];
	}
}
